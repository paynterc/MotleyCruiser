<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init
show = false;
depth = -1000000;

text = "";
font = fnt_menus;
font_size = font_get_size(font);
scroll = 0;
alltext = noone;


event_user(0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Keyboard input
if(scr_user_input("mission_log")){
    show = !show;
    if(show){
        event_user(0);
    }
}

// STEP
var alength = array_length_1d(alltext);
if (keyboard_check_pressed(vk_anykey) == true)
{
    switch (keyboard_key)
    {
        case vk_down:
        scroll = min( scroll + 1, (alength - min(alength, maxlines) ) );
        break;
        case vk_up:
        scroll = max(scroll - 1, 0);
        break;
        /**
        case vk_space:
        alltext = scr_push_array(alltext,"MORE TEXT " + string(current_time));
        break;
        **/
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update window text and settings

tx=10;//top of rectangle
ty=10;
padding = 5;
margin = 10;
boxwidth = display_get_gui_width() - (margin * 2); // Do this in case window has been resized to fullscreen
boxheight = display_get_gui_height() - (margin * 2);
maxlength= boxwidth - (padding*2);
maxheight= boxheight - (padding*2);
maxlines = 20; 

/**
text_width = string_width_ext(text,font_size+(font_size/2), maxlength);
text_height = string_height_ext(text,font_size+(font_size/2), maxlength);
**/

scroll = 0;
alltext = noone;
for(var i = 0; i &lt; array_length_1d(global.missions); i++){
    this_mission = global.missions[i];
    if(this_mission[MISSION_STATE]=="complete") continue;// Skip the completed missions.
    var mtext = string(this_mission[MISSION_ID]) + " " + this_mission[MISSION_TEXT] + " : " + this_mission[MISSION_STATE];
    alltext = scr_push_array(alltext,mtext);
    
    var objectives = this_mission[MISSION_OBJECTIVES];
    for(var t = 0; t&lt;array_length_1d(objectives); t++){
        this_objective = objectives[t];
        var otext = " - " + string(this_objective[OBJECTIVE_DESCRIPTION]) + " : " + this_objective[OBJECTIVE_STATE];
        if(this_objective[OBJECTIVE_TYPE]=="kill_x_of_y"){
            otext += " | " + string(this_objective[OBJECTIVE_TARGET_COUNT_CURRENT]) + " of " + string(this_objective[OBJECTIVE_TARGET_COUNT]);
        }
        alltext = scr_push_array(alltext,otext);
    }
    
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(show){
    draw_set_font(font);
    draw_set_color(c_black);
    draw_set_alpha(.85);
    draw_rectangle(tx,ty,boxwidth,boxheight,0);
    draw_set_color(c_white);
    draw_rectangle(tx,ty,boxwidth,boxheight,1);

    var offset = 0;
    var this_mission = noone;
    draw_set_color(c_lime);
    draw_set_halign(fa_left);
    draw_set_valign(fa_top);
    draw_set_alpha(1);
    
    text = "CREDITS: " + string(global.credits);
    text_width = string_width_ext(text,font_size+(font_size/2), maxlength);
    text_height = string_height_ext(text,font_size+(font_size/2), maxlength);
    
    draw_text_ext
    (
        tx + padding,
        ty + padding + offset,
        text,
        font_size + (font_size/2),
        maxlength
    );
    offset += text_height + padding;
    
    text = "Sector " + " " + string(global.current_sector_row) + "," + string(global.current_sector_col);
    if(global.landed_type != noone){
        text = text + " " + string(global.landed_type) + " " + global.landed_name + " (" + string(global.landed_on) + ")";
    }
    text_width = string_width_ext(text,font_size+(font_size/2), maxlength);
    text_height = string_height_ext(text,font_size+(font_size/2), maxlength);
    draw_text_ext
    (
        tx + padding,
        ty + padding + offset,
        text,
        font_size + (font_size/2),
        maxlength
    );
    offset += text_height + padding;
    
    text = "Scroll " + " " + string(scroll);
    text_width = string_width_ext(text,font_size+(font_size/2), maxlength);
    text_height = string_height_ext(text,font_size+(font_size/2), maxlength);
    draw_text_ext
    (
        tx + padding,
        ty + padding + offset,
        text,
        font_size + (font_size/2),
        maxlength
    );   
    offset += text_height + padding;
    
    /**
    maxlines  = 10;
    totallines = 12;
    maxindex = 11;
    scroll = 5;
    scroll + maxlines = 15;  
    **/
    
    for(var i = scroll; i&lt; min(scroll + maxlines, array_length_1d(alltext)); i++){

        text = alltext[i];
        text_width = string_width_ext(text,font_size+(font_size/2), maxlength);
        text_height = string_height_ext(text,font_size+(font_size/2), maxlength);
        draw_text_ext
        (
            tx + padding,
            ty + padding + offset,
            text,
            font_size + (font_size/2),
            maxlength
        );
        offset += text_height + padding;
    }
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
