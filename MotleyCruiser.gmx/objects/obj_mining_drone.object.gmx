<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_ship_en</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_npc_ship</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set stats
acc_spd_fwd = .25;
acc_spd_rvs = .25;
turn_spd = 3;
max_spd_fwd = 10;
max_spd_rvs = 10;

mode = MODE_MINING;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update target and Disposition
// consider three attributes: FACTION, DISPOSITION and MODE.
if(hitby!=noone &amp;&amp; disposition != DISPOSITION_HOSTILE){
    if(hitby.faction == FACTION_PLAYER &amp;&amp; faction != FACTION_PLAYER){
        disposition = DISPOSITION_HOSTILE;
    }
}


if(disposition == DISPOSITION_HOSTILE){
    
    if(faction=FACTION_PLAYER){
        // Player faction vessels should never be hostile
        disposition=DISPOSITION_HELPFUL;
    }else{
        var s_count = instance_number(obj_ship);
        var cdist = noone;
        var closest = noone;
        for(var i = 0; i &lt; s_count; i++) {
            var s_ship = instance_find(obj_ship,i);
            if(s_ship.faction == FACTION_PLAYER &amp;&amp; !s_ship.disabled){
                var pdist = point_distance(s_ship.x,s_ship.y,x,y);
                if(cdist==noone || pdist&lt;cdist){
                    closest = s_ship;
                    cdist = pdist;
                }
            }
        }
        
        if(closest != noone){
            target = closest;
            tgt_dist = distance_to_object(target);
            mode = MODE_ATTACKING;
        }else{
            // Could not find an enabled player unit
            // All player units must have been disabled or destroyed.
            // GOOD LUCK, DOUCHE!
            disposition = DISPOSITION_NEUTRAL;
            mode = MODE_TRAVELING;
            hitby = noone;
            if(target_save!=noone){
                // Reset to original target. Planet, moon or whatever.
                target = target_save;
            }else{
                target = scr_find_landable_target();
            }
            
            bark = scr_random_sentence(1);// Random farewell.
            event_user(0);
            
        }
    
    }

}else if(disposition == DISPOSITION_HELPFUL){

    if(mode==MODE_DEFENDING &amp;&amp; instance_exists(obj_player_ship)){        
        var s_count = instance_number(obj_npc_ship);
        var cdist = noone;
        var closest = noone;
        for(var i = 0; i &lt; s_count; i++) {
            var s_ship = instance_find(obj_npc_ship,i);
            if(s_ship.disposition == DISPOSITION_HOSTILE &amp;&amp; scr_instance_in_view(s_ship) &amp;&amp; s_ship.id!=id){
                var pdist = point_distance(s_ship.x,s_ship.y,obj_player_ship.x,obj_player_ship.y);
                if(cdist==noone || pdist&lt;cdist){
                    closest = s_ship;
                    cdist=pdist;
                }
            }
        }
        if(closest != noone){
            target = closest;
        }else{
            target = obj_player_ship;
        }
        
        
    }

}else{
    // Mining by default
    
    if(target==noone || !instance_exists(target)){
        var s_count = instance_number(obj_asteroid);
        var cdist = noone;
        var closest = noone;
        var s_ship, pdist;
        for(var i = 0; i &lt; s_count; i++) {
            s_ship = instance_find(obj_asteroid,i);
            pdist = point_distance(s_ship.x,s_ship.y,x,y);
            if(cdist==noone || pdist&lt;cdist){
                closest = s_ship;
                cdist = pdist;
            }
        }
        
        if(closest != noone){
            target = closest;
            tgt_dist = distance_to_object(target);
            mode = MODE_MINING;
        }else{
            // Could not find an asteroid
    
            disposition = DISPOSITION_NEUTRAL;
            mode = MODE_WAITING;
            hitby = noone;
            if(target_save!=noone){
                // Reset to original target. Planet, moon or whatever.
                target = target_save;
            }
            
        }
    }

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Call alarm again
alarm[3] = room_speed * 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Orbit target

if(target != noone &amp;&amp; instance_exists(target)){
  
    if(can_move &amp;&amp; mode!=MODE_WAITING){
               
        if(speed&lt;1){
            //Stop accelerating when we get close      
            motion_add(image_angle+90,.25);
            if(speed&gt;1) speed = 1;
        }       
   
    }
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
