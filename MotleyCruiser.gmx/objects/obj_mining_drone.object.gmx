<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_drone</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_npc_ship</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set stats
acc_spd_fwd = .25;
acc_spd_rvs = .25;
turn_spd = 3;
max_spd_fwd = 10;
max_spd_rvs = 10;

mode = MODE_MINING;
faction = FACTION_NEUTRAL;
ship_type = ship_types.drone;


shields = global.ship_default_shields / 2;
shields_current = shields;
shields_regen_speed = global.ship_default_shields_regen_speed;//frequency of shield regen ticks.
shields_regen_points = 2;//shield regenerated on each tick.

hull = global.ship_min_hull;
hull_current = hull;

boardable = false;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Add modules
/****
DO NOT add ship_data unless you are adding the complete array.
Here I'm tring to add a module without ship_data.
***/
var module = scr_ship_module_installed();
var module_index = scr_modules_findbyname("Blue Proton Beam");
module[I_MODULE_INDEX]=module_index;
module[I_MODULE_COORDS] = scr_array(0,0);
module[I_MODULE_OFFSETS] = noone;//SETTING TO noone should place the module at shipe x,y
module[I_MODULE_XSCALE]=1;
module[I_MODULE_YSCALE]=1;
module[I_MODULE_COLOR]=c_white;
module[I_MODULE_DEPTH]=0;

var module_data=noone;
module_data[0]=module;

// This mimics the module instantiation in scr_instantiate_ship
for(var m=0; m&lt;array_length_1d(module_data); m++){
    
    var module_record = module_data[m];
    var coords = module_record[I_MODULE_COORDS];// Just set this to 0,0

    
    var r = coords[0];
    var c = coords[1];
    
    var offsets = noone;
    var gunoffsets = noone;
    
    offsets = noone;// THIS IS DIFFERENT FROM INSTATIATE SHIP   
    module_record[I_MODULE_OFFSETS] = offsets;


    // Get module prototype
    var m_proto = global.module_library[module_record[I_MODULE_INDEX]];
    if(m_proto[MODULE_TYPE]=="gun"){
        m_object = instance_create(x,y,obj_ship_module_gun);
    }else if(m_proto[MODULE_TYPE]=="turret"){
        m_object = instance_create(x,y,obj_ship_module_turret);
    }else{
        m_object = instance_create(x,y,obj_ship_module);
    }
    m_object.offsets = offsets;
    m_object.sprite_index = m_proto[MODULE_SPRITE_INDEX];
    m_object.image_blend = module_record[I_MODULE_COLOR];
    m_object.image_xscale = module_record[I_MODULE_XSCALE];
    m_object.image_yscale = module_record[I_MODULE_YSCALE];
    m_object.depth = depth - module_record[I_MODULE_DEPTH];
    m_object.faction = faction;
    m_object.module_data = module_record;
    m_object.module_type = m_proto[MODULE_TYPE];
    with(m_object){
        guntip = sprite_get_width(sprite_index)/2;
    }
    m_object.m_proto = m_proto;
    
    m_object.drawsprite = false;
    m_object.guntip = sprite_get_width(sprite_index)/2;// IMPORTANT: WE'RE MAKING THE GUN INVISIBLE AND SETTING THE EMINATION POINT TO THE SHIP SPRITE
    
    modules[m]=m_object.id;
    
    // Fp this after adding object to array in parent
    m_object.parent_obj = id;  
    module_data[m]=module_record;

}

weapon_range = 100;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update target and Disposition
// consider three attributes: FACTION, DISPOSITION and MODE.
if(hitby!=noone &amp;&amp; instance_exists(hitby) &amp;&amp; disposition != DISPOSITION_HOSTILE){
    if(hitby.faction == FACTION_PLAYER &amp;&amp; faction != FACTION_PLAYER){
        disposition = DISPOSITION_HOSTILE;
    }
}


if(disposition == DISPOSITION_HOSTILE){
    
    if(faction=FACTION_PLAYER){
        // Player faction vessels should never be hostile
        disposition=DISPOSITION_HELPFUL;
    }else{
    
    
        // Find closest ship of same faction
        var s_count = instance_number(obj_npc_ship);
        var cdist = noone;
        var closest = noone;
        for(var i = 0; i &lt; s_count; i++) {
            var s_ship = instance_find(obj_npc_ship,i);
            if(s_ship.faction == faction &amp;&amp; !s_ship.disabled &amp;&amp; s_ship.ship_type == ship_types.platform){
                var pdist = point_distance(s_ship.x,s_ship.y,x,y);
                if(cdist==noone || pdist&lt;cdist){
                    closest = s_ship;
                    cdist = pdist;
                }
            }
        }
    
        
        if(closest != noone){
            target = closest;
            tgt_dist = distance_to_object(target);
            mode = MODE_FLEEING;
            closest.dispostion = DISPOSITION_HOSTILE;
        }else{
            // Could not find a friendly ship to hid behind. Move to closest planet or station.
            disposition = DISPOSITION_NEUTRAL;
            mode = MODE_TRAVELING;
            hitby = noone;
            if(target_save!=noone){
                // Reset to original target. Planet, moon or whatever.
                target = target_save;
            }else{
                target = scr_find_landable_target();
            }
            
            bark = scr_random_sentence(1);// Random farewell.
            event_user(0);
            
        }
    
    }

}else if(disposition == DISPOSITION_HELPFUL){

    if(mode==MODE_DEFENDING &amp;&amp; instance_exists(obj_player_ship)){        
        var s_count = instance_number(obj_npc_ship);
        var cdist = noone;
        var closest = noone;
        for(var i = 0; i &lt; s_count; i++) {
            var s_ship = instance_find(obj_npc_ship,i);
            if(s_ship.disposition == DISPOSITION_HOSTILE &amp;&amp; scr_instance_in_view(s_ship) &amp;&amp; s_ship.id!=id){
                var pdist = point_distance(s_ship.x,s_ship.y,obj_player_ship.x,obj_player_ship.y);
                if(cdist==noone || pdist&lt;cdist){
                    closest = s_ship;
                    cdist=pdist;
                }
            }
        }
        if(closest != noone){
            target = closest;
        }else{
            target = obj_player_ship;
        }
        
        
    }

}else{
    // Mining by default
    
    if(target==noone || !instance_exists(target)){
        var s_count = instance_number(obj_asteroid);
        var cdist = noone;
        var closest = noone;
        var s_ship, pdist;
        for(var i = 0; i &lt; s_count; i++) {
            s_ship = instance_find(obj_asteroid,i);
            pdist = point_distance(s_ship.x,s_ship.y,x,y);
            if(cdist==noone || pdist&lt;cdist){
                closest = s_ship;
                cdist = pdist;
            }
        }
        
        if(closest != noone){
            target = closest;
            tgt_dist = distance_to_object(target);
            mode = MODE_MINING;
        }else{
            // Could not find an asteroid
    
            disposition = DISPOSITION_NEUTRAL;
            mode = MODE_WAITING;
            hitby = noone;
            if(target_save!=noone){
                // Reset to original target. Planet, moon or whatever.
                target = target_save;
            }
            
        }
    }

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Call alarm again
alarm[3] = room_speed * 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set shooting status
shooting = can_fire
&amp;&amp; (mode == MODE_ATTACKING || mode==MODE_DEFENDING ||  mode==MODE_MINING)
&amp;&amp; energy_current &gt; 0 
&amp;&amp; target != noone
&amp;&amp; instance_exists(target)
&amp;&amp; abs(angleDiff) &lt; 5 
&amp;&amp; !target.disabled
&amp;&amp; tgt_dist &lt;= weapon_range;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Orbit target

if(target != noone ){
  
    if(can_move &amp;&amp; mode!=MODE_WAITING){
               
        if(tgt_dist &lt;= weapon_range){
            //Stop accelerating when we get close      
            motion_add(image_angle+90,.25);
            if(speed&gt;1){
                speed = max(speed - 1,1);
            }
        }else{
             
            motion_add(image_angle,acc_spd_fwd);
        
        }     
   
    }
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Drop loot when dead
// Either minerals or ice
var drop = instance_create(x,y,obj_cargo_drop);
drop.cargo = choose(2,3);//minerals or ice
drop.qty = irandom(2)+1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw self
draw_self();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Debug draw
if(debug_mode){
    /***
    if(target!=noone){
        draw_set_color(c_white);
        draw_line(x,y,target.x,target.y);
    }
    ***/
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
