<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_room_level</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw the map
texture_set_interpolation(false);

// Resize

var wall_bg = bg_walltiles;

// Set the global.grid width and height
var width = room_width div CELL_WIDTH;
var height = room_height div CELL_HEIGHT;

// Create the DS global.grid
global.grid = ds_grid_create(width, height);

// Create the pathfinding global.grid
global.grid_path = mp_grid_create(0,0,width,height,CELL_WIDTH,CELL_HEIGHT);

// Fill the global.grid with VOID
ds_grid_set_region(global.grid, 0, 0, width, height, VOID);

// Find floor objects that were placed and update the global.grid with their location.
for(var i = 0; i &lt; instance_number(obj_floor); i++) {
    var wall = instance_find(obj_floor,i);
    wx = wall.x / CELL_WIDTH;
    wy = wall.y / CELL_HEIGHT;
    global.grid[# wx, wy] = FLOOR;
}

// Draw the level
scr_add_wall_tiles(height,width);

populated = false;

if(instance_exists(obj_player_start)){
    var px = obj_player_start.x;
    var py = obj_player_start.y;
    
    instance_create(px,py,obj_player);    
}

// Instatiate crew
var thiscrew = noone;
var crewMap = 0;
var raceMap = 0;
var gx;
var gy;//grid x, grid y
var xx
var yy;
for(var i=0; i&lt;array_length_1d(global.crew); i++){
    if(!is_array(global.crew[i])){
        continue;
    }
    // Find some place to put them
    gx = irandom_range(0,width);
    gy = irandom_range(0,height);
    while(global.grid[# gx,gy]!=FLOOR){
        gx = irandom_range(0,width);
        gy = irandom_range(0,height);
    }
    xx = gx * CELL_WIDTH + (CELL_WIDTH/2);
    yy = gy * CELL_WIDTH + (CELL_WIDTH/2);
    
    var npc_data = scr_npc();// Do this in case we've added any extra attributes since the last game save.
    npc_data = scr_fill_array(npc_data,global.crew[i]);
    if(!npc_data[NPC_ACTIVE]) continue;// Dead
    thiscrew = instance_create(xx, yy, obj_npc);
    
    thiscrew.npc_data = npc_data;
    with(thiscrew){
        scr_npc_map_to_object();
        if(sprite_exists(npc_data[NPC_SPRITE_TEMP])){
            sprite_index = npc_data[NPC_SPRITE_TEMP];
        }  
        faction = FACTION_PLAYER; 
        llight = glr_lightsimple_create(spr_glr_light_mask_point, 0, x, y, c_white,1,1);
        glr_lightsimple_set_scaling(llight,.5,.5);  
    }
    thiscrew.pspeed=obj_player.spd;
    thiscrew.pspeed_init = obj_player.spd;
    thiscrew.crew_index = i;//Keep track of which crewmember this is, in case he dies.
    thiscrew.mode="discourse";
    thiscrew.targetMtype=obj_player;// Object to move to.
    
}

// instantiate pets
for(var i=0; i&lt;array_length_1d(global.pets); i++){
    if(!is_array(global.pets[i])){
        show_debug_message("Not a pet");
        continue;
    }
    var petData = global.pets[i];
    //Find a spot on the floor
    gx = irandom_range(0,width);
    gy = irandom_range(0,height);
    while(global.grid[# gx,gy]!=FLOOR){
        gx = irandom_range(0,width);
        gy = irandom_range(0,height);
    }
    xx = gx * CELL_WIDTH + (CELL_WIDTH/2);
    yy = gy * CELL_WIDTH + (CELL_WIDTH/2);
    
    var newPet = scr_instantiate_pet(xx,yy,petData);
    newPet.state = pet_states.owned;
    
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set dialogue state
if(instance_exists(obj_dialog_control)){
    with(obj_dialog_control){
        state = dStates.galley;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Populate with crew
if(!populated){
    populated = true;
    var s_count = instance_number(obj_sentient);
        
    for(var i = 0; i &lt; s_count; i++) {
    
        var sentient = instance_find(obj_sentient,i);
        
        if(sentient.name==noone){
    
            if( is_array(global.crew) &amp;&amp; i&lt;array_length_1d(global.crew)){

                var npc_data = scr_npc();// Do this in case we've added any extra attributes since the last game save.
                npc_data = scr_fill_array(npc_data,global.crew[i]);
                if(!npc_data[NPC_ACTIVE]) continue;
                
                
                thiscrew = instance_create(sentient.x, sentient.y, obj_npc);
                thiscrew.npc_data = npc_data;
                with(thiscrew){
                    scr_npc_map_to_object();
                    if(sprite_exists(npc_data[NPC_SPRITE_TEMP])){
                        sprite_index = npc_data[NPC_SPRITE_TEMP];
                    }  
                    faction = FACTION_PLAYER;
                    mode = "discourse";
                }

                if(npc_data[NPC_RACE_INDEX]!=5 &amp;&amp; npc_data[NPC_RACE_INDEX]!=7){
                    // I like Pudnings to move
                    sentient.image_speed = 0;
                }
                
            }
            sentient.active=0        
    
        }
            
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
