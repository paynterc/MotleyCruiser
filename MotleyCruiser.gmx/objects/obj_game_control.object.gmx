<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init
scr_set_gui_vars();

// This object is placed in rm_init. It is persistant and enables things like game settings
global.paused = false;
global.game_loaded = noone;

// Baseline npc settings.
global.min_spd = 1; //minimum run speed for npc
global.min_hp = 5; //minimum hp for npc

global.min_station_npc = 3; //minimum npcs per station
global.max_station_npc = 10; //max npcs per station

// Basesline ship settings
global.ship_min_turn_spd=1;
global.ship_max_turn_spd=10;
global.ship_min_spd=1;
global.ship_max_spd=10;
global.ship_max_spd_fwd=10;
global.ship_max_spd_rvs=8;
global.ship_min_acc=0.1;
global.ship_max_acc=1;
global.ship_min_shields=0;
global.ship_max_shields=200;
global.ship_min_hull=5;
global.ship_max_hull=100;
global.ship_min_energy = 500;
global.ship_max_energy = 1000;
global.ship_min_weapon_spd = 3;
global.ship_max_weapon_spd = 0.1;

// Defaults can be reduced, but not beneath the min
global.ship_default_turn_spd=3;
global.ship_default_shields=100;
global.ship_default_shields=100;
global.ship_default_shields_regen_speed=3;
global.ship_default_shields_regen_points=5;
global.ship_default_energy_regen_speed=1;
global.ship_default_energy_regen_points=5;

global.radar_range=500;
global.box_height = 100;




/****************************************************************/
/*                      BASELINE GALAXY SETTINGS                */
/****************************************************************/
global.galaxy = ds_map_create();// Destroy at game end
global.galaxy_width = 20;// Not needed
global.sector_width = 10000;//width in pixels of space combat room
global.hull_repair_cost = 10; // Cost per hull unit

global.gx_locations = ds_map_create();// Destroy at game end

scr_new_game_defaults();

scr_faction_centers();


/****************************************************************/
/*                      DYNAMIC PLAYER DATA                     */
/****************************************************************/

global.player_sprite = noone;// Overwrite this on game load

// PLAYER SHIP: An array containing current ship state.
global.player_ship = noone;

// PLAYER MODEL: An array containing player clothing and body selections.
global.player_model = noone;

// PLAYER FLEET: An array of ships in the fleet and their current state.
global.fleet = noone;

// PLAYER CREW: An array of arrays for crew. Maybe a dsmap or dslist.
global.crew = noone;
global.team = scr_array_size(3);

// PLAYER MISSIONS: An array of ds_maps for missions
global.mission_id = 1000; //A number to start mission ids with. Increment this with each mission granted.
global.missions = noone;
global.objective_inc = 100

global.bullet_time=false;
global.speed_mod = 1;

// Money
global.credits = 1000;

// Time
global.day = 0;

// Inventory
item_int();//Inventory Items

// Commodities
scr_commoditiy_lib_int();

// Cargo
scr_cargo_init();

// Inventory
var cols = 1;
var rows = 21;
inventory_int(cols,rows);
global.base_inventory_cols = cols;
global.base_inventory_rows = rows;
// Equipped items
global.equipped = noone;
scr_hotbar_init();



/****************************************************************/
/*                      MENUS                                   */
/****************************************************************/
scr_pause_menu();


/****************************************************************/
/*                      ROOM LEVELS                             */
/****************************************************************/
scr_reset_room_random();



/****************************************************************/
/*                      SPACE LEVELS                            */
/****************************************************************/
global.ship_boarded = noone; // Should be an array of ship data from scr_make_ship;
global.new_ship = false; // Set to true if this is a new game


/****************************************************************/
/*                      LIBRARIES                               */
/****************************************************************/

// RACES
global.races = scr_races();

// Accessories
scr_accessories();

//Ships
scr_ships();

// Ship Modules
scr_modules();

//Scaffolds
global.scaffolds = scr_scaffolds();

//Ship Guns
scr_guns();

//Ship Turrets
scr_ship_turrets();

//Dialogue
scr_sentences();

//NPC Traits
scr_npc_traits_library();

scr_npc_occupation_library();

/****************************************************************/
/*                      GLOBALS                                 */
/****************************************************************/
global.grid = noone;

// Planet side stuff
global.planet_seed = noone;
global.planet_map = noone;// 2d array
global.planet_room_index_x = noone;
global.planet_room_index_y = noone;
global.planet_nextdoor = noone;


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Controller settings
global.pad = 0; // controller index
if gamepad_is_connected(global.pad){
    gamepad_set_axis_deadzone(global.pad, 0.5);
    gamepad_set_button_threshold(global.pad, 0.5);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Particle System

global.Particles = part_system_create();
part_system_depth(global.Particles, -100000 );


global.f1 = part_type_create();
part_type_shape(global.f1, pt_shape_smoke);
part_type_life(global.f1, room_speed*.25, room_speed*.50);
part_type_speed(global.f1, 5, 10, 0, .25);
part_type_scale(global.f1, .25, .25);
part_type_size(global.f1, .05, .10, 0.10, 0.01);
part_type_color2(global.f1,c_yellow,c_red);
part_type_alpha3(global.f1,1,0.8,0);
part_type_blend(global.f1,1);

global.ptcl_hole = part_type_create();
part_type_shape(global.ptcl_hole, pt_shape_ring);
part_type_life(global.ptcl_hole, room_speed*.15, room_speed*.25);
part_type_speed(global.ptcl_hole, 1, 3, 0, .25);
part_type_scale(global.ptcl_hole, .50, .50);
part_type_size(global.ptcl_hole, .25, 1, 0.10, 0.01);
part_type_color2(global.ptcl_hole,c_aqua,c_black);
part_type_alpha3(global.ptcl_hole,1,0.8,0);
part_type_blend(global.ptcl_hole,1);

global.ptcl_gate = part_type_create();
part_type_shape(global.ptcl_gate, pt_shape_ring);
part_type_life(global.ptcl_gate, room_speed*3, room_speed*4);
part_type_speed(global.ptcl_gate, .02, .05, 0, .25);
part_type_scale(global.ptcl_gate, 1, 1);
part_type_size(global.ptcl_gate, .5, 1.25, 0.05, 0.01);
part_type_color2(global.ptcl_gate,c_aqua,c_black);
part_type_alpha3(global.ptcl_gate,1,0.8,0);
part_type_blend(global.ptcl_gate,1);


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Player died. Show message
scr_display_message("You have died.","scr_game_load,"+string(global.game_loaded));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check hover status on menus
if(panel_pause[4]){
    scr_gui_button_state(panel_pause);
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(window_get_width()!=display_get_gui_width()){
        display_set_gui_size(window_get_width(), window_get_height());
        // or, try this: display_set_gui_size(view_wport[0], view_hport[0]);
        if(instance_exists(obj_main_menu)){
            with(obj_main_menu){
                scr_main_menu();
                scr_load_game_menu();//panel_load_game
                panel_main_menu[4]  = true;//Show menu
            }
        }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// User input
if(scr_user_input("pause")){   
    
    if(room!=rm_main_menu){
        global.paused = !global.paused;
    
        /// Show/hide the paused game menu
    
        panel_pause[4] = global.paused;
        if(!global.paused){
            panel_load_game[4]=false;
        }else{
            // Close all other windows
            scr_gui_toggle_windows("all");
        }
        
    }

}else if(scr_user_input("menu_close")){
    panel_load_game[4]=false;
    
    if(panel_pause[4]){
        panel_pause[4] = false;
        global.paused = false;
    }

}

if(scr_user_input("inventory_room")){
    room_goto(rm_galley);
    exit;
}


/****
Debug navigation commands
****/
if(scr_user_input("goto_ship_edit")){
    room_goto(rm_ship_edit);
}

if(scr_user_input("goto_player_edit")){
    room_goto(rm_player_edit);
}

if(scr_user_input("goto_space")){
    room_goto("rm_space");
}

if(scr_user_input("goto_shiplevel")){
    room_goto(rm_ship_deck_rnd);
}

if(scr_user_input("fullscreen")){
    if (!window_get_fullscreen()){        
        window_set_fullscreen(true);
        display_set_gui_maximise(round(display_get_width()/global.gui_width),round(display_get_height()/global.gui_height),0,0);
        //scr_resize_gui();
        scr_pause_menu();
        if(instance_exists(obj_main_menu)){
            with(obj_main_menu){
                scr_main_menu();
                scr_load_game_menu();//panel_load_game
                panel_main_menu[4]  = true;//Show menu
            }
        }
    }else{
       window_set_fullscreen(false); 
       display_set_gui_size(global.gui_width, global.gui_height);  
       //scr_resize_gui();       
       scr_pause_menu();
       if(instance_exists(obj_main_menu)){
            with(obj_main_menu){
                scr_main_menu();
                scr_load_game_menu();//panel_load_game
                panel_main_menu[4]  = true;//Show menu
            }
        }       
    }
}

if(scr_user_input("grant_credits")){
    // shift, control, C in debug mode
    global.credits+=1000;
}





</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// See if gui button was pressed.
if(panel_pause[4]){
    var pause_menu_button = scr_gui_button_click(panel_pause);
    if(pause_menu_button==0){
        global.paused = false;
        panel_pause[4] = false;
    }else if(pause_menu_button==1){
        // HELP MENU
    }else if(pause_menu_button==2){
        // SETTINGS MENU
    }else if(pause_menu_button==3){
        // MAIN MENU
        global.paused = false;
        room_goto(rm_main_menu);
    }
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Player died - death animation then message
global.paused = true;
alarm[0]=room_speed*3;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Close menus
scr_pause_menu();
panel_pause[4]=false;
panel_load_game[4]=false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Destroy stuff

if part_system_exists(global.Particles)
{
   part_system_destroy(global.Particles);
}

if part_type_exists(global.f1)
{
    part_type_destroy(global.f1);
}

if part_type_exists(global.ptcl_hole)
{
    part_type_destroy(global.ptcl_hole);
}

if part_type_exists(global.ptcl_gate)
{
    part_type_destroy(global.ptcl_gate);
}

if(ds_exists(global.galaxy,ds_type_map)){
    ds_map_destroy(global.galaxy);
}

if(ds_exists(global.gx_locations,ds_type_map)){
    ds_map_destroy(global.gx_locations);
}



// Inventory
if(ds_exists(global.item_id,ds_type_map)){
    ds_map_destroy(global.item_id);
}

if(ds_exists(global.inventory,ds_type_map)){
    ds_map_destroy(global.inventory);
}

if(ds_exists(global.ChestList,ds_type_list)){
    ds_list_destroy(global.ChestList);
}


if(sprite_exists(global.player_sprite)){
    sprite_delete(global.player_sprite);
}

// Cargo
/// Destroy stuff
if(ds_exists(global.cargo_list,ds_type_map)){
    ds_map_destroy(global.cargo_list);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Instantiate control objects
if(!instance_exists(obj_sound_control)){
    sound_control = instance_create(x,y,obj_sound_control);
    with(sound_control){
        persistent = true;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Debug text
    draw_set_color(c_lime);
    
    if(global.paused){
        draw_set_valign(fa_center);
        draw_text(display_get_gui_width() / 2, 32, "-- PAUSED --");
    }

    draw_set_valign(fa_left);
    draw_text(96, 32, "FPS Real: " + string(fps_real));
    
    draw_text(96, 64, "D WIDTH: " + string(display_get_width()));
    draw_text(96, 96, "D height: " + string(display_get_height()));
    
    draw_text(96, 128, "G WIDTH: " + string(display_get_gui_width()));
    draw_text(96, 160, "G height: " + string(display_get_gui_height()));
    
    draw_text(96, 192, "W WIDTH: " + string(window_get_width()));
    draw_text(96, 224, "W height: " + string(window_get_height()));
    
    draw_text(96, 256, "VP WIDTH: " + string(view_wport[0]));
    draw_text(96, 288, "VP height: " + string(view_hport[0]));
    
    draw_text(96, 352, "V WIDTH: " + string(view_wview[0]));
    draw_text(96, 384, "V height: " + string(view_hview[0]));

    
    if(instance_exists(obj_planet_surface)){
            draw_text(48, 64, "Room index x: " + string(global.planet_room_index_x) );
            draw_text(48, 96, "Room index y: " + string(global.planet_room_index_y) );
            draw_text(48, 128, "planet seed: " + string(global.planet_seed) );
            draw_text(48, 160, "room seed: " + string(obj_planet_surface.seed) );
    }
/***

    draw_text(48, 64, "D WIDTH: " + string(display_get_width()));
    draw_text(48, 96, "D height: " + string(display_get_height()));
    
    draw_text(48, 128, "G WIDTH: " + string(display_get_gui_width()));
    draw_text(48, 160, "G height: " + string(display_get_gui_height()));
    
    draw_text(48, 192, "W WIDTH: " + string(window_get_width()));
    draw_text(48, 224, "W height: " + string(window_get_height()));
    
    
    

    if(instance_exists(obj_player_ship)){
        draw_text(32, 64, "Decks Remaining: " + string(global.decks_remaining));
        draw_text(32, 96, "Mass: " + string(obj_player_ship.mass));
        draw_text(32, 128, "MaxFwd: " + string(obj_player_ship.max_spd_fwd));
        draw_text(32, 140, "EN: " + string(obj_player_ship.energy_regen_points));
    }
***/
   

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Menu Panels
scr_gui_draw_panel(panel_pause);
scr_gui_draw_panel(panel_load_game);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
