<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// GLOBAL VARIABLES
//This object is placed in rm_init. It is persistant and enables things like game settings

/****************************************************************/
/*                      GAME SETTINGS                           */
/****************************************************************/
//show_debug_overlay(true);
application_surface_enable(false);// Better performance this way
scr_load_player_config();

/****************************************************************/
/*                      GAME CONTROL                            */
/****************************************************************/
global.paused = false;
global.game_loaded = noone;
pauseForce=false;// Use this to force the global.paused status. For cases where you do not want the user to unpause through the "Continue" menu option.
custom_sprites = scr_new_array();// Keep track of any custom sprites that are created. Delete them at the end of the game.
global.zoomLvl=0;
global.autosave=false;
global.increment_day=false;

/****************************************************************/
/*                      GAME CONFIG                             */
/****************************************************************/
// Baseline npc settings.
global.min_spd = 1; //minimum run speed for npc
global.min_hp = 5; //minimum hp for npc
global.min_station_npc = 3; //minimum npcs per station
global.max_station_npc = 10; //max npcs per station

// Baseline ship settings
global.ship_min_turn_spd=1;
global.ship_max_turn_spd=10;
global.ship_min_spd=0;
global.ship_max_spd=10;
global.ship_max_spd_fwd=6;//9
global.ship_max_spd_rvs=5;//8
global.ship_min_acc=0;
global.ship_max_acc=1;
global.ship_min_shields=0;
global.ship_max_shields=1000;
global.ship_min_hull=5;
global.ship_max_hull=1000;
global.ship_min_energy = 50;
global.ship_max_energy = 1000;
global.ship_min_weapon_spd = 3;
global.ship_max_weapon_spd = 0.1;

// Ship defaults can be reduced, but not beneath the min
global.ship_default_turn_spd=3;
global.ship_default_hull=5;
global.ship_default_shields=0;
global.ship_default_shields_regen_speed=1;
global.ship_default_shields_regen_points=0;
global.ship_default_energy = 50;
global.ship_default_energy_regen_speed=1;
global.ship_default_energy_regen_points=5;
global.radar_range=500;
global.box_height = 100;
global.ship_bullet_speed_mod=2;// increase bullet speed globally

// Galaxy config
global.galaxy_width = 20;// Not needed
global.sector_width = 50000;//width in pixels of space combat room
global.hull_repair_cost = 10; // Cost per hull unit
global.rTSize = 5;//Width in sectors of each racial territory


global.speed_mod = 1;// global bullet speed modifier. make faster or slower
global.base_bullet_speed = BASE_BULLET_SPEED;// base enemy bullet speed
global.base_fire_rate = BASE_FIRE_RATE;// base enemy fire rate
global.base_player_mod_bulletspeed = BASE_PLAYER_MOD_BSPEED;// Player guns fire faster, bullets move faster
global.base_player_mod_firerate = BASE_PLAYER_MOD_FRATE;



global.galaxy_economy_mod = .2;// This an arbitrary number used to adjust prices globally.

/****************************************************************/
/*                      GAME INIT                               */
/****************************************************************/
// enums
enum guistates {
    main,
    load,
    spacetravel,
    onship,
    onstation,
    cinematic,
    inventory_equip,
}

// forsale = ready to buy, bought = just purchased, owned = on ship and interactable again
enum pet_states{
    forsale,
    bought,
    owned
}

enum playerstat {
    name,
    hp,
    hp_current,
    spd,
    spd_current
}

// Ship categorizaion
enum ship_function {
    trader,
    military,
    transport,
    miner,
    courier
}

// Use for when you only want a ship 
enum ship_types {
    ship=0,
    drone=1,
    platform=2
}

// subtypes of ships
enum ship_class {
    drone=0,
    platform=1,
    fighter=2,
    corvette=3,
    destroyer=4,
    frigate=5,
    cruiser=6,
    battleship=7,
    carrier=8,
    dreadnaught=9,
    tanker=10,
    freighter=11
}

enum bulletTypes {
    bullet,
    beam,
    missileDumb,
    missileGuided,
    rail
}

enum terrains{
    desert,swamp,rocky,glacier,ocean,forest,jungle,tundra,plains
}
enum biolevel{
    microbe,plant,animal
}
enum services{
    trade,
    ship_repair,
    ship_sales,
    band,
    gambling,
    loan_shark,
    black_market,
    pet_store,
    LENGTH  
}

enum depths{
    door = -3,
    ceilingTop = -2,
    ceilingBottom = -100 * 100,
    light = -100 * 200,
    bullet = -100 * 300,
    explosion = -100 *300,
    floorTile = 0
}

scr_entity_enums();// set some enums to use as entity indexes.

// Libraries. Mostly arrays of data
scr_races();
scr_accessories();
scr_modules();
scr_guns();
scr_ship_turrets();
scr_ships();
scr_scaffolds();
scr_sentences();
scr_npc_traits_library();
scr_npc_occupation_library();
scr_grievance_library();

// Economy Matrix
global.e_matrix=noone;// Economy matrix. Provides the value of products based on the current economy and the economy of origin
global.e_matrix[CC_AGRICULTURE,CC_AGRICULTURE]=1.00;
global.e_matrix[CC_AGRICULTURE,CC_MINING]=1.15;
global.e_matrix[CC_AGRICULTURE,CC_INDUSTRIAL]=1.25;
global.e_matrix[CC_AGRICULTURE,CC_TECH]=1.50;

global.e_matrix[CC_MINING,CC_AGRICULTURE]=1.50;
global.e_matrix[CC_MINING,CC_MINING]=1.00;
global.e_matrix[CC_MINING,CC_INDUSTRIAL]=1.15;
global.e_matrix[CC_MINING,CC_TECH]=1.25;

global.e_matrix[CC_INDUSTRIAL,CC_AGRICULTURE]=1.25;
global.e_matrix[CC_INDUSTRIAL,CC_MINING]=1.50;
global.e_matrix[CC_INDUSTRIAL,CC_INDUSTRIAL]=1.00;
global.e_matrix[CC_INDUSTRIAL,CC_TECH]=1.15;

global.e_matrix[CC_TECH,CC_AGRICULTURE]=1.15;
global.e_matrix[CC_TECH,CC_MINING]=1.25;
global.e_matrix[CC_TECH,CC_INDUSTRIAL]=1.50;
global.e_matrix[CC_TECH,CC_TECH]=1.00;

// DS DATA STRUCTURES. destroy at game end
global.galaxy = ds_map_create();// Destroy at game end
global.gx_locations = ds_map_create();// Destroy at game end
global.galaxy_map = ds_map_create();//Use this to store found locations in each sector
global.cargo_list = ds_map_create();
global.grievance_map = ds_map_create();// Destroy at game end
scr_commoditiy_lib_int();
global.grid = noone;// A ds_grid for room levels

item_int();//Inventory Items Library
var cols = 1;
var rows = 60;
inventory_int(cols,rows);
global.base_inventory_cols = cols;
global.base_inventory_rows = rows;

scr_faction_centers();// TODO: Get rid of references to this. Still in NPC setup.
global.player_sprite = noone;// Overwrite this on game load

scr_new_game_defaults(); // Initialize variables for new game



</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Controller settings
global.pad = 0; // controller index
if gamepad_is_connected(global.pad){
    gamepad_set_axis_deadzone(global.pad, 0.5);
    gamepad_set_button_threshold(global.pad, 0.5);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Particle System

global.Particles = part_system_create();
part_system_depth(global.Particles, -100000 );


global.f1 = part_type_create();
part_type_shape(global.f1, pt_shape_smoke);
part_type_life(global.f1, room_speed*.25, room_speed*.50);
part_type_speed(global.f1, 5, 10, 0, .25);
part_type_scale(global.f1, .25, .25);
part_type_size(global.f1, .05, .10, 0.10, 0.01);
part_type_color2(global.f1,c_yellow,c_red);
part_type_alpha3(global.f1,1,0.8,0);
part_type_blend(global.f1,1);

global.ptcl_hole = part_type_create();
part_type_shape(global.ptcl_hole, pt_shape_ring);
part_type_life(global.ptcl_hole, room_speed*.15, room_speed*.25);
part_type_speed(global.ptcl_hole, 1, 3, 0, .25);
part_type_scale(global.ptcl_hole, .50, .50);
part_type_size(global.ptcl_hole, .25, 1, 0.10, 0.01);
part_type_color2(global.ptcl_hole,c_aqua,c_black);
part_type_alpha3(global.ptcl_hole,1,0.8,0);
part_type_blend(global.ptcl_hole,1);

global.ptcl_gate = part_type_create();
part_type_shape(global.ptcl_gate, pt_shape_ring);
part_type_life(global.ptcl_gate, room_speed*3, room_speed*4);
part_type_speed(global.ptcl_gate, .02, .05, 0, .25);
part_type_scale(global.ptcl_gate, 1, 1);
part_type_size(global.ptcl_gate, .5, 1.25, 0.05, 0.01);
part_type_color2(global.ptcl_gate,c_aqua,c_black);
part_type_alpha3(global.ptcl_gate,1,0.8,0);
part_type_blend(global.ptcl_gate,1);


global.ptcl_jet = part_type_create();
part_type_shape(global.ptcl_jet, pt_shape_ring);
part_type_life(global.ptcl_jet, room_speed, room_speed*1.5);
part_type_speed(global.ptcl_jet, 1, 3, 0, .25);
part_type_scale(global.ptcl_jet, .5, .5);
part_type_size(global.ptcl_jet, .5, 1, -0.05, 0.01);
part_type_color2(global.ptcl_jet,c_aqua,c_white);
part_type_alpha3(global.ptcl_jet,1,0.8,0);
part_type_blend(global.ptcl_jet,1);

global.ptcl_trail = part_type_create();
part_type_shape(global.ptcl_trail, pt_shape_square);
part_type_life(global.ptcl_trail, room_speed, room_speed*1.5);
part_type_speed(global.ptcl_trail, 1, 3, 0, .25);
part_type_scale(global.ptcl_trail, .25, .25);
part_type_size(global.ptcl_trail, .5, 1, -0.05, 0.01);
part_type_color2(global.ptcl_trail,c_white,c_white);
part_type_alpha3(global.ptcl_trail,1,0.8,0);
part_type_blend(global.ptcl_trail,1);

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create support objects
scr_instantiate_control_objs();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Player died. Show message
scr_display_message("You have died.","scr_game_load,"+string(global.game_loaded));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Pause game,  Debug commands
if(scr_user_input(pin.pause) ){   
    if(room!=room_init &amp;&amp; room!=rm_main_menu){
        global.paused = true;
        scr_gui_set_context(obj_pause_menu);
    }   
}

if(pauseForce){
    if(room!=room_init &amp;&amp; room!=rm_main_menu){
        global.paused = true;
    }
}

if(scr_user_input(pin.inventory_room)){
    room_goto(rm_galley);
    exit;
}
if(scr_user_input(pin.test_room)){
    // shift, control, T
    room_goto(rm_bullettest);
    exit;
}

if(keyboard_check_pressed(ord("K"))){
    scr_grant_navpath();
}



/****
Debug navigation commands
****/
if(scr_user_input(pin.goto_ship_edit)){
    room_goto(rm_ship_edit);
}

if(scr_user_input(pin.goto_player_edit)){
    room_goto(rm_player_edit);
}

if(scr_user_input(pin.goto_galaxy_map)){
    // N key
    if(room!=rm_galaxy_map){
        global.room_return = room;
        room_goto(rm_galaxy_map);
    }else if(room==rm_galaxy_map){
        if( room_exists(global.room_return) &amp;&amp; global.room_return!=rm_galaxy_map ){
            room_goto(global.room_return);
        }else{
            room_goto(rm_space);
        }
    }
    
}


if(scr_user_input(pin.fullscreen)){
    if (!window_get_fullscreen()){        
        window_set_fullscreen(true);
    }else{
        window_set_fullscreen(false);    
    }
}

if(scr_user_input(pin.add_grievance)){
    scr_grievance_test(grievances.food_quality);
}





</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Player died - death animation then message
global.player_dead=true;
//global.paused = true;
alarm[0]=room_speed*3;
// Do something with gui
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Daily updates
if(global.increment_day){
    global.increment_day=false;
    scr_ev_new_day();
}
if(global.autosave){
    global.autosave=false;
    scr_game_save();
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Destroy stuff

if part_system_exists(global.Particles)
{
   part_system_destroy(global.Particles);
}

if part_type_exists(global.f1)
{
    part_type_destroy(global.f1);
}

if part_type_exists(global.ptcl_hole)
{
    part_type_destroy(global.ptcl_hole);
}

if part_type_exists(global.ptcl_gate)
{
    part_type_destroy(global.ptcl_gate);
}

if part_type_exists(global.ptcl_jet)
{
    part_type_destroy(global.ptcl_jet);
}

if part_type_exists(global.ptcl_trail)
{
    part_type_destroy(global.ptcl_trail);
}


if(ds_exists(global.galaxy,ds_type_map)){
    ds_map_destroy(global.galaxy);
}

if(ds_exists(global.gx_locations,ds_type_map)){
    ds_map_destroy(global.gx_locations);
}



// Inventory
if(ds_exists(global.item_id,ds_type_map)){
    ds_map_destroy(global.item_id);
}

if(ds_exists(global.inventory,ds_type_map)){
    ds_map_destroy(global.inventory);
}

if(ds_exists(global.ChestList,ds_type_list)){
    ds_list_destroy(global.ChestList);
}


if(sprite_exists(global.player_sprite)){
    sprite_delete(global.player_sprite);
}

// Cargo
if(ds_exists(global.cargo_list,ds_type_map)){
    ds_map_destroy(global.cargo_list);
}

if(ds_exists(global.galaxy_map,ds_type_map)){
    ds_map_destroy(global.galaxy_map);
}

// Crew temp sprites
for(var i=0; i&lt;array_length_1d(global.crew); i++){
    var npc_data = global.crew[i];
    var _sprite_index=scr_get_array_1d(npc_data,NPC_SPRITE_TEMP);
    if(sprite_exists(_sprite_index)){
        sprite_delete(_sprite_index);
    }
}

scr_grievance_clear_map();
ds_map_destroy(global.grievance_map);


scr_custom_sprite_deleteall();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Instantiate control objects
if(!instance_exists(obj_sound_control)){
    sound_control = instance_create(x,y,obj_sound_control);
    with(sound_control){
        persistent = true;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Debug text
    draw_set_color(c_lime);
    
    if(global.paused){
        //draw_set_valign(fa_center);
        //draw_text(display_get_gui_width() / 2, 32, "-- PAUSED --");
    }

    

    /***
    draw_text(96, 64, "D WIDTH: " + string(display_get_width()));
    draw_text(96, 96, "D height: " + string(display_get_height()));
    
    draw_text(96, 128, "G WIDTH: " + string(display_get_gui_width()));
    draw_text(96, 160, "G height: " + string(display_get_gui_height()));
    
    draw_text(96, 192, "W WIDTH: " + string(window_get_width()));
    draw_text(96, 224, "W height: " + string(window_get_height()));
    
    draw_text(96, 256, "VP WIDTH: " + string(view_wport[0]));
    draw_text(96, 288, "VP height: " + string(view_hport[0]));
    
    draw_text(96, 352, "V WIDTH: " + string(view_wview[0]));
    draw_text(96, 384, "V height: " + string(view_hview[0]));
***/
    
    /***
    if(instance_exists(obj_planet_surface)){
            draw_text(48, 64, "Room index x: " + string(global.planet_room_index_x) );
            draw_text(48, 96, "Room index y: " + string(global.planet_room_index_y) );
            draw_text(48, 128, "planet seed: " + string(global.planet_seed) );
            draw_text(48, 160, "room seed: " + string(obj_planet_surface.seed) );
    }
    ***/
/****
    draw_text(48, 64, "D WIDTH: " + string(display_get_width()));
    draw_text(48, 96, "D height: " + string(display_get_height()));
    
    draw_text(48, 128, "G WIDTH: " + string(display_get_gui_width()));
    draw_text(48, 160, "G height: " + string(display_get_gui_height()));
    
    draw_text(48, 192, "W WIDTH: " + string(window_get_width()));
    draw_text(48, 224, "W height: " + string(window_get_height()));
    

    if(instance_exists(obj_player_ship)){
        draw_text(32, 64, "Decks: " + string(global.decks));
        draw_text(32, 64, "Current Deck: " + string(global.deck_current));
        draw_text(32, 96, "Mass: " + string(obj_player_ship.mass));
        draw_text(32, 128, "MaxFwd: " + string(obj_player_ship.max_spd_fwd));
        draw_text(32, 140, "EN: " + string(obj_player_ship.energy_regen_points));
    }
***/
   

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Menu Panels
//scr_gui_draw_panel(panel_pause);
//scr_gui_draw_panel(panel_load_game);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
