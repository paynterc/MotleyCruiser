<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create the level
if(global.room_type!="random") exit;

texture_set_interpolation(false);

// Resize
room_width=340;
room_height = 340;

// Set the grid width and height
var width = room_width div CELL_WIDTH;
var height = room_height div CELL_HEIGHT;
sizeModifier = .15;//.10 .25 .50, .75, 1, 1.25 ... do not exceed 2. This is for the overall size of the grid. Larger ships.

// Create the DS grid
grid = ds_grid_create(width, height);

// Create the pathfinding grid
grid_path = mp_grid_create(0,0,width,height,CELL_WIDTH,CELL_HEIGHT);

// Fill the grid with floor
ds_grid_set_region(grid, 0, 0, width-1, height-1, FLOOR);



// Create the controller in the center of the grid
var cx = width div 2;
var cy = height div 2;

var cx2 = cx;
var cy2 = cy;

core_placed = false;

//Create the player
instance_create(cx * CELL_WIDTH + (CELL_WIDTH/2), cy * CELL_HEIGHT + (CELL_WIDTH/2), obj_player);



// Add the walls
for(var yy = 1; yy &lt; height-1; yy++){
    for(var xx=1; xx &lt; width-1; xx++){
        if(grid[# xx,yy] == FLOOR){
            // Check for walls
            if(grid[# xx+1, yy] != FLOOR){
                grid[# xx+1, yy] = WALL;
            }
            if(grid[# xx-1, yy] != FLOOR){
                grid[# xx-1, yy] = WALL;
            }
            if(grid[# xx, yy+1] != FLOOR){
                grid[# xx, yy+1] = WALL;
            }
            if(grid[# xx, yy-1] != FLOOR){
                grid[# xx, yy-1] = WALL;
            }          
        }    
    }
}
var e_placed = false;
// Draw the level
for(var yy = 0; yy &lt; height; yy++){
    for(var xx = 0; xx &lt; width; xx++){
        if(grid[# xx, yy] == FLOOR){
            
            tile_add(bg_floor, 0, 0, CELL_WIDTH, CELL_HEIGHT, xx*CELL_WIDTH, yy*CELL_HEIGHT, 0);
            
            var ex = xx * CELL_WIDTH + CELL_WIDTH/2;
            var ey = yy * CELL_HEIGHT + CELL_HEIGHT/2;
            
            // Place a core
            if(point_distance(ex,ey,obj_player.x,obj_player.y) &gt; 300 &amp;&amp; !core_placed){
                instance_create(ex,ey,obj_core);
                core_placed = true;
            }  

            // Maybe put an enemy here
            var odds = 30;
            
            if(point_distance(ex,ey,obj_player.x,obj_player.y) &gt; 80 &amp;&amp; irandom(odds) == odds){
                var newEnemy = instance_create(ex,ey,obj_enemy);
                var set_mode = "hold";
                
                var oddsMode = 3;
                var modRnm = irandom(oddsMode);
                if(modRnm==0){
                    set_mode = "hunt";
                }else if(modRnm==1){
                    set_mode = "defend";                
                }else{
                    set_mode = "hold";           
                }
                newEnemy.mode = set_mode;
                
                var race_index = irandom(array_height_2d(global.races)-1);
                newEnemy.sprite_index = global.races[race_index,RACE_SPR];
                e_placed = true;
            }

           
            
            
        }else{
            //This is a wall or void. Add a solid cell to the pathfinding grid.
            mp_grid_add_cell(grid_path,xx,yy);
        }
    }
}

var tw = CELL_WIDTH/2;
var th = CELL_HEIGHT/2;

// Add the tiles
for (var yy = 0; yy &lt; height*2; yy++) {
    for (var xx = 0; xx &lt; width*2; xx++) {
        if (grid[# xx div 2, yy div 2] == FLOOR) {
            // Get the tile's x and y
            var tx = xx*tw;
            var ty = yy*th;
            
            var right = grid[# (xx+1) div 2, yy div 2] != FLOOR;
            var left = grid[# (xx-1) div 2, yy div 2] != FLOOR;
            var top = grid[# xx div 2, (yy-1) div 2] != FLOOR;
            var bottom = grid[# xx div 2, (yy+1) div 2] != FLOOR;
            
            var top_right = grid[# (xx+1) div 2, (yy-1) div 2] != FLOOR;
            var top_left = grid[# (xx-1) div 2, (yy-1) div 2] != FLOOR;
            var bottom_right = grid[# (xx+1) div 2, (yy+1) div 2] != FLOOR;
            var bottom_left = grid[# (xx-1) div 2, (yy+1) div 2] != FLOOR;
            
             // Maybe place some cover
             var cOdds = 60;
             if( !top &amp;&amp; !bottom &amp;&amp; !right &amp;&amp; !left &amp;&amp; irandom(cOdds) == cOdds){
                var cover = instance_create(tx,ty,obj_crate);
                cover.depth = -ty;         
             }
            
            
            if (right) {
                if (bottom) {
                    tile_add(bg_walltiles, tw*0, th*1, tw, th, tx+tw, ty, -ty);
                    if(bottom_right){
                        tile_add(bg_walltiles, tw*4, th*1, tw, th, tx+tw, ty+th, -ty);
                    }
                    
                } else if (top) {
                    if (top_right) {
                        tile_add(bg_walltiles, tw*4, th*0, tw, th, tx+tw, ty-th, -ty);
                    } else {
                        tile_add(bg_walltiles, tw*3, th*0, tw, th, tx, ty-th, -ty);
                    }
                    tile_add(bg_walltiles, tw*0, th*1, tw, th, tx+tw, ty, -ty);
                } else {
                    tile_add(bg_walltiles, tw*0, th*1, tw, th, tx+tw, ty, -ty);
                }
            }
            
            if (left) {
                if (bottom) {
                    tile_add(bg_walltiles, tw*2, th*1, tw, th, tx-tw, ty, -ty);
                    if(bottom_left){
                        tile_add(bg_walltiles, tw*3, th*1, tw, th, tx-tw, ty+th, -ty);
                    }
                    
                } else if (top) {
                    if (top_left) {
                        tile_add(bg_walltiles, tw*3, th*0, tw, th, tx-tw, ty-th, -ty);
                    } else {
                        tile_add(bg_walltiles, tw*4, th*0, tw, th, tx, ty-th, -ty);
                    }
                    tile_add(bg_walltiles, tw*2, th*1, tw, th, tx-tw, ty, -ty);
                } else {
                    tile_add(bg_walltiles, tw*2, th*1, tw, th, tx-tw, ty, -ty);
                }
            }
            
            if (top) {
                if (!top_right) {
                    tile_add(bg_walltiles, tw*2, th*2, tw, th, tx, ty-th, -ty);
                } else if (!top_left) {
                    tile_add(bg_walltiles, tw*0, th*2, tw, th, tx, ty-th, -ty);
                } else {
                    tile_add(bg_walltiles, tw*1, th*2, tw, th, tx, ty-th, -ty);
                }
            }
            
            if (bottom) {
            

                if (!bottom_right) {
                    tile_add(bg_walltiles, tw*2, th*0, tw, th, tx, ty+th, -ty-tw*2);
                } else if (!bottom_left) {
                    tile_add(bg_walltiles, tw*0, th*0, tw, th, tx, ty+th, -ty-tw*2);
                } else {
                    tile_add(bg_walltiles, tw*1, th*0, tw, th, tx, ty+th, -ty-tw);
                }
                

            }
            


        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Template room
if(global.room_type!=="template") exit;

texture_set_interpolation(false);

// Resize
room_width=340;
room_height = 340;

// Set the grid width and height
var width = room_width div CELL_WIDTH;
var height = room_height div CELL_HEIGHT;
sizeModifier = .15;//.10 .25 .50, .75, 1, 1.25 ... do not exceed 2. This is for the overall size of the grid. Larger ships.

// Create the DS grid
grid = ds_grid_create(width, height);

// Create the pathfinding grid
grid_path = mp_grid_create(0,0,width,height,CELL_WIDTH,CELL_HEIGHT);

// Fill the grid with floor
ds_grid_set_region(grid, 0, 0, width-1, height-1, FLOOR);



// Create the controller in the center of the grid
var cx = width div 2;
var cy = height div 2;

var cx2 = cx;
var cy2 = cy;

core_placed = false;

//Create the player
instance_create(cx * CELL_WIDTH + (CELL_WIDTH/2), cy * CELL_HEIGHT + (CELL_WIDTH/2), obj_player);



// Add the walls
for(var yy = 1; yy &lt; height-1; yy++){
    for(var xx=1; xx &lt; width-1; xx++){
        if(grid[# xx,yy] == FLOOR){
            // Check for walls
            if(grid[# xx+1, yy] != FLOOR){
                grid[# xx+1, yy] = WALL;
            }
            if(grid[# xx-1, yy] != FLOOR){
                grid[# xx-1, yy] = WALL;
            }
            if(grid[# xx, yy+1] != FLOOR){
                grid[# xx, yy+1] = WALL;
            }
            if(grid[# xx, yy-1] != FLOOR){
                grid[# xx, yy-1] = WALL;
            }          
        }    
    }
}
var e_placed = false;
// Draw the level
for(var yy = 0; yy &lt; height; yy++){
    for(var xx = 0; xx &lt; width; xx++){
        if(grid[# xx, yy] == FLOOR){
            
            tile_add(bg_floor, 0, 0, CELL_WIDTH, CELL_HEIGHT, xx*CELL_WIDTH, yy*CELL_HEIGHT, 0);
            
            var ex = xx * CELL_WIDTH + CELL_WIDTH/2;
            var ey = yy * CELL_HEIGHT + CELL_HEIGHT/2;
            
            // Place a core
            if(point_distance(ex,ey,obj_player.x,obj_player.y) &gt; 300 &amp;&amp; !core_placed){
                instance_create(ex,ey,obj_core);
                core_placed = true;
            }  

            // Maybe put an enemy here
            var odds = 30;
            
            if(point_distance(ex,ey,obj_player.x,obj_player.y) &gt; 80 &amp;&amp; irandom(odds) == odds){
                var newEnemy = instance_create(ex,ey,obj_enemy);
                var set_mode = "hold";
                
                var oddsMode = 3;
                var modRnm = irandom(oddsMode);
                if(modRnm==0){
                    set_mode = "hunt";
                }else if(modRnm==1){
                    set_mode = "defend";                
                }else{
                    set_mode = "hold";           
                }
                newEnemy.mode = set_mode;
                
                var race_index = irandom(array_height_2d(global.races)-1);
                newEnemy.sprite_index = global.races[race_index,RACE_SPR];
                e_placed = true;
            }

           
            
            
        }else{
            //This is a wall or void. Add a solid cell to the pathfinding grid.
            mp_grid_add_cell(grid_path,xx,yy);
        }
    }
}

var tw = CELL_WIDTH/2;
var th = CELL_HEIGHT/2;

// Add the tiles
for (var yy = 0; yy &lt; height*2; yy++) {
    for (var xx = 0; xx &lt; width*2; xx++) {
        if (grid[# xx div 2, yy div 2] == FLOOR) {
            // Get the tile's x and y
            var tx = xx*tw;
            var ty = yy*th;
            
            var right = grid[# (xx+1) div 2, yy div 2] != FLOOR;
            var left = grid[# (xx-1) div 2, yy div 2] != FLOOR;
            var top = grid[# xx div 2, (yy-1) div 2] != FLOOR;
            var bottom = grid[# xx div 2, (yy+1) div 2] != FLOOR;
            
            var top_right = grid[# (xx+1) div 2, (yy-1) div 2] != FLOOR;
            var top_left = grid[# (xx-1) div 2, (yy-1) div 2] != FLOOR;
            var bottom_right = grid[# (xx+1) div 2, (yy+1) div 2] != FLOOR;
            var bottom_left = grid[# (xx-1) div 2, (yy+1) div 2] != FLOOR;
            
             // Maybe place some cover
             var cOdds = 60;
             if( !top &amp;&amp; !bottom &amp;&amp; !right &amp;&amp; !left &amp;&amp; irandom(cOdds) == cOdds){
                var cover = instance_create(tx,ty,obj_crate);
                cover.depth = -ty;         
             }
            
            
            if (right) {
                if (bottom) {
                    tile_add(bg_walltiles, tw*0, th*1, tw, th, tx+tw, ty, -ty);
                    if(bottom_right){
                        tile_add(bg_walltiles, tw*4, th*1, tw, th, tx+tw, ty+th, -ty);
                    }
                    
                } else if (top) {
                    if (top_right) {
                        tile_add(bg_walltiles, tw*4, th*0, tw, th, tx+tw, ty-th, -ty);
                    } else {
                        tile_add(bg_walltiles, tw*3, th*0, tw, th, tx, ty-th, -ty);
                    }
                    tile_add(bg_walltiles, tw*0, th*1, tw, th, tx+tw, ty, -ty);
                } else {
                    tile_add(bg_walltiles, tw*0, th*1, tw, th, tx+tw, ty, -ty);
                }
            }
            
            if (left) {
                if (bottom) {
                    tile_add(bg_walltiles, tw*2, th*1, tw, th, tx-tw, ty, -ty);
                    if(bottom_left){
                        tile_add(bg_walltiles, tw*3, th*1, tw, th, tx-tw, ty+th, -ty);
                    }
                    
                } else if (top) {
                    if (top_left) {
                        tile_add(bg_walltiles, tw*3, th*0, tw, th, tx-tw, ty-th, -ty);
                    } else {
                        tile_add(bg_walltiles, tw*4, th*0, tw, th, tx, ty-th, -ty);
                    }
                    tile_add(bg_walltiles, tw*2, th*1, tw, th, tx-tw, ty, -ty);
                } else {
                    tile_add(bg_walltiles, tw*2, th*1, tw, th, tx-tw, ty, -ty);
                }
            }
            
            if (top) {
                if (!top_right) {
                    tile_add(bg_walltiles, tw*2, th*2, tw, th, tx, ty-th, -ty);
                } else if (!top_left) {
                    tile_add(bg_walltiles, tw*0, th*2, tw, th, tx, ty-th, -ty);
                } else {
                    tile_add(bg_walltiles, tw*1, th*2, tw, th, tx, ty-th, -ty);
                }
            }
            
            if (bottom) {
            

                if (!bottom_right) {
                    tile_add(bg_walltiles, tw*2, th*0, tw, th, tx, ty+th, -ty-tw*2);
                } else if (!bottom_left) {
                    tile_add(bg_walltiles, tw*0, th*0, tw, th, tx, ty+th, -ty-tw*2);
                } else {
                    tile_add(bg_walltiles, tw*1, th*0, tw, th, tx, ty+th, -ty-tw);
                }
                

            }
            


        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Grant some inventory
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Cleanup

ds_grid_destroy(grid);
mp_grid_destroy(grid_path);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Music

audio_stop_all();
audio_play_sound(snd_theme2,1,1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="16">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// restart level
room_restart();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
