<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init
show_radar = false;
blips=noone;
blips[0]=-1;
px = obj_player_ship.x;
py = obj_player_ship.y;
rot_angle=0;
rotator = noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Find and set coords of blips
blips = noone;
blips[0] = -1;

if(!instance_exists(obj_player_ship)) exit
if(!show_radar) exit;

px = obj_player_ship.x;
py = obj_player_ship.y;

var blip=noone;
var coords=noone;

for ( var i = 0; i &lt; instance_number(obj_landable); i += 1 ){
 
    blip = instance_find( obj_landable, i );
    coords=noone;
    if( !scr_instance_in_view(blip) ){
        
        var dir=point_direction(obj_player_ship.x, obj_player_ship.y, blip.x, blip.y);
        var dist=point_distance(obj_player_ship.x, obj_player_ship.y, blip.x, blip.y); 
        var mdist1 = min(dist,100);var mdist2 = min(dist,400);
        
        coords[0]=px + lengthdir_x(mdist1,dir);
        coords[1]=py + lengthdir_y(mdist1,dir);
        coords[2]=px + lengthdir_x(mdist2,dir);
        coords[3]=py + lengthdir_y(mdist2,dir);
        coords[4]=clamp(global.radar_range/dist,0,1);
        coords[5]=c_white; 
        
        blips[i]=coords;  
    }
 
}

for ( var i = 0; i &lt; instance_number(obj_npc_ship); i += 1 ){
 
    blip = instance_find( obj_npc_ship, i );
    coords=noone;
    if(!scr_instance_in_view(blip)){
    
        var dir=point_direction(obj_player_ship.x, obj_player_ship.y, blip.x, blip.y);
        var dist=point_distance(obj_player_ship.x, obj_player_ship.y, blip.x, blip.y);  
        var mdist1 = min(dist,100);var mdist2 = min(dist,400);
        
        coords[0]=px + lengthdir_x(mdist1,dir);
        coords[1]=py + lengthdir_y(mdist1,dir);
        coords[2]=px + lengthdir_x(mdist2,dir);
        coords[3]=py + lengthdir_y(mdist2,dir);
        coords[4]=clamp(global.radar_range/dist,0,1);
        switch (blip.disposition)
        {
        case DISPOSITION_NEUTRAL:
            coords[5]=c_aqua;
            break;
        case DISPOSITION_HELPFUL:
            coords[5]=c_lime;
            break;
        case DISPOSITION_HOSTILE:
            coords[5]=c_red
            break;
        default:
            coords[5]=c_gray;
        }
 
        scr_push_array_1d(blips,coords);
    
    }    
}


rotator = noone;
rot_angle +=2;
rotator[0]= px + lengthdir_x(90,rot_angle);
rotator[1]= py + lengthdir_y(90,rot_angle);
rotator[2]= px + lengthdir_x(110,rot_angle);
rotator[3]= py + lengthdir_y(110,rot_angle);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw pointers
if(!instance_exists(obj_player_ship)) exit

if(show_radar){
    draw_set_colour(c_green);
    draw_circle(px,py,100,true);
}
if(rotator != noone) draw_line(rotator[0], rotator[1], rotator[2], rotator[3]);

if(blips==noone || blips[0]==-1) exit;
for(var i=0; i&lt;array_length_1d(blips); i++){
    var c = blips[i];
    if(c==noone || c&lt;1) continue;
    draw_set_alpha(c[4]);
    draw_set_colour(c[5]);
    draw_arrow(c[0], c[1], c[2], c[3],10);
}
draw_set_alpha(1);
draw_set_colour(c_white);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="82">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Show radar
show_radar = !show_radar;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
