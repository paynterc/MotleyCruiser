<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_ship_en</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_ship</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize

// Overwrite defaults
//turn_spd = 7;


// Custom defaults
dispostion = DISPOSITION_NEUTRAL;
mode = MODE_WAITING;//attack, flee, wait, patrol
accuracy = .9;
boardable = true; // May be boardable in some circumstances

//Animation speed is zero. Stay on one frame.
image_speed = 0;

//Fly in a random direction.
image_angle = random(360);
if(mode!=MODE_WAITING){
    speed = 0.5 + random(2);
}

target = noone;
target_save = noone;//Save in case we need to reset to original target
tgt_dist = 0;


facingMinusTarget = 100;
angleDiff = 100;

alarm[3] = room_speed * 1;

bark = noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="6">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Clear bark
bark = noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Landing animation
if(mode==MODE_LANDING){
    
    thrust_fwd = false;// Hide thruster flames
    thrust_rvs = false;
    modAlpha -=.05;
    speed = 0;
    x = target.x;
    y = target.y;
    var m_object;
    for(var m=0; m&lt;array_length_1d(modules); m++){
        m_object = modules[m];
        m_object.image_alpha = modAlpha;
    }
    
    if(modAlpha&lt;.10){
        for(var m=0; m&lt;array_length_1d(modules); m++){
            m_object = modules[m];
            instance_deactivate_object(m_object);
        }
        instance_deactivate_object(self);
    }else{   
        alarm[5] = room_speed * .10;
    }


}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Self-destruct
hull_current = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update target and Disposition
// consider three attributes: FACTION, DISPOSITION and MODE.
if(hitby!=noone &amp;&amp; disposition != DISPOSITION_HOSTILE){
    if(hitby.faction == FACTION_PLAYER &amp;&amp; faction != FACTION_PLAYER){
        disposition = DISPOSITION_HOSTILE;
    }
}


if(disposition == DISPOSITION_HOSTILE){
    
    if(faction=FACTION_PLAYER){
        // Player faction vessels should never be hostile
        disposition=DISPOSITION_HELPFUL;
    }else{
        var s_count = instance_number(obj_ship);
        var cdist = noone;
        var closest = noone;
        for(var i = 0; i &lt; s_count; i++) {
            var s_ship = instance_find(obj_ship,i);
            if(s_ship.faction == FACTION_PLAYER &amp;&amp; !s_ship.disabled){
                var pdist = point_distance(s_ship.x,s_ship.y,x,y);
                if(cdist==noone || pdist&lt;cdist){
                    closest = s_ship;
                    cdist = pdist;
                }
            }
        }
        
        if(closest != noone){
            target = closest;
            tgt_dist = distance_to_object(target);
            mode = MODE_ATTACKING;
        }else{
            // Could not find an enabled player unit
            // All player units must have been disabled or destroyed.
            // GOOD LUCK, DOUCHE!
            disposition = DISPOSITION_NEUTRAL;
            mode = MODE_TRAVELING;
            hitby = noone;
            if(target_save!=noone){
                // Reset to original target. Planet, moon or whatever.
                target = target_save;
            }else{
                target = scr_find_landable_target();
            }
            
            bark = scr_random_sentence(1);// Random farewell.
            event_user(0);
            
        }
    
    }

}else if(disposition == DISPOSITION_HELPFUL){

    if(mode==MODE_DEFENDING &amp;&amp; instance_exists(obj_player_ship)){        
        var s_count = instance_number(obj_npc_ship);
        var cdist = noone;
        var closest = noone;
        for(var i = 0; i &lt; s_count; i++) {
            var s_ship = instance_find(obj_npc_ship,i);
            if(s_ship.disposition == DISPOSITION_HOSTILE &amp;&amp; scr_instance_in_view(s_ship) &amp;&amp; s_ship.id!=id){
                var pdist = point_distance(s_ship.x,s_ship.y,obj_player_ship.x,obj_player_ship.y);
                if(cdist==noone || pdist&lt;cdist){
                    closest = s_ship;
                    cdist=pdist;
                }
            }
        }
        if(closest != noone){
            target = closest;
        }else{
            target = obj_player_ship;
        }
        
        
    }

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Call alarm again
alarm[3] = room_speed * 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update distance to target
if(target != noone &amp;&amp; instance_exists(target)){
    tgt_dist = distance_to_object(target);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Turn and Move (in step)
if(global.paused){
    if(speed != 0){
        saved_speed = speed;
        speed = 0;
    }
    exit;
}else{
    if(saved_speed != noone){
        speed = saved_speed;
        saved_speed = noone;
    } 
}

thrust_fwd=false;
if(target != noone &amp;&amp; instance_exists(target)){
  
    if(can_move &amp;&amp; mode!=MODE_WAITING){
        
        if( ( mode==MODE_FOLLOWING || (mode==MODE_DEFENDING &amp;&amp; target==obj_player_ship) ) &amp;&amp; tgt_dist&lt;200){           
            //image_angle = target.image_angle;
            var dd = angle_difference(target.image_angle, image_angle);
            image_angle += sin(degtorad(dd)) * turn_spd;             
            speed = target.speed;
            thrust_fwd=true;     
        }else{
           //angleDiff = scr_gradually_rotate_2(id,target,turn_spd,accuracy);
           //scr_gradually_rotate_3(self.id,target,turn_spd,accuracy);
           angleDiff = scr_gradually_rotate_5(id,target,turn_spd);
           
        }
        
        if(tgt_dist&gt;300 || mode==MODE_TRAVELING){
            //Stop accelerating when we get close      
            motion_add(image_angle,acc_spd_fwd);
            thrust_fwd=true;
        }       
    
    }
    

}


if(speed &gt; max_spd_fwd){
    speed = max_spd_fwd;
}

// Auto decelerate
//speed = max(speed - (0.01 + amod), 0);


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check for dead
if(hull_current &lt; 1){
    scr_ev_npc_ship_destroyed();
    // Destroy modules
    for(var m=0; m&lt;array_length_1d(modules); m++){
        var m_object = modules[m];
        instance_create(m_object.x,m_object.y,obj_impact);
        instance_deactivate_object(m_object);
        // Why deactivate vs destroy?
        // Deactivation is better in case there is any other object still trying to reference this object
    }
    
    scr_play_sound_at(snd_explosion_ship,x,y);
    event_user(1);// Dead action
    instance_deactivate_object(self);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set shooting status
shooting = can_fire
&amp;&amp; instance_exists(target)
&amp;&amp; target != noone 
&amp;&amp; abs(angleDiff) &lt; 5 
&amp;&amp; (mode == MODE_ATTACKING || mode==MODE_DEFENDING)
&amp;&amp; !target.disabled
&amp;&amp; target.faction != faction
&amp;&amp; energy_current &gt; 0 
&amp;&amp; tgt_dist &lt;= weapon_range;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Land if near target planet
if(can_move &amp;&amp; mode==MODE_TRAVELING){
    if(tgt_dist&lt;50){
        // Land or perform a script we planted earlier.
        mode=MODE_LANDING;
        x=target.x;
        y=target.y;
        // Go into landing animation
        instance_change(obj_landing_ship,true);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Drop loot when dead
// Either minerals or ice
var drop = instance_create(x,y,obj_cargo_drop);
drop.cargo = irandom(7);//any basic commodity
drop.qty = irandom(2)+1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Bark
alarm[6]=room_speed * 3;// Clear bark
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw Bark
if(bark!=noone){
    scr_draw_messagebox_plus(bark, 300, 10, id, c_black, false, noone, noone, 1);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw target status indicators
// THIS IS OLD STUFF FOR TESTING
exit;

if(target==noone || !instance_exists(target)) exit;
if(!can_fire){
    //draw red
    draw_set_color(c_red);
    draw_rectangle(x-32,y-55,x-30,y-53,0);
}

if(abs(angleDiff&gt;5)){
    //draw blue
    draw_set_color(c_blue);
    draw_rectangle(x-28,y-55,x-26,y-53,0);
    
}

if(target.disabled){
    //draw yellow
    draw_set_color(c_yellow);
    draw_rectangle(x-24,y-55,x-22,y-53,0);
}

if(energy_current&lt;1){
    //draw green
    draw_set_color(c_lime);
    draw_rectangle(x-20,y-55,x-18,y-53,0);
    
}

if(tgt_dist &gt; weapon_range){
    //draw cyan
    draw_set_color(c_fuchsia);
    draw_rectangle(x-16,y-55,x-14,y-53,0);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
