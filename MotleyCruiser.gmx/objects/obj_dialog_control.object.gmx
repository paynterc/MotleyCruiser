<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init
show = false;
sent = noone;// An obj_npc
shipId = noone;// Id of ship being communicated with

fly_conditionals=scr_array_size(10);
question=noone;// An index of fly_conditionals
answer=noone;// The value of fly_conditionals[question]

// Dialogue states. Possible contexts for dialogue.
enum dStates {
    cantina,
    spaceNoFuel,
    spaceRefuel,
    spaceNoOxygen,
    spaceNoWater,
    spaceNoFood,
    galley
}
state=noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Board ship
obj_game_control.pauseForce = false;
global.paused=false;
obj_ship_data.flag_outOfFuel=false;
if(instance_exists(obj_player_ship) &amp;&amp; instance_exists(shipId)){
    obj_player_ship.closest_boardable = shipId;
    state=noone;
    shipId=noone;
    with(obj_player_ship){
        scr_board_ship();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Unpause
obj_game_control.pauseForce = false;
global.paused=false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Capture user response
/***
"sent" refers to the npc sending the message.
***/
if(scr_user_input(pin.interact)){
    event_user(0);
}

question=noone;
answer=noone;

for(var i=0; i&lt;array_length_1d(fly_conditionals); i++){
    if( fly_conditionals[i] != noone ){
          question = i;
          answer = fly_conditionals[i];
          break;
    }
}

if(question != noone){
    if(state==dStates.spaceNoFuel){        
        scr_dlg_space_no_fuel();    
    }else if(state==dStates.cantina){
        scr_dlg_cantina();
    }else if(state==dStates.spaceRefuel){
        scr_dlg_buy_fuel();
    }else if(state==dStates.spaceNoOxygen){
        scr_dlg_space_no_oxy();
    }else if(state==dStates.spaceNoWater){
        scr_dlg_space_no_water();
    }else if(state==dStates.spaceNoFood){
        scr_dlg_space_no_food();
    }else if(state==dStates.galley){
        scr_dlg_galley();       
    }
}
scr_clear_conditionals();

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Start refueling conversation
var npcSprite = noone;
if(sent != noone){
    npcSprite = sent.sprite_index;
}else{
    npcSprite = spr_ship_ai;
}
// Decide if npc helps or attacks
// If help, calculate price
priceRefuel = scr_trade_calc_price(4,1,.05,CC_AGRICULTURE) * 1.75 ;// Sector price of fuel * 1.35
var txt ="";
var choices="";
var odds = irandom(3);

if(odds == 0){
    txt = "I can spare 1 units of fuel. If you want it you'll need to pay. I'll give you a choice:
    give me "+ string(priceRefuel) +" gold OR any crewmember I want. I know how to pick a good slave.";
    choices = "0,Pay gold,Sell crew,Attack!,Go away";
}else if(odds==1){
    txt = "I can spare 2 units of fuel. If you want it you'll need to pay me "+ string(priceRefuel) +" gold.";
    choices = "1,Pay gold,Attack!,Go away";
}else if(odds==2){
    txt = "I can spare 2 units of fuel. If you want it you'll need to give me a member of your crew...so I can sell them to the slaveers.";
    choices = "2,Sell crew,Attack!,No way";
}else{
    txt = "It's your lucky day. Im feeling generous. Here are two units of fuel.";
    choices = "3,Thanks!,Attack!";
}



scr_flywriter(txt,npcSprite,true,choices);
state = dStates.spaceRefuel;
obj_game_control.pauseForce = true;
global.paused=true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Open NPC dialogue. 
// For use in areas with obj_npc objects.

var this_sentient = noone;
var closest_range = 0;
var this_range = 0;
var check;
sent = noone;
var txt;

for(var i = 0; i &lt; instance_number(obj_npc); i++) {
    this_sentient = instance_find(obj_npc,i);
    this_range = point_distance(obj_player.x,obj_player.y,this_sentient.x,this_sentient.y);
    var thisMode = this_sentient.mode;
    var thisNpc = this_sentient.npc_data;
    if(this_range&lt;50 &amp;&amp; this_sentient.mode == "discourse"){
        if(sent==noone){
            sent = this_sentient;
            closest_range = this_range;
        }else if(this_range&lt;closest_range){
            sent = this_sentient;
            closest_range = this_range;
        }
    }
}

if(sent != noone &amp;&amp; sent.name != noone){
    
    if(state==dStates.cantina){
        
        var occ;
        if(sent.npc_data[NPC_OCCUPATION]!=noone &amp;&amp; sent.npc_data[NPC_OCCUPATION]&lt;array_length_1d(global.npc_occupations)){
            occ = global.npc_occupations[sent.npc_data[NPC_OCCUPATION]];   
        }else{
            occ = noone;
        }
    
    
        if(sent.is_trader){
            
            scr_gui_set_context(obj_trade);
        
        }else if( scr_in_array(global.hirable_occupations,sent.npc_data[NPC_OCCUPATION]) ){
            
            txt = "This individual goes by the name of " + sent.npc_data[NPC_NAME_FIRST] + " " + sent.npc_data[NPC_NAME_LAST] + ". ";   
            txt += sent.npc_data[NPC_NAME_FIRST] + " claims to be an excellent " + occ + ". Would like them to join your crew? It will cost " + string(sent.npc_data[NPC_HIRE_PRICE]) + "C per day.";  
            scr_flywriter(txt,sent.portrait_sprite,true,"0,OK,Nope");
            
                         
        }else if(sent.tip!=noone){
            
            txt = scr_random_sentence(5);
            if(txt == noone){
                txt="Buzz off.";
            }
            scr_flywriter(txt,sent.portrait_sprite,true,"1,OK"); 

             
        }else if(sent.is_shipwright){
        
            txt = "This individual goes by the name of " + sent.npc_data[NPC_NAME_FIRST] + " " + sent.npc_data[NPC_NAME_LAST] + ". ";   
            txt += sent.npc_data[NPC_NAME_FIRST] + " is a shipwright. Would like them to repair your ships? It will cost " + string(scr_repair_all_ship_cost()) + "C.";  
            scr_flywriter(txt,sent.portrait_sprite,true,"2,OK,Nope");
            
        }else if(sent.mission_id != noone ){
        
            var mission = ds_map_find_value(global.mission_map,sent.mission_id);

            if(!is_undefined(mission)){
                
                if(mission[? "complete"]==false){
                    var objective = scr_mission_objective_current(mission);
                    if(!is_undefined(objective)){

                        if(objective[? "type"] == missionTypes.speakToName){
                            var objNpcIdx = objective[? "npc"];// Should be a number                            
                            if(!is_undefined(objNpcIdx)){

                                sentIdx = scr_get_array_1d(sent.npc_data,NPC_GLOBAL_INDEX);

                                if(objNpcIdx == sentIdx){
                                    // This is the current objective and we are speaking to the right person
                                    objective[? "complete"] = true;
                                    
                                    if(mission[? "stage"] == mission[? "stageCount"] -1){
                                        // Mission is complete. Grant the reward.
                                       scr_mission_complete(mission[? "id"]);
                                        
                                        // Don't let the NPC grant another mission yet.
                                        sent.mission_id = noone;
                                    
                                    }else{
                                        mission[? "stage"] = min(mission[? "stage"]+1,mission[? "stageCount"]-1);
                                    }
                                    
                                    txt = objective[? "npcText"];
                                    if(is_undefined(txt)){
                                        txt = "Hello.";
                                    }
                                    scr_flywriter(txt,sent.portrait_sprite,true,"1,OK");
                                    
                                }else{
                                    txt = "I'm not ready to speak with you yet.";
                                    scr_flywriter(txt,sent.portrait_sprite,true,"1,OK");
                                }
                            
                            
                            }
                            
                        }else{
                            // We have a mission involving this person, but we're not on the right step yet
                            txt = objective[? "description"];
                            if(is_undefined(txt)){
                                txt = "You're not done.";
                            }
                            scr_flywriter(txt,sent.portrait_sprite,true,"1,OK");
                        }
                    }
                }                  
            }
            
        }else if(sent.mission != noone &amp;&amp; !is_undefined(sent.mission)){
            
            // Should only offer missions that have not been accepted yet. Accepted missions will have an ID.
            if(is_undefined(sent.mission[? "id"])){
                var check = 1;
                txt = sent.npc_data[NPC_NAME] + ": " + sent.mission[? "text"];
                scr_flywriter(txt,sent.portrait_sprite,true,"3,OK,Nope");
            }else{
                txt = scr_random_sentence(5);
                if(txt == noone){
                    txt="Buzz off.";
                }
                scr_flywriter(txt,sent.portrait_sprite,true,"1,OK");
            }

            
        }else if(sent.tip!=noone){
         
            scr_flywriter(sent.tip,sent.portrait_sprite,true,"4,OK,No Thanks");
             
        }else{
        
            txt = scr_random_sentence(5);
            if(txt == noone){
                txt="Buzz off.";
            }
            scr_flywriter(txt,sent.portrait_sprite,true,"1,OK");
        }
        
        
    }else if(state==dStates.galley){
            var rnd = irandom(2);
            /***
            switch(rnd){
                case 0:
                    scr_flywriter("Do you want to hear a story?",sent.sprite_index,true,"0,OK,No Thanks");
                    break;
                case 1:
                    scr_flywriter("Can I tell you about my planet?",sent.sprite_index,true,"1,OK,No Thanks");
                    break;
                case 2:
                    scr_flywriter("I don't want to talk.",sent.sprite_index,true,"2,OK");
                    break;
            }
            ***/
            scr_dlg_galley_prompts(sent);
    }else{
        // Do nothing for now
        var npcData = sent.npc_data;
    }
    
    
               
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
