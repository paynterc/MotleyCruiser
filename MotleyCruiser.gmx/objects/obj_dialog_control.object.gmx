<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.display_scale = display_get_gui_width()/view_wview[view_current];

// Get the mouse position relative to the gui not the room
global.gui_mouse_x = (mouse_x - view_xview[view_current]) * global.display_scale;
global.gui_mouse_y = (mouse_y - view_yview[view_current]) * global.display_scale;

show_dialog = false;

closest_sentient = noone;
staged_tree = noone;
staged_branch = noone;
staged_buttons = noone; //This will be an array containing the coordinates for buttons
player_has_mission = false; // Set this to true if his npc has granted the player a mission
npc_is_mission_target = false;
staged_objectives = noone; //Hold all the objectives that pertain to this npc
ready_complete_mission = false;

depth=-100000000;

text_scale = 0.30; // Text has to be scaled down when using views, unless we draw to gui.

// Variables for speach bubble
popup_width = view_wview[0]*.50;           // The max width of the text inside the messagebox.
popup_padding = 3;                     // The space between the text and the edge
text = "";                              // The text to draw in the box.  If empty, the questionmark will not show.
draw_below = false;                     // Force the box to be drawn below the questionmark
font = fnt_messagebox;                  // The font to use when drawing the messagebox text
font_color = c_white;                   // Color to draw the font and the border around messagebox
bak_color = c_teal;                   // The color for the messagebox background
draw_message = false;
// End speach bubble
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Hide box if player moves
if(instance_exists(obj_player)){
    if(obj_player.hspd!=0 || obj_player.vspd!=0){
        show_dialog = false;
        scr_reset_dialog();       
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check to see if mouse is over a button
var xhover = false;
var yhover = false;
var button_x = 0;
var button_y = 0;
var button_w = 0;
var button_h = 0;
if(staged_buttons != noone){
    for(var i = 0; i&lt;array_height_2d(staged_buttons); i++){
        if(array_length_2d(staged_buttons,i)==5){
            button_x = staged_buttons[i,0];
            button_y = staged_buttons[i,1];
            button_w = staged_buttons[i,2];
            button_h = staged_buttons[i,3];
    
            xhover = ( mouse_x == median(button_x, mouse_x, button_x + button_w) );
            yhover = ( mouse_y == median(button_y, mouse_y, button_y + button_h) );
            staged_buttons[i,4] = xhover &amp;&amp; yhover;
        }

    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// See if a button was clicked
if(staged_buttons != noone){
    for(var i = 0; i&lt;array_height_2d(staged_buttons); i++){
        if(array_length_2d(staged_buttons,i)==5){
            if( staged_buttons[i,4] ){//hover = true
                //show_message("CLICKED BUTTON " + string(i) );
                var thebuttons = staged_branch[D_BRANCH_BUTTONS];
                var clicked_button = thebuttons[i];
                var next_branch = noone;
                switch (clicked_button[D_BUTTON_ACTION]){                
                    case "step_to":
                        var link = clicked_button[D_BUTTON_LINKINDEX];
                        if(link != noone &amp;&amp; array_length_1d(staged_tree)&gt;link){
                            //Look to see if the next step is a job off. Make sure we haven't already accepted.
                            next_branch = staged_tree[link];
                            if(next_branch[D_BRANCH_TYPE]=="job" &amp;&amp; closest_sentient.mission != noone &amp;&amp; scr_has_mission(closest_sentient.mission)){
                                 staged_branch = scr_make_dialogue_branch("Have you finished that job yet?","exposition");
                                 scr_add_dialogue_button(staged_branch,"Nope.","step_to",0);
                                 
                            }else{
                                // Move on to the next branch normally.
                                staged_branch = staged_tree[link];
                            }

                            staged_buttons = noone; // CLEAR CURRENT BUTTONS FOR THE NEXT BRANCH
                        }else{
                            staged_branch = scr_make_dialogue_branch("I have no idea how to respond to that.","exposition");
                            scr_add_dialogue_button(staged_branch,"Sorry.","step_to",0);
                            staged_buttons = noone; 
                        }
                        break;
                    case "accept_mission":
                        if( !scr_has_mission(closest_sentient.mission) ){
                            //global.missions = scr_push_array(global.missions,closest_sentient.mission);
                            scr_accept_mission(closest_sentient.mission);
                        }
                        scr_delete_button(staged_tree[0],i);
                        staged_branch = staged_tree[0];
                        staged_buttons = noone;
                        
                        break;
                    case "complete_objective":
                        
                        if(clicked_button[D_BUTTON_RECORD]!=noone){
                            var complete = scr_complete_objective(clicked_button[D_BUTTON_RECORD],closest_sentient.global_index,"npc");
                            if(complete){
                                staged_branch = scr_make_dialogue_branch("Thank you.","exposition");
                                scr_add_dialogue_button(staged_branch,"You are most welcome.","step_to",0);
                                scr_delete_button(staged_tree[0],i);
                            }else{
                                staged_branch = scr_make_dialogue_branch("You have not done what was asked of you.","exposition");
                                scr_add_dialogue_button(staged_branch,"Oops.","step_to",0);
                            }
                            staged_buttons = noone;
                        }
                        
                        break;
                        
                        
                    case "intro":
                        staged_branch = staged_tree[0];
                        staged_buttons = noone;
                        break;
                    case "exit":
                        show_dialog = false;
                        scr_reset_dialog();
                        break;
                    default:
                        staged_branch = scr_make_dialogue_branch("I don't feel like talking now.","exposition");
                        scr_add_dialogue_button(staged_branch,"Sorry.","exit",noone);
                        staged_buttons = noone; 
                
                }

            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(show_dialog &amp;&amp; staged_branch!=noone &amp;&amp; closest_sentient.name != noone){
    
    draw_set_font(font);
    draw_set_color(font_color);
    var font_size = font_get_size(font);
    
    var bub = scr_draw_messagebox_plus(closest_sentient.name + ": " + staged_branch[D_BRANCH_TEXT], popup_width, popup_padding, closest_sentient, bak_color, draw_below, staged_branch[D_BRANCH_BUTTONS]);
    if(bub != noone){
        var thebuttons = staged_branch[D_BRANCH_BUTTONS];
        var thisbutton = noone;
        var button_x = bub[0];
        var button_y = bub[1];
        var button_w = 0;
        var button_h = 0;
        for(var i = 0; i &lt; array_length_1d(thebuttons); i++){
            thisbutton = thebuttons[i];
            
            button_w = round( string_width( thisbutton[D_BUTTON_TEXT] ) * text_scale );
            button_h = round( string_height( thisbutton[D_BUTTON_TEXT] ) * text_scale );           
            // Store the coordinates and state of the button. x, y, width, height, hover
            if( array_height_2d( staged_buttons ) &lt; array_length_1d(thebuttons) ){ // Be sure you only do this once for each button
                staged_buttons[i,0]=button_x;
                staged_buttons[i,1]=button_y;
                staged_buttons[i,2]=button_w;
                staged_buttons[i,3]=button_h;
                staged_buttons[i,4]=false;
            }
            scr_draw_button(thisbutton[D_BUTTON_TEXT], button_x, button_y, staged_buttons[i,4]);
            button_y += button_h + 1;
            
        }  
    }

    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="84">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Open dialog box if player in range

show_dialog = !show_dialog;
scr_reset_dialog();
var this_sentient = noone;
var closest_range = 0;
var this_range = 0;
staged_buttons = noone;

if(show_dialog){

    for(var i = 0; i &lt; instance_number(obj_sentient); i++) {
        this_sentient = instance_find(obj_sentient,i);
        this_range = point_distance(obj_player.x,obj_player.y,this_sentient.x,this_sentient.y);
        if(this_range&lt;50){
            if(closest_sentient==noone){
                closest_sentient = this_sentient;
                closest_range = this_range;
            }else if(this_range&lt;closest_range){
                closest_sentient = this_sentient;
                closest_range = this_range;
            }
        }
    }
    
    if(closest_sentient != noone &amp;&amp; closest_sentient.name != noone){
          
        staged_tree = closest_sentient.dialogue;
        staged_branch = staged_tree[0];    
        
        if(scr_has_mission(closest_sentient.mission)){

            player_has_mission = true;
            
        }
        
         
        staged_objectives = scr_get_entity_objectives("npc",closest_sentient.global_index);// npc must be target of an ACTIVE objective
        
        if(staged_objectives != noone){

            for(var ob = 0; ob&lt;array_length_1d(staged_objectives); ob++){
                objv=staged_objectives[ob];
                var button = scr_make_dialogue_button("I have business with you (mission id: "+ string(objv[OBJECTIVE_MISSION_ID])+").","complete_objective",0,noone,objv[OBJECTIVE_ID]);
                
                staged_branch[D_BRANCH_BUTTONS]= scr_push_dialogue_button(staged_branch[D_BRANCH_BUTTONS],button);
                staged_tree[0]=staged_branch;
            }
            
        }
                

   
    }


}



</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
