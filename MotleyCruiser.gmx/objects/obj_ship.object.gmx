<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_ship</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize
saved_speed = noone;
modules = noone;
ship_data = noone;
hitrad=noone;// colision radius


faction = noone; //FACTION_PIRATE, FACTION_TRADER

// Ship state
disabled = false;
can_move = true;
can_fire = true;
target = noone;
shooting = false;

// Ship stats
turn_spd = 2;
max_spd = 5;
max_spd_fwd = 5;
max_spd_rvs = 3;
acc_spd_fwd = 0.2;//acceleration speed forward
acc_spd_rvs = 0.2;//acceleration speed reverse

shields = 100;
shields_current = shields;
shields_regen_speed = 3;//frequency of shield regen ticks.
shields_regen_points = 5;//shield regenerated on each tick.

hull = 50;
hull_current = hull;

energy = 500;
energy_current = energy;
energy_regen_speed = 1;//frequency of energy regen ticks.
energy_regen_points = 5;//energy regenerated on each tick.

weapon_speed = 0.1;//multiplied by 1 second or room_speed
weapon_range = 400;


shieldSizeMod = (sprite_width/sprite_get_width(spr_shield)) + 0.5;



// Start alarms

alarm[1] = room_speed * energy_regen_speed;
alarm[2] = room_speed * shields_regen_speed;

image_speed=0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Regen some shields
shields_current += shields_regen_points;
if(shields_current&gt;shields){
    shields_current = shields;
}
if(shields_current&lt;0){
    shields_current = 0;
}
alarm[2] = room_speed * shields_regen_speed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Regen some energy
energy_current += energy_regen_points;
if(energy_current&gt;energy){
    energy_current = energy;
}
if(energy_current&lt;0){
    energy_current = 0;
}
alarm[1] = room_speed * energy_regen_speed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Auto deceleration
//Step events are fired every frame.
//max() chooses the largest of all the comma-separated values.
if(global.paused){
    exit;
}
speed = max(speed - 0.01, 0);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update module positions
if(modules != noone)
for(var m=0; m&lt;array_length_1d(modules); m++){
    var module = modules[m];   
    var offsets = module.module_data[MODULE_OFFSETS];
    var d = offsets[0]; // distance
    var a = offsets[1]; // angle
    
    module.x = x + lengthdir_x(d, image_angle + a);
    module.y = y + lengthdir_y(d, image_angle + a);
    module.image_angle = image_angle;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Bullet collision
var inst;
// Bounding  box
var bx1 = noone;
var by1 = noone;
var bx2 = noone;
var by2 = noone;

if(ship_data!=noone){
    if(hitrad==noone){
        hitrad = (ship_data[SHIP_SCAFFOLD_SIZE] * 16) / 2;
    }
        
    inst = collision_circle(x, y, hitrad, obj_damager, false, true);
    
    if inst != noone
    {
        
        if(inst.type != faction){
            if(shields_current&gt;0){
                shields_current -= inst.damage;
            }else if(hull_current&gt;0){
                hull_current -= inst.damage;
                
                if(!disabled){
                    var dchance = round( (hull_current/hull) * 100 );
                    if(irandom(dchance)==dchance){
                        disabled = true;
                        can_move = false;
                        can_fire = false;
                    }
                }
        
            }
            // Handle death in child object
            with(inst){  
                instance_destroy();
            }
        }

    }
    
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_ship">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Bounce
var pdir;
pdir = point_direction(other.x, other.y, x, y);
motion_add(pdir, other.speed);
if speed &gt; 5 speed = 5;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw shields
//draw_self()
//draw_sprite_ext( spr_shield, 0, x, y, shieldSizeMod, shieldSizeMod, image_angle, c_aqua, shields_current/shields );
draw_healthbar(x-32,y-50,x+32,y-48, (shields_current/shields) * 100,c_black,c_aqua,c_aqua,0,false,false);
draw_healthbar(x-32,y-47,x+32,y-45, (hull_current/hull) * 100,c_black,c_red,c_red,0,false,false);
draw_healthbar(x-32,y-44,x+32,y-42, (energy_current/energy) * 100,c_yellow,c_yellow,c_yellow,0,false,false);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
