<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Init
// See inventory_int() in obj_game_control
texture_set_interpolation(false);

if(instance_exists(obj_gui_control)){
    obj_gui_control._state = guistates.inventory_equip;
}

image_speed = .25;

// Add some inventory for testing
inventory_item_add(5,5);// human blood
inventory_item_add(7,5);// perfume
inventory_item_add(57,1);// singularity canon
inventory_item_add(52,1);// card
inventory_item_add(58,1);// shotgun
inventory_item_add(59,1);// map
inventory_item_add(60,1);// singularity pistol
inventory_item_add(55,1);// sword
inventory_item_add(61,1);// blob pistol
inventory_item_add(55,1);// sword
inventory_item_add(61,1);// blob pistol
inventory_item_add(55,1);// sword
inventory_item_add(61,1);// blob pistol
inventory_item_add(55,1);// sword
inventory_item_add(61,1);// blob pistol
inventory_item_add(55,1);// sword
inventory_item_add(61,1);// blob pistol
inventory_item_add(55,1);// sword
inventory_item_add(61,1);// blob pistol
inventory_item_add(55,1);// sword
inventory_item_add(61,1);// blob pistol
inventory_item_add(55,1);// sword
inventory_item_add(61,1);// blob pistol
inventory_item_add(55,1);// sword
inventory_item_add(61,1);// blob pistol
inventory_item_add(55,1);// sword
inventory_item_add(61,1);// blob pistol
inventory_item_add(55,1);// sword
inventory_item_add(61,1);// blob pistol
inventory_item_add(55,1);// sword
inventory_item_add(61,1);// blob pistol
inventory_item_add(55,1);// sword
inventory_item_add(61,1);// blob pistol
inventory_item_add(55,1);// sword
inventory_item_add(61,1);// blob pistol

show_debug_message("inv rows: " + string(global.base_inventory_rows));
// Init menu
page=0;
global.ItemSelected=-1;
global.ItemLastSelect=-1;
slot=1;// width in columns of interface.

// Filter inventory in event user 1
filterValue="equipment";
filteredInventory = noone;
rows = noone;


// Size UI items
spritebox = spr_slot_lg;
sprite_infobox = spr_slot_lg;
show=true;
font = fnt_menus;
font_size = font_get_size(font);
padding = 4;
margin = 4;
boxwidth = (room_width/5) - ( margin * 2 );
boxheight = room_height - ( margin * 2 );
slot_gap = 7;
box_x = margin;//top of rectangle
box_y = margin;
box_hcenter = (boxwidth/2) + box_x;
box_vcenter  = (room_height/2);
box_center = (boxwidth/2)+margin;
box_bottom = box_y+boxheight;


last_stack = 0;
last_slot = 0;
last_id_item = 0;
   
current_stack = 0;
current_slot = 0;
current_id_item = 0;

crew_sprites_set = false;// Draw sprites for crew

// Crew Selected equipment variables
cws_index = noone;// index of crewmemnber last selected
cws_slot = noone;// index of crew slot selected
cws_item = noone;// inventory index of selected item.

// Player Selected equipment variables
pls_slot = noone;
pls_item = noone;

// Set array to keep track of slots that are hovered over and selected
hvr = noone;
team_hover = noone;// Track the team member slot hovered over


// Pagination
rows_per_page=6;
page=0;
start_row = page * rows_per_page;
start_index = 0;
page_rows = min(rows - start_row,rows_per_page);

// Navigation buttons
navbuttons = noone;
nbtn_left=scr_gui_entity_button();
nbtn_right=scr_gui_entity_button();

var bw = 64;
nbtn_left[0]=box_hcenter;// x
nbtn_left[1]=box_y+padding+2;// y
nbtn_left[2]=bw;// width
nbtn_left[3]=8;// height
nbtn_left[4]=false;// hover status
nbtn_left[5]="";// text

nbtn_right[0]=box_hcenter;// x
nbtn_right[1]=box_y+boxheight-padding-10;// y
nbtn_right[2]=bw;// width
nbtn_right[3]=8;// height
nbtn_right[4]=false;// hover status
nbtn_right[5]="";// text

navbuttons[0]=nbtn_left;
navbuttons[1]=nbtn_right;

// Available crewmates in bunks
bunks = noone;
var in_team=false;
for(var i=0; i&lt;array_length_1d(global.crew); i++){
    var C = global.crew[i];
    if(!C[NPC_ACTIVE]) continue;// Dead
    // Check to see if crew member is already on the strike team
    in_team = scr_in_array(global.team,i);
    if(!in_team){
        bunks = scr_push_array(bunks,i);
    }
    
}

bunks_index = 0;// Move this up and down for pagination
bunks_ttl = 8;
bunks_perpage = 9;// Max bunks per page
bunk_ymod = 2;
bunk_xmod = 4;
bunk_margin = 10;
bkx_width = sprite_get_width(spr_modelframe1);
bunk_hover = noone;// Hover array for bunks

selected_crew=noone;
selected_team=noone;

// Delete buttons
dbwidth = sprite_get_width(spr_delete);

// Exit button
var btn_w = 48, btn_h=16;
btn_xm1=10;
btn_ym1=2;
instance_create(room_width-btn_w-margin+btn_xm1,margin+btn_ym1,obj_inv_save_button);

btx_mod=-16;// Modifiers for little fuel, food icons
bty_mod=-10;


event_user(0);// Reset state variables
event_user(1);// Filter Inventory
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check buttons

var lbtn = navbuttons[0];
lbtn[@ BTN_SHOW] = start_index &gt; 0;

var rbtn = navbuttons[1];
rbtn[@ BTN_SHOW] = rows &gt;= start_index + rows_per_page;

var guix = mouse_x;
var guiy = mouse_y;
for(var i = 0; i&lt;array_length_1d(navbuttons); i++){
    thebutton = navbuttons[i];
    button_x = thebutton[0];
    button_y = thebutton[1];
    button_w = thebutton[2];
    button_h = thebutton[3];   
    xhover = ( guix == median( button_x - (button_w/2), guix, button_x + (button_w/2) ) );
    yhover = ( guiy == median(button_y, guiy, button_y + button_h) );
    thebutton[@ 4] = xhover &amp;&amp; yhover &amp;&amp; thebutton[BTN_SHOW];
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// See if button was clicked
for(var i=0; i&lt;array_length_1d(navbuttons); i++){
    btn=navbuttons[i];
    if(btn[BTN_HOVER]){
        if(i==0){
            //page = max(0,page-1);
            start_index = max(0,start_index-1);
            break;
        }else if(i==1){
            //page = min(page+1,ceil(rows/rows_per_page)-1);
            start_index = min(start_index+1,rows-1);               
            break;
        }
    }
}
    

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Filter Inventory
filteredInventory = noone;
for (i=0; i&lt;global.base_inventory_rows; i++)
{
    if(is_undefined(ds_map_find_value(global.inventory,"slot"+string(i)))){
        ds_map_add(global.inventory,"slot"+string(i),false);
        ds_map_add(global.inventory,"ID"+string(i),-1);
        ds_map_add(global.inventory,"Stack"+string(i),-1);
    }else{
        if ds_map_find_value(global.inventory,"slot"+string(i)) == true{
            item_id_va = ds_map_find_value(global.inventory,"ID"+string(i)); // Here we look for the item id in the slot. index = slot. Truly, all you need for inventory is an array of item ids, but slots allow you to limit number of items and move items around
            type = ds_map_find_value(global.item_id,"item["+string(item_id_va)+",7]");// is the item equipment or a commodity. Use this for filtering
            if(type=="equipment"){
                filteredInventory = scr_push_array(filteredInventory,i);
            }
        }
    }
}
rows = array_length_1d(filteredInventory);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Reset status. Set hover and selected

global.ItemLastSelect = -1;
id_last = -1;// id of item selected from inventory
lastItemData = noone; // An array to hold data from the last item selected.

pls_slot = noone;// Player equipment slot selected from
pls_item = noone;// Item id selected from player slot
                        
cws_index = noone;// index of crewmemnber last selected
cws_slot = noone;// index of crew slot selected
cws_item = noone;// item id selected from crew slot


for(var i = 3; i&gt;=0; i--){ // Four crew columns
    team_hover[i]=0;
    for(var s=2; s&gt;=0; s--){ // Three slots each
        hvr[i,s]=0;// Value can be 0,1 or 2. Corresponds to image_index
    }
}

for(var i = bunks_ttl-1; i&gt;=0; i--){
    bunk_hover[i]=0;
}

selected_crew=noone;
selected_team=noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw inventory:
// global.ItemSelected = the item we are hovering over
// global.ItemLastSelect = the item we picked up

draw_set_font(font);
draw_panel(spr_background,0,box_x,box_y,boxwidth,boxheight,32);
var font_size = font_get_size(font);

//draw_text(270,40,"Key Q: Add random Item#Key W: Clear Inventory#Key E: Save Inventory#Key R: Load Inventory#Key T: Sort Inventory#Key Y: Clear a Item from Selecting Slot#Key U: Delete Item by Stack Amount#Key I: Drop a Item#Key O: Find Item on Inventory#Key P: Run the script of item with effect#Key A: Exchange Items from #       'ItemOverMouse' to Selecting");

draw_set_halign(fa_center);

//draw_text(box_hcenter,box_y+(font_size/2)+padding,"INVENTORY " + string(page+1));
draw_set_halign(fa_left);


// MAIN INVENTORY - LEFT COLUMN
//inventory_draw(box_hcenter, box_y+font_size+(padding*2), spr_slot_lg, spr_slot_lg, slot_gap, c_white);
var _x, _y, slot_width, pre_col, spr_xoffset;
_x = box_hcenter;
_y = box_y+font_size+(margin*2);


pre_col = draw_get_color();// Hold the previous color
draw_set_color(c_white);
draw_set_font(fnt_menus_med);

/************************
- pagination: NOT USING THIS FOR NOW. This is for navigating page to page, not just one box at a time
***********************/
start_row = page * rows_per_page;
page_rows = min(rows - start_row,rows_per_page);

var slot_height;
slot_width = slot;// columns
slot_height = page_rows;// rows

/************************
end - pagination
***********************/

var guix=mouse_x;
var guiy=mouse_y;

var index = start_index;
var item_id_va = -1;
var type;// equipment or other
var sprite = spr_ItemIcon_Default
var spr_width = sprite_get_width(spritebox);
var spr_height = sprite_get_height(spritebox);
var _xb = _x-(spr_width/2);
var _yoffset,_xoffset,_texty,_textx;
var MouseOutside = true;
var i = 0;// Row
var j = 0;// For multiple columns
for(r=start_index; r &lt; (start_index+rows_per_page); r++){
    MouseOutside = true;
    global.ItemSelected = -1;// Not hovering over anything yet
    if( r &gt;= array_length_1d(filteredInventory) ) continue;
    index = filteredInventory[r];// This is the real inventory slot

    // Draw box
    // This is filtered data
    if(global.ItemLastSelect == index)
    {
       draw_sprite(spritebox,2,_x+((spr_width+slot_gap)*j),_y+((spr_height+slot_gap)*i))
    }
    else
    {
        if point_in_rectangle(guix,guiy, _xb, (_y - (spr_height/2) ) + ((spr_height+slot_gap)*i), _xb + spr_width, (_y + (spr_height/2)) + ((spr_height+slot_gap)*i)){
           global.ItemSelected = index;// Hovering over this item
           MouseOutside = false;    
        }
        
        if(index == global.ItemSelected){
            // We are hovering over this item. See global.ItemSelected
            if mouse_check_button_pressed(mb_left){
                                  
              if(cws_item != noone)
              {
                  // We have previously selected an item from crewmember inventory. PUT IT HERE
                  var previous = scr_inventory_swap(index,cws_item);
                  
                  var pcrew = global.crew[cws_index];
                  var pcrew_i = pcrew[NPC_EQUIPMENT];
                  pcrew_i[@ cws_slot] = previous;
                  
                  event_user(0);// Reset status
              }
              else if( pls_item!=noone )
              {
                  // We have previously selected an item from player inventory. PUT IT HERE
                  var previous = scr_inventory_swap(index,pls_item);
                                   
                  global.equipped[pls_slot] = previous;
                  
                  event_user(0);// Reset status
              
              }
              else if(global.ItemLastSelect == global.ItemSelected){
                // We're just reclicking on the same item. Put it down.
                audio_play_sound(snd_hit1,1,0);
                event_user(0);// Reset status
                
              }else{
              
                  event_user(0);// Reset status
                  global.ItemLastSelect = global.ItemSelected; // Pick up the item here
                  id_last = inventory_read("ID",global.ItemLastSelect);
                  lastItemData = scr_item_data(id_last);
                  audio_play_sound(snd_confirm4,1,0);
              }                                        
            
            }
            draw_sprite(spritebox,1,_x+((spr_width+slot_gap)*j),_y+((spr_height+slot_gap)*i));
        }else{
           draw_sprite(spritebox,0,_x+((spr_width+slot_gap)*j),_y+((spr_height+slot_gap)*i));
        }
    }
    
    // Draw the item
    if ds_map_find_value(global.inventory,"slot"+string(index)) == true{
    
        item_id_va = inventory_read("ID",index);
        sprite = item_id_read(item_id_va,2);

        //draw_rectangle( _xb, (_y - (spr_height/2) ) + ((spr_height+slot_gap)*i), _xb + spr_width, (_y + (spr_height/2)) + ((spr_height+slot_gap)*i), true);
          
        var item_width, item_height, item_scale;
        item_width = sprite_get_width(sprite);
        item_height = sprite_get_height(sprite);
        /*****
        item_scale=ds_map_find_value(global.item_id,"item["+string(item_id_va)+",10]");
        if(is_undefined(item_scale)){
             item_scale=1;
        }
        *****/
        item_scale= 1;
        if(MouseOutside &amp;&amp; global.ItemLastSelect != index){
             item_scale= 1;
        }else{
             item_scale= 2;
        }
        
        
        _yoffset = (spr_height+slot_gap) * i;
        _textx =  (-spr_width/2) + 4;
        _texty =  (-spr_height/2) + 6;
        
        spr_xoffset = ( ( item_width * item_scale) / 2) - (sprite_get_xoffset(sprite) * item_scale);
        draw_sprite_ext(sprite, image_index, _x - spr_xoffset, _y + _yoffset,item_scale,item_scale,0,c_white,1 );
        draw_text(_x + _textx, _y + _yoffset + _texty,string(ds_map_find_value(global.inventory,"Stack"+string(index))));
    }
    i++;
}
// Draw one more empty box to drop items into
draw_sprite(spritebox,0,_x+((spr_width+slot_gap)*j),_y+((spr_height+slot_gap)*i));
if point_in_rectangle(guix,guiy, _xb, (_y - (spr_height/2) ) + ((spr_height+slot_gap)*i), _xb + spr_width, (_y + (spr_height/2)) + ((spr_height+slot_gap)*i)){
    if mouse_check_button_pressed(mb_left){                             
       if(cws_item != noone)
       {
           // We have previously selected an item from crewmember inventory. PUT IT HERE
           var added = inventory_item_add(cws_item,1);
           if(added==0){
                var pcrew = global.crew[cws_index];
                var pcrew_i = pcrew[NPC_EQUIPMENT];
                pcrew_i[@ cws_slot] = noone;
                event_user(1);// Filter Inventory
                event_user(0);// Reset status
                
           }

       }
       else if( pls_item!=noone )
       {
           // We have previously selected an item from player inventory. PUT IT HERE
           var added = inventory_item_add(pls_item,1);
           var checkpoint=1;
           if(added==0){
               global.equipped[pls_slot] = noone; 
               event_user(1);// Filter Inventory            
               event_user(0);// Reset status
           }else{
                audio_play_sound(snd_fail,1,0);
           }                               
       }                                           
    }
}

draw_set_color(pre_col);
// END MAIN INVENTORY - LEFT COLUMN

//id_last = inventory_read("ID",inventory_last_select());


draw_set_halign(fa_left);
//draw_text(box_x+padding,box_bottom - padding - font_size,"CREDITS: " + string(global.credits));

// Draw nav buttons FOR MAIN INVENTORY
var b;
draw_set_color(c_lime);
draw_set_halign(fa_center);
draw_set_valign(fa_center);

var yscl=1;
var clr = c_white;

for(var i = 0; i&lt;array_length_1d(navbuttons); i++){
    
    b = navbuttons[i];
    if(b[BTN_SHOW]){
      
        if(b[4]){
            clr = c_lime;
        }else{
            clr = c_white;
        }
        //draw_text(b[0]+(b[2]/2),b[1]+(b[3]/2),b[5]);
        draw_sprite_ext(spr_nav_up,0, b[0], b[1]+(b[3]/2), 1, yscl, 0, clr, 1 );

    }
    yscl=-1;
}


// Player equipment
var xx = box_x + boxwidth + margin;
var yy = box_y + room_height/4;
var hh = boxheight - room_height/4;
draw_panel(spr_background,0,xx*1,yy,boxwidth,hh,32);
draw_sprite(spr_modelframe1,0,xx+(boxwidth/2),yy+24+padding);
draw_sprite(global.player_sprite,0,xx+(boxwidth/2),yy+24+padding+4);

var spr1, i_scale;
// hover box
var bw1 = sprite_get_width(spr_slot_lg);
var bh1 = sprite_get_height(spr_slot_lg);
var x1 = xx+(boxwidth/2);
var y1=yy+75;
var bx1 = x1-(bw1/2);
var by1;
var hovering=false;
for(var i=0;i&lt;3;i++){

    by1 = y1 - (bh1/2);
    draw_sprite(spr_slot_lg,hvr[0,i],xx+(boxwidth/2),y1);

    
    hovering=false;
    
    //draw_rectangle( bx1, by1, bx1+bw1, by1+bh1, true);// hit box
    if( point_in_rectangle(mouse_x, mouse_y, bx1, by1, bx1+bw1, by1+bh1) )
    {
        hovering=true;
        if(hvr[0,i]==0){
            hvr[0,i]=1;
        }
        if(mouse_check_button_pressed(mb_left))
        {
            // Validate. Only weapons (subtype 0) can go in slot 0
            if(lastItemData!=noone){
                if( i==0 ){
                    if(scr_get_array_1d(lastItemData,11) != 0){
                        audio_play_sound(snd_fail,1,0);// FAIL
                        continue;
                    }
                }
                if( i&gt;0 ){
                    if(scr_get_array_1d(lastItemData,11) == 0){
                        audio_play_sound(snd_fail,1,0);// FAIL
                        continue;
                    }
                }
            }

        
            if( global.ItemLastSelect &gt;= 0 &amp;&amp; !is_undefined(id_last) &amp;&amp; id_last!=-1 )
            {
                // We have selected an item from the inventory. Put it here.
                var previous = scr_player_set_equip(i,id_last);
                if(previous != noone){
                    scr_inventory_swap(global.ItemLastSelect,previous);                  
                }else{
                    inventory_item_clear(global.ItemLastSelect);
                }
                audio_play_sound(snd_hit1,1,0);
                event_user(0);// Reset status
                
            }
            else if(cws_item != noone)
            {
                // We have selected an item from a crewmember slot
                
                // Put the item in the player slot
                var previous = scr_player_set_equip(i,cws_item);
                
                // Take the player's old item and put it in the crewmember's slot
                var pcrew = global.crew[cws_index];
                var pcrew_i = pcrew[NPC_EQUIPMENT];
                pcrew_i[@ cws_slot] = previous;
                audio_play_sound(snd_hit1,1,0);
                event_user(0);// Reset status
            }
            else if( pls_item!=noone )
            {
                // We have selected an item from a player slot
                var previous = scr_player_set_equip(i,pls_item);
                
                // Put the old item in the other slot;                 
                global.equipped[pls_slot] = previous;
                audio_play_sound(snd_hit1,1,0);
                event_user(0);// Reset status
            
            }
            else if(global.equipped[i] != noone)
            {
                // Pick up the item in this slot
                event_user(0);//Reset status
                
                // Select an item in the players slot    
                pls_slot = i;// index of player slot selected
                pls_item = global.equipped[i];
                lastItemData = scr_item_data(pls_item);
                audio_play_sound(snd_confirm4,1,0);
                hvr[0,i]=2;                
            } 
        
        }
        
    }
    else
    {
        if(hvr[0,i]&lt;2){
            hvr[0,i]=0;
        }

    }
    spr1=scr_player_get_equip(i,2);
    if(spr1!=noone){
        //i_scale=scr_player_get_equip(i,10);
        //if(i_scale == noone){
            //i_scale=1;
        //}
        if(hovering || (pls_slot==i &amp;&amp; pls_item==global.equipped[i])){
            i_scale=2;
        }else{
            i_scale=1;
        }
        item_width = sprite_get_width(spr1);
        spr_xoffset = ( ( item_width * i_scale) / 2) - (sprite_get_xoffset(spr1) * i_scale);
        draw_sprite_ext(spr1, image_index, (xx)+(boxwidth/2) - spr_xoffset, y1, i_scale, i_scale, 0, c_white, 1 );

    }else{
    
        if(i==0){
            draw_sprite_ext(spr_icon_bullet, 0, xx+(boxwidth/2),y1,.5,.5,0, c_white, .25 );
        }else if(i==1){
            draw_sprite_ext(spr_icon_shield, 0, xx+(boxwidth/2),y1,.5,.5,0, c_white, .25 );
        }else{
            draw_sprite_ext(spr_icon_gear, 0, xx+(boxwidth/2),y1,.5,.5,0, c_white, .25 );
        }
    }
    y1+=sprite_get_height(spr_slot_lg) + slot_gap;
}

// Crew equipment
var c_index = 0;//crew index
var t_index; // team index
var i;// tracking the frame position
var tmate = noone;
var cmate, csprite;
var frame_xl, prev_tmate;
var frame_y = yy+24+padding;
var dbxx,dbyy,dbx1,dbx2,dby1,dby2; // team member delete button
for(var t_index=0;t_index&lt;3;t_index++){
    i=t_index+2;

    cmate=noone;
    tmate=noone;
    prev_tmate=noone;
    draw_panel(spr_background,0,xx*i,yy,boxwidth,hh,32);
    frame_x = (xx*i)+(boxwidth/2);

    if(point_in_rectangle(mouse_x ,mouse_y, frame_x - (bkx_width/2) , frame_y - (bkx_width/2), frame_x + (bkx_width/2), frame_y+(bkx_width/2))){
        if(mouse_check_button_pressed(mb_left)){
            if(selected_crew!=noone){
                if(global.team[t_index]!=noone){
                    prev_tmate = global.team[t_index];
                }
                global.team[t_index]=selected_crew; // Add a crew member to the team
                bunks = scr_array_remove(bunks,selected_crew);
                if(prev_tmate!=noone){
                   bunks = scr_push_array(bunks,prev_tmate); 
                }
                event_user(0);// Reset state variables
            }else{
                team_hover[t_index]=2;
            }
        }else{
            team_hover[t_index]=1;
        }     
    }else{
        if(team_hover[t_index]==1){
            team_hover[t_index]=0;
        }
    }
    
    draw_sprite(spr_modelframe1,0,frame_x,frame_y);
    //draw_rectangle( frame_x - (bkx_width/2) , frame_y - (bkx_width/2), frame_x + (bkx_width/2), frame_y+(bkx_width/2), true);// hit box
    
    
    
    if(t_index&lt;array_length_1d(global.team)){
        c_index = global.team[t_index];// c_index should now contain an index from the global.crew array
        if( c_index == noone || c_index &gt;= array_length_1d(global.crew) ) continue;
        
        cmate = global.crew[c_index];// Get the crew member data
        if(!is_array(cmate)) continue;
        
        if( cmate[NPC_SPRITE_TEMP]!=noone ){
            csprite = cmate[NPC_SPRITE_TEMP];
        }else{
            csprite = noone;
        }
        
        draw_sprite(csprite,0,(xx*i)+(boxwidth/2),yy+24+padding+4);
        
        // Delete button
        dbxx = (xx*i)+ boxwidth - (dbwidth/2) - padding;
        dbyy = yy+padding+(dbwidth/2);       
        dbx1 = dbxx - (dbwidth/2);
        dbx2 = dbx1 + dbwidth;
        dby1 = dbyy - ( dbwidth/2 );
        dby2 = dby1 + dbwidth;
        
        //draw_rectangle( dbx1, dby1, dbx2, dby2, true);// hit box
        if( point_in_rectangle(mouse_x,mouse_y, dbx1, dby1, dbx2, dby2) )
        {
            draw_sprite(spr_delete,1,dbxx, dbyy);
            if(mouse_check_button_released(mb_left))
            {
                bunks = scr_push_array(bunks,c_index);
                global.team[t_index]=noone;
                event_user(0);
                continue;// skip the rest of this loop
            }
        }else{
            draw_sprite(spr_delete,0,dbxx, dbyy);
        }
        
        y1=yy+75;
        var x1 = (xx*i)+(boxwidth/2);
        bx1 = x1-(bw1/2);
        hovering=false;
        for(var i2=0;i2&lt;3;i2++){
            by1 = y1 - (bh1/2);
            draw_sprite(spr_slot_lg,hvr[i-1,i2],x1,y1);
    
            //draw_rectangle( bx1, by1, bx1+bw1, by1+bh1, true);// hit box
            if( point_in_rectangle(mouse_x,mouse_y,bx1,by1,bx1+bw1,by1+bh1) )
            {
                hovering=true;
                if(hvr[i-1,i2]==0){
                    hvr[i-1,i2]=1;
                }

            
                if(mouse_check_button_pressed(mb_left))
                {
                    // Validate correct slot
                    if(lastItemData!=noone){
                        if( i2==0 ){
                            if(scr_get_array_1d(lastItemData,11) != 0){
                                audio_play_sound(snd_fail,1,0);// FAIL
                                continue;
                            }
                        }
                        if( i2&gt;0 ){
                            if(scr_get_array_1d(lastItemData,11) == 0){
                                audio_play_sound(snd_fail,1,0);// FAIL
                                continue;
                            }
                        }
                    }
                    
                    var equipment = cmate[NPC_EQUIPMENT];

                    if( global.ItemLastSelect &gt;= 0 &amp;&amp; !is_undefined(id_last) &amp;&amp; id_last!=-1 )
                    {
                        // We have selected an item from inventory.PUT IT HERE.
                        var previous = scr_crew_set_equip(c_index,i2,id_last);
                        if(previous != noone){
                            scr_inventory_swap(global.ItemLastSelect,previous); 
                        }else{
                            inventory_item_clear(global.ItemLastSelect);
                        }   
                        audio_play_sound(snd_hit1,1,0);      
                        event_user(0);// Reset status
                   
                    }
                    else if(cws_item != noone)
                    {
                        // We have selected an item from crewmember inventory. PUT IT HERE
                        var previous = scr_crew_set_equip(c_index,i2,cws_item)
                        
                        var pcrew = global.crew[cws_index];
                        var pcrew_i = pcrew[NPC_EQUIPMENT];
                        pcrew_i[@ cws_slot] = previous;
                        audio_play_sound(snd_hit1,1,0);
                        event_user(0);// Reset status
                    }
                    else if( pls_item!=noone )
                    {
                        // We have selected an item from a player slot. PUT IT HERE
                        var previous = scr_crew_set_equip(c_index,i2,pls_item)                  
                        global.equipped[pls_slot] = previous;
                        audio_play_sound(snd_hit1,1,0);
                        event_user(0);// Reset status
                    
                    }
                    else if(equipment[i2] != noone)
                    {
                        // Pick up the item in this slot
                        event_user(0);// Reset status
                        cws_index = c_index;// index of crewmemnber last selected
                        cws_slot = i2;// index of crew slot selected
                        cws_item = equipment[i2];
                        lastItemData = scr_item_data(cws_item);
                        hvr[i-1,i2]=2;
                        audio_play_sound(snd_confirm4,1,0);                 
                    }             
                }
            }
            else
            {
                if(hvr[i-1,i2]==1){
                    hvr[i-1,i2]=0;
                }
                       
            }
            
            spr1=scr_crew_get_equip(cmate,i2,2);
            if(spr1!=noone){
                i_scale=scr_crew_get_equip(cmate,i2,10);
                //if(i_scale == noone){
                    //i_scale=1;
                //}
                if(hovering || ( cws_index==c_index &amp;&amp; cws_slot==i2 ) ){
                    i_scale=2;
                }else{
                    i_scale=1;
                }

                item_width = sprite_get_width(spr1);
                spr_xoffset = ( ( item_width * i_scale) / 2) - (sprite_get_xoffset(spr1) * i_scale);
                draw_sprite_ext(spr1, image_index, (xx*i)+(boxwidth/2) - spr_xoffset, y1, i_scale, i_scale, 0, c_white, 1 );
            }else{
                // Draw slot type icons
                if(i2==0){
                    draw_sprite_ext(spr_icon_bullet, 0, (xx*i)+(boxwidth/2) - spr_xoffset,y1,.5,.5,0, c_white, .25 );
                }else if(i2==1){
                    draw_sprite_ext(spr_icon_shield, 0, (xx*i)+(boxwidth/2) - spr_xoffset,y1,.5,.5,0, c_white, .25 );
                }else{
                    draw_sprite_ext(spr_icon_gear, 0, (xx*i)+(boxwidth/2) - spr_xoffset,y1,.5,.5,0, c_white, .25 );
                }
            
            }
            y1+=bh1 + slot_gap;
        }
              
        
    }
    
}

// Crew in bunks
bkx_start = box_x + boxwidth + margin + (bkx_width/2) + bunk_xmod;
var bkx_spacing = bkx_width + bunk_margin;
var bky = box_y + (bkx_width/2) + bunk_ymod;
var cx;// Crew index
var bkx;
cmate=noone;
var bmate=noone;// Bunk resident
for(var i = bunks_index; i &lt; min(bunks_ttl,bunks_perpage); i++){
    cmate=noone;bmate=noone;
    
    bkx = bkx_start + (bkx_spacing * i);   
    draw_sprite(spr_modelframe1,bunk_hover[i],bkx,bky);
    //draw_rectangle( bkx - (bkx_width/2) , bky - (bkx_width/2), bkx + (bkx_width/2), bky+(bkx_width/2), true);// hit box
    

    if(i &lt; array_length_1d(bunks)){
        bmate = bunks[i];
        if( bmate!=noone &amp;&amp; bmate &lt; array_length_1d(global.crew) )
        {
            cmate = global.crew[bmate];
            if(is_array(cmate))
            {
                if(cmate[NPC_SPRITE_TEMP]!=noone &amp;&amp; sprite_exists(cmate[NPC_SPRITE_TEMP])){
                    draw_sprite(cmate[NPC_SPRITE_TEMP],0,bkx,bky+padding+4);
                }
            }
        }     
    }
    
    if(point_in_rectangle(mouse_x,mouse_y,bkx - (bkx_width/2) , bky - (bkx_width/2), bkx + (bkx_width/2), bky+(bkx_width/2))){
        
        if(mouse_check_button_pressed(mb_left))
        {
            if(is_array(cmate)){
                event_user(0);// Reset state variables
                selected_crew = bmate;
                bunk_hover[i]=2;
                audio_play_sound(snd_confirm5,1,0);
            }

        }
    }else{
        if(bunk_hover[i]==1){
            bunk_hover[i]=0;
        }        
    }
       
}

var bty = bky+bkx_width;
var crewdata, txt_y, occupation;
if (selected_crew!=noone){
    crewdata = global.crew[selected_crew];
    occupation = scr_get_array_1d(global.npc_occupations, crewdata[NPC_OCCUPATION]);
    
    draw_set_halign(fa_left);
    draw_set_valign(fa_top);
    txt_y = bty+bty_mod;
    draw_text(bkx_start + btx_mod, txt_y,
    "Name: " + crewdata[NPC_NAME] + " - " + string(occupation)
    );
    
    txt_y+=font_size/2;
    draw_text(bkx_start + btx_mod, txt_y,
    "Wage: " + string(crewdata[NPC_HIRE_PRICE])
    );
    txt_y+=font_size/2;
    draw_text(bkx_start + btx_mod, txt_y,
    "Max HP: " + string(crewdata[NPC_HP])
    );
    
} else if( lastItemData!=noone ){
    //Read the script "item_int" for more information for item_id_read

    draw_set_halign(fa_left);
    draw_set_valign(fa_top);

    // string(item_id_read(id_last,0))
    draw_text(bkx_start + btx_mod, bty+bty_mod,
    "Item: " + string(lastItemData[0])
    );
    
    // string(item_id_read(id_last,5))
    draw_text_ext(bkx_start + btx_mod, bty+bty_mod + 16,
    string(lastItemData[5]),
    font_size/2,
    room_width - boxwidth - (margin*2)
    );
    
}else{

    
    draw_set_halign(fa_left); draw_set_valign(fa_middle);
    
    draw_sprite(spr_inv_fuel,0, bkx_start + btx_mod, bty+bty_mod);
    draw_text(bkx_start + btx_mod + 20, bty+bty_mod+8,"Fuel:" + string(100));
    draw_sprite(spr_inv_food,0, bkx_start + btx_mod, bty+bty_mod+16+4);
    draw_text(bkx_start + btx_mod + 20, bty+bty_mod+16+4+8,"Food:" + string(100));
    
    draw_sprite(spr_inv_grenade,0, bkx_start + btx_mod + 80, bty+bty_mod);
    draw_text(bkx_start + btx_mod + 20 + 80, bty+bty_mod+8,"Grenades:" + string(global.hotbar[1,3]));
    draw_sprite(spr_inv_meds,0, bkx_start + btx_mod + 80, bty+bty_mod+16+4);
    draw_text(bkx_start + btx_mod + 20 + 80, bty+bty_mod+16+4+8,"Meds:" + string(global.hotbar[0,3]));
    
    draw_sprite(spr_inv_gold,0, bkx_start + btx_mod + 144+40, bty+bty_mod+16+4);
    draw_text(bkx_start + btx_mod + 20 + 144 + 40, bty+bty_mod+16+4+8,"Gold:" + string(global.credits));
    
}





</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
