<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Init
// See inventory_int() in obj_game_control
cols = global.base_inventory_cols;
rows = global.base_inventory_rows;
image_speed = .25;


/// Init menu
page=0;
global.ItemSelected=-1;
global.ItemLastSelect=-1;
slot_h = rows;
slot=1;
global.InventorySlotH=rows;
for (i=0; i&lt;(slot*slot_h); i++)
{
    if(is_undefined(ds_map_find_value(global.inventory,"slot"+string(i)))){
        ds_map_add(global.inventory,"slot"+string(i),false);
        ds_map_add(global.inventory,"ID"+string(i),-1);
        ds_map_add(global.inventory,"Stack"+string(i),-1);
    }

}   


show=true;
font = fnt_menus;
font_size = font_get_size(font);
padding = 4;
margin = 4;
boxwidth = (room_width/5) - ( margin * 2 );
boxheight = room_height - ( margin * 2 );
slot_gap = 7;
box_x = margin;//top of rectangle
box_y = margin;

box_hcenter = (boxwidth/2) + box_x;
box_vcenter  = (room_height/2);

box_center = (boxwidth/2)+margin;
box_bottom = box_y+boxheight;


last_stack = 0;
last_slot = 0;
last_id_item = 0;
   
current_stack = 0;
current_slot = 0;
current_id_item = 0;

// Crew Selected equipment variables
cws_index = noone;// index of crewmemnber last selected
cws_slot = noone;// index of crew slot selected
cws_item = noone;// inventory index of selected item.

// Player Selected equipment variables
pls_slot = noone;
pls_item = noone;

// Set array to keep track of slots that are hovered over and selected
hvr = noone;
event_user(0);

// Pagination
rows_per_page=7;
page=0;
start_row = page * rows_per_page;
start_index = 0;
page_rows = min(rows - start_row,rows_per_page);

// Navigation buttons
navbuttons = noone;
nbtn_left=scr_gui_entity_button();
nbtn_right=scr_gui_entity_button();

var bw = 64;
nbtn_left[0]=box_hcenter;// x
nbtn_left[1]=box_y+padding+2;// y
nbtn_left[2]=bw;// width
nbtn_left[3]=8;// height
nbtn_left[4]=false;// hover status
nbtn_left[5]="";// text

nbtn_right[0]=box_hcenter;// x
nbtn_right[1]=box_y+boxheight-padding-10;// y
nbtn_right[2]=bw;// width
nbtn_right[3]=8;// height
nbtn_right[4]=false;// hover status
nbtn_right[5]="";// text

navbuttons[0]=nbtn_left;
navbuttons[1]=nbtn_right;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check buttons

var lbtn = navbuttons[0];
lbtn[@ BTN_SHOW] = start_index &gt; 0;

var rbtn = navbuttons[1];
rbtn[@ BTN_SHOW] = rows - start_index &gt; rows_per_page;

var guix = mouse_x;
var guiy = mouse_y;
for(var i = 0; i&lt;array_length_1d(navbuttons); i++){
    thebutton = navbuttons[i];
    button_x = thebutton[0];
    button_y = thebutton[1];
    button_w = thebutton[2];
    button_h = thebutton[3];   
    xhover = ( guix == median( button_x - (button_w/2), guix, button_x + (button_w/2) ) );
    yhover = ( guiy == median(button_y, guiy, button_y + button_h) );
    thebutton[@ 4] = xhover &amp;&amp; yhover &amp;&amp; thebutton[BTN_SHOW];
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// See if button was clicked
for(var i=0; i&lt;array_length_1d(navbuttons); i++){
    btn=navbuttons[i];
    if(btn[BTN_HOVER]){
        if(i==0){
            //page = max(0,page-1);
            start_index = max(0,start_index-1);
            break;
        }else if(i==1){
            //page = min(page+1,ceil(rows/rows_per_page)-1);
            start_index = min(start_index+1,rows);               
            break;
        }
    }
}
    

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Reset status. Set hover and selected

global.ItemLastSelect = -1;
id_last = -1;

pls_slot = noone;
pls_item = noone;
                        
cws_index = noone;// index of crewmemnber last selected
cws_slot = noone;// index of crew slot selected
cws_item = noone;


for(var i = 3; i&gt;=0; i--){ // Four crew columns
    for(var s=2; s&gt;=0; s--){ // Three slots each
        hvr[i,s]=0;// Value can be 0,1 or 2. Corresponds to image_index
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw inventory:


draw_set_font(font);
draw_panel(spr_background,0,box_x,box_y,boxwidth,boxheight,32);
var font_size = font_get_size(font);

//draw_text(270,40,"Key Q: Add random Item#Key W: Clear Inventory#Key E: Save Inventory#Key R: Load Inventory#Key T: Sort Inventory#Key Y: Clear a Item from Selecting Slot#Key U: Delete Item by Stack Amount#Key I: Drop a Item#Key O: Find Item on Inventory#Key P: Run the script of item with effect#Key A: Exchange Items from #       'ItemOverMouse' to Selecting");

draw_set_halign(fa_center);

//draw_text(box_hcenter,box_y+(font_size/2)+padding,"INVENTORY " + string(page+1));
draw_set_halign(fa_left);


// MAIN INVENTORY - LEFT COLUMN
//inventory_draw(box_hcenter, box_y+font_size+(padding*2), spr_slot_lg, spr_slot_lg, slot_gap, c_white);
var _x, _y, slot_width, spritebox, sprite_infobox, pre_col;
_x = box_hcenter;
_y = box_y+font_size+(padding*2);
spritebox = spr_slot_lg;
sprite_infobox = spr_slot_lg;

pre_col = draw_get_color();
draw_set_color(c_white);
draw_set_font(fnt_menus_med);

/************************
- pagination
***********************/
start_row = page * rows_per_page;
page_rows = min(rows - start_row,rows_per_page);

/************************
end - pagination
***********************/

var guix=mouse_x;
var guiy=mouse_y;

var slot_height;
slot_width = slot;
slot_height = page_rows;


var j, index;
j = 0;
index = start_index;

var item_id_va;
item_id_va = -1
var sprite;
sprite = spr_ItemIcon_Default
var spr_width, spr_height;
spr_width = sprite_get_width(spritebox)
spr_height = sprite_get_height(spritebox);
var _xb = _x-(spr_width/2);
// Draw boxes
for (i=0; i&lt;slot_height; i+=1)
{
    for (j=0; j&lt;slot_width; j+=1)
    {
        if global.ItemLastSelect = index
        {
           draw_sprite(spritebox,2,_x+((spr_width+slot_gap)*j),_y+((spr_height+slot_gap)*i))
        }
        else
        {
            if index = global.ItemSelected{
               if( point_in_rectangle(guix, guiy, _xb, (_y - (spr_height/2) ) + ((spr_height+slot_gap)*i), _xb + spr_width, (_y + (spr_height/2)) + ((spr_height+slot_gap)*i)) ){
                  if mouse_check_button_pressed(mb_left){
                    

                    
                    if(cws_item != noone)
                    {
                        // We have selected an item from crewmember inventory. PUT IT HERE
                        var previous = scr_inventory_swap(index,cws_item)
                        
                        var pcrew = global.crew[cws_index];
                        var pcrew_i = pcrew[NPC_EQUIPMENT];
                        pcrew_i[@ cws_slot] = previous;
                        
                        event_user(0);// Reset status
                    }else{
                        global.ItemLastSelect = global.ItemSelected;
                    }
                    
                    

                  }
                  draw_sprite(spritebox,1,_x+((spr_width+slot_gap)*j),_y+((spr_height+slot_gap)*i))
               }else{
                  draw_sprite(spritebox,0,_x+((spr_width+slot_gap)*j),_y+((spr_height+slot_gap)*i))
               }
            }else{
               draw_sprite(spritebox,0,_x+((spr_width+slot_gap)*j),_y+((spr_height+slot_gap)*i))
            }
        }
        index += 1;
    }
}

index = start_index;
var _yoffset,_xoffset,_texty,_textx;
global.MouseOutside = true;
// Draw items
for (var i=0; i&lt;slot_height; i+=1)
{
    for (j=0; j&lt;slot_width; j+=1)
    {
        draw_rectangle( _xb, (_y - (spr_height/2) ) + ((spr_height+slot_gap)*i), _xb + spr_width, (_y + (spr_height/2)) + ((spr_height+slot_gap)*i), true);
        if point_in_rectangle(guix,guiy, _xb, (_y - (spr_height/2) ) + ((spr_height+slot_gap)*i), _xb + spr_width, (_y + (spr_height/2)) + ((spr_height+slot_gap)*i)){
           global.ItemSelected = index;// Hovering over item
           global.MouseOutside = false;        
        }

        if ds_map_find_value(global.inventory,"slot"+string(index)) = true{
           item_id_va = ds_map_find_value(global.inventory,"ID"+string(index))
           sprite = ds_map_find_value(global.item_id,"item["+string(item_id_va)+",2]");
           
           var item_width, item_height, item_scale;
           item_width = sprite_get_width(sprite);
           item_height = sprite_get_height(sprite);
           item_scale=ds_map_find_value(global.item_id,"item["+string(item_id_va)+",10]");
           if(is_undefined(item_scale)){
                item_scale=1;
           }
           
        
           _yoffset = (spr_height+slot_gap) * i;
           _textx =  (-spr_width/2) + 4;
           _texty =  (-spr_height/2) + 6;
           
           draw_sprite_ext(sprite, image_index, _x, _y + _yoffset,item_scale,item_scale,0,c_white,1 );
           draw_text(_x + _textx, _y + _yoffset + _texty,string(ds_map_find_value(global.inventory,"Stack"+string(index))));

        }
        index += 1
    };  
};

draw_set_color(pre_col);
// END MAIN INVENTORY - LEFT COLUMN



var id_last = inventory_read("ID",inventory_last_select());


//Read the script "item_int" for more information for item_id_read
/***

if( inventory_last_select() &gt;= 0 &amp;&amp; !is_undefined(id_last) &amp;&amp; id_last!=-1 ){
    
    draw_set_halign(fa_center);
    draw_set_valign(fa_center);
    draw_sprite_ext(item_id_read(id_last,2),image_index,box_hcenter,box_vcenter,4,4,0,c_white,1);
    
    draw_set_halign(fa_left);
    draw_set_valign(fa_bottom);
    draw_text(box_x+96,box_vcenter+padding,
    "Item: " + string(item_id_read(id_last,0)) +
    "Stack: " + string(inventory_read("Stack",inventory_last_select())) + " / " + string(item_id_read(id_last,1))
    );
    
    draw_text(box_x+padding,box_vcenter+96,
    "Description: " + string(item_id_read(id_last,5))
    );
    
    draw_text_ext(box_x+padding,box_vcenter+96,
    string(item_id_read(id_last,5)),
    font_size,
    boxwidth - (padding*2)
    );
    
}
***/

draw_set_halign(fa_left);
//draw_text(box_x+padding,box_bottom - padding - font_size,"CREDITS: " + string(global.credits));

// Draw nav buttons FOR MAIN INVENTORY
var b;
draw_set_color(c_lime);
draw_set_halign(fa_center);
draw_set_valign(fa_center);

var yscl=1;
var clr = c_white;

for(var i = 0; i&lt;array_length_1d(navbuttons); i++){
    
    b = navbuttons[i];
    if(b[BTN_SHOW]){
      
        if(b[4]){
            clr = c_lime;
        }else{
            clr = c_white;
        }
        //draw_text(b[0]+(b[2]/2),b[1]+(b[3]/2),b[5]);
        draw_sprite_ext(spr_nav_up,0, b[0], b[1]+(b[3]/2), 1, yscl, 0, clr, 1 );

    }
    yscl=-1;
}


// Player equipment
var xx = box_x + boxwidth + padding;
var yy = box_y + room_height/4;
var hh = boxheight - room_height/4;
draw_panel(spr_background,0,xx*1,yy,boxwidth,hh,32);
draw_sprite(spr_modelframe1,0,xx+(boxwidth/2),yy+24+padding);
draw_sprite(global.player_sprite,0,xx+(boxwidth/2),yy+24+padding+4);

var spr1, i_scale;
// hover box
var bw1 = sprite_get_width(spr_slot_lg);
var bh1 = sprite_get_height(spr_slot_lg);
var x1 = xx+(boxwidth/2);
var y1=yy+75;
var bx1 = x1-(bw1/2);
var by1;

for(var i=0;i&lt;3;i++){

    by1 = y1 - (bh1/2);
    draw_sprite(spr_slot_lg,hvr[0,i],xx+(boxwidth/2),y1);
    //draw_text(xx+(boxwidth/2),y1,string(y1) + " | " + string(y1-yy));

    spr1=scr_player_get_equip(i,2);
    if(spr1!=noone){
        i_scale=scr_player_get_equip(i,10);
        if(i_scale == noone){
            i_scale=1;
        }
        
        draw_sprite_ext(spr1, image_index, (xx)+(boxwidth/2), y1, i_scale, i_scale, 0, c_white, 1 );

    }
    
    draw_rectangle( bx1, by1, bx1+bw1, by1+bh1, true);// hit box
    if( point_in_rectangle(mouse_x, mouse_y, bx1, by1, bx1+bw1, by1+bh1) )
    {
        if(hvr[0,i]==0){
            hvr[0,i]=1;
        }
        if(mouse_check_button_pressed(mb_left))
        {

        
            if( inventory_last_select() &gt;= 0 &amp;&amp; !is_undefined(id_last) &amp;&amp; id_last!=-1 )
            {
                inventory_item_delete(inventory_last_select(), 1);

                var previous = scr_player_set_equip(i,id_last);
                if(previous != noone){
                    inventory_item_add(previous,1);
                }
                event_user(0);// Reset status
            }
            else if(cws_item != noone)
            {
                // We have selected an item from a crewmember slot
                var previous = scr_player_set_equip(i,cws_item)
                
                var pcrew = global.crew[cws_index];
                var pcrew_i = pcrew[NPC_EQUIPMENT];
                pcrew_i[@ cws_slot] = previous;
                
                event_user(0);// Reset status
            }
            else if( pls_item!=noone )
            {
                // We have selected an item from a player slot
                var previous = scr_player_set_equip(i,pls_item)                  
                global.equipped[pls_slot] = previous;
                
                event_user(0);// Reset status
            
            }
            else if(global.equipped[i] != noone)
            {
                // Pick up the item in this slot
                event_user(0);//Reset status
                
                // Select an item in the players slot    
                pls_slot = i;// index of player slot selected
                pls_item = global.equipped[i];
                
                hvr[0,i]=2;                
            } 
        
        }
        
    }
    else
    {
        if(hvr[0,i]&lt;2){
            hvr[0,i]=0;
        }

    }
    
    y1+=sprite_get_height(spr_slot_lg) + slot_gap;
}

// Crew equipment
var c_index = 0;//crew index
var cmate, csprite;
for(var i=2;i&lt;5;i++){
    
    draw_panel(spr_background,0,xx*i,yy,boxwidth,hh,32);
    if(c_index&lt;array_length_1d(global.crew)){
        cmate = global.crew[c_index];
        if(cmate[NPC_SPRITE]!=noone &amp;&amp; sprite_exists(cmate[NPC_SPRITE])){
            csprite = cmate[NPC_SPRITE];
        }else{
            csprite = noone;
        }

        draw_sprite(spr_modelframe1,0,(xx*i)+(boxwidth/2),yy+24+padding);
        draw_sprite(csprite,0,(xx*i)+(boxwidth/2),yy+24+padding+4);
        
        y1=yy+75;

        var x1 = (xx*i)+(boxwidth/2);

        bx1 = x1-(bw1/2);

        for(var i2=0;i2&lt;3;i2++){
            by1 = y1 - (bh1/2);
            draw_sprite(spr_slot_lg,hvr[i-1,i2],x1,y1);
            draw_rectangle( bx1, by1, bx1+bw1, by1+bh1, true);
            if( point_in_rectangle(mouse_x,mouse_y,bx1,by1,bx1+bw1,by1+bh1) )
            {
                
                if(hvr[i-1,i2]==0){
                    hvr[i-1,i2]=1;
                }

            
                if(mouse_check_button_pressed(mb_left))
                {

                    var equipment = cmate[NPC_EQUIPMENT];

                    if( inventory_last_select() &gt;= 0 &amp;&amp; !is_undefined(id_last) &amp;&amp; id_last!=-1 )
                    {
                        // We have selected an item from inventory.PUT IT HERE.
                        inventory_item_delete(inventory_last_select(), 1);

                        var previous = scr_crew_set_equip(c_index,i2,id_last);
                        if(previous != noone){
                            inventory_item_add(previous,1);
                        }

                        
                        event_user(0);// Reset status
                   
                    }
                    else if(cws_item != noone)
                    {
                        // We have selected an item from crewmember inventory. PUT IT HERE
                        var previous = scr_crew_set_equip(c_index,i2,cws_item)
                        
                        var pcrew = global.crew[cws_index];
                        var pcrew_i = pcrew[NPC_EQUIPMENT];
                        pcrew_i[@ cws_slot] = previous;
                        
                        event_user(0);// Reset status
                    }
                    else if( pls_item!=noone )
                    {
                        // We have selected an item from a player slot. PUT IT HERE
                        var previous = scr_crew_set_equip(c_index,i2,pls_item)                  
                        global.equipped[pls_slot] = previous;
                        
                        event_user(0);// Reset status
                    
                    }
                    else if(equipment[i2] != noone)
                    {
                        // Pick up the item in this slot
                        event_user(0);// Reset status
                        cws_index = c_index;// index of crewmemnber last selected
                        cws_slot = i2;// index of crew slot selected
                        cws_item = equipment[i2];
                        hvr[i-1,i2]=2;                 
                    }             
                }
            }
            else
            {
                if(hvr[i-1,i2]==1){
                    hvr[i-1,i2]=0;
                }
                       
            }
            
            spr1=scr_crew_get_equip(cmate,i2,2);
            if(spr1!=noone){
                i_scale=scr_crew_get_equip(cmate,i2,10);
                if(i_scale == noone){
                    i_scale=1;
                }
                draw_sprite_ext(spr1, image_index, (xx*i)+(boxwidth/2), y1, i_scale, i_scale, 0, c_white, 1 );
            }
            y1+=bh1 + slot_gap;
        }
              
        c_index++;
    }
    
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="40">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///y1++;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="38">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//y1--;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="35">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Add inventory
//scr_inv_item_add(2,5);
inventory_item_add(irandom_range(0, 50),1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
