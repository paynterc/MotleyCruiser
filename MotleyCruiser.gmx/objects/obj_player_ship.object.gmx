<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_ship</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_ship</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize
is_player=true;
faction = FACTION_PLAYER;
mode = MODE_TRAVELING;// Default mode. Treat this like state.
disposition=DISPOSITION_HELPFUL;//need this to display status bars

interact_range = 200;

board_count_max=10;
board_count=board_count_max;
board_spd=.25;

land_count_max=10;
land_count=land_count_max;
land_spd=.25;

closest_landable=noone;
closest_boardable=noone;
closest_gate=noone;
jumpSector=noone;// An array containing x,y sector coordinates
inView=true;
alarm[5]=room_speed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Cancel reentry animation
mode = MODE_TRAVELING;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="9">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Jump to sector
if(is_array(jumpSector)){  
    scr_move_to_sector(jumpSector[0],jumpSector[1]);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update target
var tst=1;
var s_count = instance_number(obj_npc_ship);
var cdist = noone;
var closest = noone;
for(var i = 0; i &lt; s_count; i++) {
    var s_ship = instance_find(obj_npc_ship,i);
    if(s_ship.disposition == DISPOSITION_HOSTILE &amp;&amp; scr_instance_in_view(s_ship)){
        var pdist = point_distance(s_ship.x,s_ship.y,x,y);
        if(cdist==noone || pdist&lt;cdist){
            closest = s_ship;
            cdist=pdist;
        }
    }
}
if(closest != noone){
    target = closest;
     var tst=1;
}

alarm[5]=room_speed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Land/Dock
/// Board ship
if(mode==MODE_LANDING){
    land_count--;
    if(land_count&lt;1){
        
        // LAND 

        global.landed_on = closest_landable.data;
        global.landed_type = closest_landable.global_type;
        global.landed_name = closest_landable.name;
        global.player_x = x;
        global.player_y = y;
        
        // recharge shields
        shields_current = ship_data[SHIP_SHIELDS];
        
        // ship_data should now be updated and persisted in the next step.
        scr_persist_game_state();
        
        // Fire landed event
        scr_event_fire(events.landAtLocation);
        
        room_persistent = false;// unpersist the space room
        //room_goto(rm_galley);
        room_goto(rm_landing_menu);
    
        exit;
        
    }else if( 
        //scr_user_input(pin.interact_hold) &amp;&amp;
        instance_exists(closest_landable) &amp;&amp; 
        distance_to_object(closest_landable)&lt;interact_range)
    {
        alarm[4]=room_speed * land_spd;
    }else{
        land_count=land_count_max;
        mode = MODE_TRAVELING;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Board ship
if(mode==MODE_BOARDING){
    board_count--;
    if(board_count&lt;1){
        
        // BOARD SHIP. What actually happens when you board a ship can vary. Each ship stores its own boarding script in the boarding_script variable.
        var scriptToCall = asset_get_index(closest_boardable.boarding_script);
        if(scriptToCall){
            script_execute(scriptToCall);
        }        
        exit;
        
    }else if( 
        //scr_user_input(pin.interact_hold) &amp;&amp;
        instance_exists(closest_boardable) &amp;&amp; 
        distance_to_object(closest_boardable)&lt;interact_range){
        alarm[3]=room_speed * board_spd;
    }else{
        board_count=board_count_max;
        mode = MODE_TRAVELING;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Regen some energy - THIS OVERWRITES THE PARENT EVENT
if(energy_current&lt;energy){
    var dif = energy-energy_current;
    if(dif &lt; energy_regen_points){
        energy_current = energy;
        global.supply_fuel -= (dif/100);
    }else{
        energy_current += energy_regen_points;
        global.supply_fuel -= (energy_regen_points/100);
    }
    if(global.supply_fuel&lt;0){
        global.supply_fuel=0;
    }
}


if(energy_current&gt;energy){
    energy_current = energy;
}
if(energy_current&lt;0){
    energy_current = 0;
}
alarm[1] = room_speed * BASE_E_REGEN_SPD;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Do nothing

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Position audio listener
if( speed &gt; 0 ){
   audio_listener_position(x, y, 500);
}



</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Center view on player
if(mode!=MODE_JUMP_REENTRY){
    view_xview[0]=x-(view_wview[0]/2);
    view_yview[0]=y-(view_hview[0]/2);
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// User input
var turn_m = 20000;
var turn_a = turn_spd/turn_m;

if(global.paused){
    if(speed != 0){
        saved_speed = speed;
        speed = 0;
    }
}else{
    
    
    if(saved_speed != noone){
        speed = saved_speed;
        saved_speed = noone;
    }
    if(mode==MODE_JUMP_REENTRY){
        //motion_add(image_angle,acc_spd_fwd);
        scr_jump_input();
    }else if(mode==MODE_JUMPING){
        scr_rotate_to_angle(self,tgt_angle,turn_spd);
    
    }else if(mode==MODE_BOARDING){
        if(scr_user_input(pin.fire) &amp;&amp; can_fire){
            shooting = true;
        }else{
            shooting = false;
        }
        if(scr_user_input(pin.thrust) &amp;&amp; can_move){
            motion_add(image_angle,acc_spd_fwd_current);
            thrusting_fwd=true;
        }else{
            thrusting_fwd=false;
        }
        
        if(can_move){
            scr_gradually_rotate_5(id,mouse_x,mouse_y,turn_spd);
        }
        
        if(scr_user_input(pin.thrust_reverse) &amp;&amp; can_move){
            motion_add(image_angle,acc_spd_rvs *-1);
            if(speed &gt; max_spd_rvs){
                speed = max_spd_rvs;//clamp
            }
        }
        
        scr_jump_input();
    }else if(mode==MODE_TRAVELING){
    
        if(scr_user_input(pin.fire) &amp;&amp; can_fire){
            shooting = true;
        }else{
            shooting = false;
        }
        
        
        if(boostable &amp;&amp; !boosting &amp;&amp; !boost_cooldown){
            if(scr_user_input(pin.boost_ship)){
                scr_ship_boost()
            }     
        }
     
        if(scr_user_input(pin.thrust) &amp;&amp; can_move){
            // You can't disallow thrust just because we are over max speed
            // Player needs to be able to thrust in the oposite direction to slow down.
            motion_add(image_angle,acc_spd_fwd_current);
            thrusting_fwd=true;

        }else{
            thrusting_fwd=false;
        }
        
        if(can_move){
            scr_gradually_rotate_5(id,mouse_x,mouse_y,turn_spd);
        }
        
        if(scr_user_input(pin.thrust_reverse) &amp;&amp; can_move){
            motion_add(image_angle,acc_spd_rvs *-1);
            if(speed &lt; max_spd_rvs){
                //CHECK SPEED
            }
        }
        
        scr_jump_input();
    
    
    
        if( scr_user_input(pin.interact) ){
        
            
                // What is closest 
                var closest = noone;// string
                var dist=interact_range;
                show_debug_message("mode: " + string(mode));
                closest_landable = scr_get_closest(obj_landable,self,dist);
                if(closest_landable!=noone){
                    closest = "landable";
                    dist = distance_to_point(closest_landable.x, closest_landable.y);
                }
        
                closest_boardable = scr_get_closest(obj_npc_ship,self,dist); 
                if(closest_boardable!=noone){
                    if(closest_boardable.disabled &amp;&amp; closest_boardable.boardable &amp;&amp; closest_boardable.faction!=FACTION_PLAYER){
                        closest = "boardable";
                        dist = distance_to_point(closest_boardable.x, closest_boardable.y);              
                    }       
                }
    
                
                
                closest_gate = scr_get_closest(obj_gate,self,dist);       
                if(closest_gate!=noone){
                    closest = "gate";
                }
                show_debug_message("distance2: " + string(dist));
                show_debug_message("closest: " + string(closest));
        
                switch (closest)
                {
                    case "landable": 
                        mode=MODE_LANDING;
                        land_count = land_count_max;
                        alarm[4]=room_speed*land_spd;
                        break;
                    case "boardable": 
                        mode=MODE_BOARDING;
                        board_count=board_count_max; 
                        alarm[3]=room_speed*board_spd;
                        break;
                    case "gate":
                        mode=MODE_JUMPING;
                        break;
                }
                   
        }
    
    }// End MODE_TRAVELLING check
    
    
    
    // Check for key combo sector jump
    if(debug_mode){
        if(keyboard_check(vk_shift) &amp;&amp; can_move){
        
            if(keyboard_check_pressed(vk_up)){
                scr_move_to_sector(global.sector_x,global.sector_y-1);
            }else if(keyboard_check_pressed(vk_down)){
                scr_move_to_sector(global.sector_x,global.sector_y+1);
            }else if(keyboard_check_pressed(vk_left)){
                scr_move_to_sector(global.sector_x-1,global.sector_y);
            }else if(keyboard_check_pressed(vk_right)){
                scr_move_to_sector(global.sector_x+1,global.sector_y);
            }else{
                // Do nothing
            }
        
        }
    }
    
    
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Screen shake and feedback
if(shake){
    scr_screen_shake();
    shake=false;
    gamepad_set_vibration(0, 1, 1);

}else{
    gamepad_set_vibration(0, 0, 0);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check for dead
if(hull_current &lt; 1){
    gamepad_set_vibration(0, 0, 0);
    // Destroy modules
    for(var m=0; m&lt;array_length_1d(modules); m++){
        var m_object = modules[m];
        instance_create(m_object.x,m_object.y,obj_impact);
        instance_deactivate_object(m_object);
    }
    instance_deactivate_object(self);
    scr_ev_player_died_in_space();
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// debug

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Land or Board text
if(mode==MODE_LANDING){
    

    var xx = display_get_gui_width() / 2;
    var yy = display_get_gui_height() / 2;
    var txt = "DOCKING IN: " + string(land_count);
    scr_draw_text(txt,xx,yy,fnt_menus_lg,c_yellow);
    
}else if(mode==MODE_BOARDING){


    var xx = display_get_gui_width() / 2;
    var yy = display_get_gui_height() / 2;
    var txt = "BOARDING IN : " + string(board_count);
    scr_draw_text(txt,xx,yy,fnt_menus_lg,c_yellow);
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
