<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_ship</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_ship</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize
faction = FACTION_PLAYER;


ship_data = scr_ship();
module_data = ship_data[SHIP_MODULES];
modules = noone;

var mag = ship_data[SHIP_SCAFFOLD_SIZE];// Assume scaffolds are of equal height and width
var m_object = noone;
// Set offsets for each module_record according to their scaffold coordinates
for(var m=0; m&lt;array_length_1d(module_data); m++){
    
    var module_record = module_data[m];
    var coords = module_record[MODULE_COORDS];
    var r = coords[0];
    var c = coords[1];
    
    var offsets = noone;
    var gunoffsets = noone;
    
    offsets = scr_scaffold_offsets(mag,r,c);   
    module_record[MODULE_OFFSETS] = offsets;
    
    var d = offsets[0]; // distance
    var a = offsets[1]; // angle

    if(module_record[MODULE_TYPE]=="gun"){
        m_object = instance_create(x + lengthdir_x(d, image_angle + a),y + lengthdir_y(d, image_angle + a),obj_ship_module_gun);
    }else{
        m_object = instance_create(x + lengthdir_x(d, image_angle + a),y + lengthdir_y(d, image_angle + a),obj_ship_module);
    }
    
    m_object.sprite_index = module_record[MODULE_SPRITE_INDEX];
    m_object.image_blend = module_record[MODULE_COLOR];
    m_object.image_xscale = module_record[MODULE_XSCALE];
    m_object.image_yscale = module_record[MODULE_YSCALE];
    m_object.faction = faction;
    m_object.module_data = module_record;
    
    modules[m]=m_object.id;
    
    m_object.parent_obj = id;
    
    module_data[m]=module_record;

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Do nothing

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Position audio listener
if( speed &gt; 0 ){
   audio_listener_position(x, y, 500);
}



</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Center view on player
view_xview[0]=x-(view_wview[0]/2);
view_yview[0]=y-(view_hview[0]/2);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// User input
if(global.paused){
    if(speed != 0){
        saved_speed = speed;
        speed = 0;
    }
    exit;
}else{
    if(saved_speed != noone){
        speed = saved_speed;
        saved_speed = noone;
    } 
}

if(scr_user_input("fire")){
    shooting = true;
}else{
    shooting = false;
}

if(scr_user_input("thrust")){
    motion_add(image_angle,acc_spd_fwd);
    if(speed &gt; max_spd_fwd){
        speed = max_spd_fwd;//clamp
    }
}

if(scr_user_input("turn_left")){
    image_angle += turn_spd;
}

if(scr_user_input("turn_right")){
    image_angle -= turn_spd;
}


if(scr_user_input("thrust_reverse")){
    motion_add(image_angle,acc_spd_rvs *-1);
    if(speed &gt; max_spd_rvs){
        speed = max_spd_rvs;//clamp
    }
}

if(scr_user_input("dock")){
    var closest_landable = scr_get_closest(obj_landable,self,1000);
    if(closest_landable != noone){
        global.landed_on = closest_landable.global_index;
        global.landed_type = closest_landable.global_type;
        
        room_goto(rm_cantina1);
    }
}


// Check for key combo sector jump
if(keyboard_check(vk_shift)){

    if(keyboard_check_pressed(vk_up)){
        scr_move_to_sector(global.current_sector_row - 1,global.current_sector_col);
    }else if(keyboard_check_pressed(vk_down)){
        scr_move_to_sector(global.current_sector_row + 1,global.current_sector_col);
    }else if(keyboard_check_pressed(vk_left)){
        scr_move_to_sector(global.current_sector_row,global.current_sector_col-1);
    }else if(keyboard_check_pressed(vk_right)){
        scr_move_to_sector(global.current_sector_row,global.current_sector_col+1);
    }else{
        // Do nothing
    }

}


// Board ship
if(scr_user_input("board_ship")){
    ce = instance_nearest(x,y,obj_npc_ship);
    if(ce != noone){
        if( distance_to_point(ce.x,ce.y) &lt; 100 &amp;&amp; ce.disabled &amp;&amp; ce.boardable ){
            global.ship_boarded = ce.ship_data;
            global.ship_boarded[SHIP_X1] = ce.x;
            global.ship_boarded[SHIP_Y1] = ce.y;
            global.ship_boarded[SHIP_ANGLE] = ce.image_angle;
            //room_goto(rm_ship_deck_rnd);
            global.paused = true;
            view_object[0]=ce;
            obj_space_level.zoom=true;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update module positions
if(modules != noone)
for(var m=0; m&lt;array_length_1d(modules); m++){
    var module = modules[m];   
    var offsets = module.module_data[MODULE_OFFSETS];
    var d = offsets[0]; // distance
    var a = offsets[1]; // angle
    
    module.x = x + lengthdir_x(d, image_angle + a);
    module.y = y + lengthdir_y(d, image_angle + a);
    module.image_angle = image_angle;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check for dead
if(hull_current &lt; 1){
    // Destroy modules
    for(var m=0; m&lt;array_length_1d(modules); m++){
        var m_object = modules[m];
        instance_create(m_object.x,m_object.y,obj_explosion);
        instance_deactivate_object(m_object);
    }
    instance_deactivate_object(self);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Do nothing
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
