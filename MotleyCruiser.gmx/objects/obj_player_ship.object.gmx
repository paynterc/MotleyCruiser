<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_ship</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_ship</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize
faction = FACTION_PLAYER;
mode = MODE_TRAVELING;// Default mode. Treat this like state.

interact_range = 200;

board_count_max=10;
board_count=board_count_max;
board_spd=.25;

land_count_max=10;
land_count=land_count_max;
land_spd=.25;

closest_landable=noone;
closest_boardable=noone;
closest_gate=noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Land/Dock
/// Board ship
if(mode==MODE_LANDING){
    land_count--;
    if(land_count&lt;1){
        
        // LAND 
        //global.landed_on = closest_landable.global_index;
        global.landed_on = closest_landable.data;
        global.landed_type = closest_landable.global_type;
        global.landed_name = closest_landable.name;
        global.player_x = x;
        global.player_y = y;
        scr_persist_game_state();
        room_goto(rm_cantina2);
    
        exit;
        
    }else if( 
        scr_user_input("interact_hold") &amp;&amp;
        instance_exists(closest_landable) &amp;&amp; 
        distance_to_object(closest_landable)&lt;interact_range)
    {
        alarm[4]=room_speed * land_spd;
    }else{
        land_count=land_count_max;
        mode = MODE_TRAVELING;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Board ship
if(mode==MODE_BOARDING){
    board_count--;
    if(board_count&lt;1){
        
        // BOARD SHIP   
        global.ship_boarded = closest_boardable.ship_data;
        global.ship_boarded[SHIP_X1] = closest_boardable.x;
        global.ship_boarded[SHIP_Y1] = closest_boardable.y;
        global.ship_boarded[SHIP_ANGLE] = closest_boardable.image_angle;
        global.paused = true;
        global.player_x = obj_player_ship.x;
        global.player_y = obj_player_ship.y;
        scr_persist_game_state();
        view_object[0]=closest_boardable;
        obj_space_level.zoom=true;
        
        exit;
    }else if( 
    scr_user_input("interact_hold") &amp;&amp;
    instance_exists(closest_boardable) &amp;&amp; 
    distance_to_object(closest_boardable)&lt;interact_range){
        alarm[3]=room_speed * board_spd;
    }else{
        board_count=board_count_max;
        mode = MODE_TRAVELING;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Do nothing

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Position audio listener
if( speed &gt; 0 ){
   audio_listener_position(x, y, 500);
}



</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Center view on player
view_xview[0]=x-(view_wview[0]/2);
view_yview[0]=y-(view_hview[0]/2);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// User input
var turn_m = 20000;
var turn_a = turn_spd/turn_m;

if(global.paused){
    if(speed != 0){
        saved_speed = speed;
        speed = 0;
    }
    exit;
}else{
    if(saved_speed != noone){
        speed = saved_speed;
        saved_speed = noone;
    } 
}

if(scr_user_input("fire") &amp;&amp; can_fire){
    shooting = true;
}else{
    shooting = false;
}

if(scr_user_input("thrust") &amp;&amp; can_move){
    motion_add(image_angle,acc_spd_fwd);
    if(speed &gt; max_spd_fwd){
        speed = max_spd_fwd;//clamp
    }
}

/***
if(scr_user_input("turn_left")){
    image_angle += turn_a * delta_time;
}

if(scr_user_input("turn_right")){
    image_angle -= turn_a * delta_time;
}
***/

var pdir = scr_user_input("point_dir");
if(pdir!=noone &amp;&amp; can_move){
    var dif = angle_difference(pdir, image_angle);
    var trn = turn_a * delta_time;
    image_angle += median(-1 * trn, dif, trn);
}

if(scr_user_input("thrust_reverse") &amp;&amp; can_move){
    motion_add(image_angle,acc_spd_rvs *-1);
    if(speed &gt; max_spd_rvs){
        speed = max_spd_rvs;//clamp
    }
}

/***
if(scr_user_input("dock")){
    closest_landable = scr_get_closest(obj_landable,self,1000);
    if(closest_landable != noone){
        global.landed_on = closest_landable.global_index;
        global.landed_type = closest_landable.global_type;
        global.landed_name = closest_landable.name;
        global.player_x = x;
        global.player_y = y;
        scr_persist_game_state();
        room_goto(rm_cantina2);
    }
}
***/

if(mode==MODE_TRAVELING){
    
    if( scr_user_input("interact_hold") ){
    
        
            // What is closest
            var closest = noone;// string
            var dist=interact_range;
            closest_landable = scr_get_closest(obj_landable,self,dist);
            if(closest_landable!=noone){
                closest = "landable";
                dist = distance_to_point(closest_landable.x, closest_landable.y);
            }
    
            closest_boardable = scr_get_closest(obj_npc_ship,self,dist);       
            if(closest_boardable!=noone){
                if(closest_boardable.disabled &amp;&amp; closest_boardable.boardable &amp;&amp; closest_boardable.faction!=FACTION_PLAYER){
                    closest = "boardable";
                    dist = distance_to_point(closest_boardable.x, closest_boardable.y);              
                }       
            }

            
            
            closest_gate = scr_get_closest(obj_gate,self,dist);       
            if(closest_gate!=noone){
                closest = "gate";
            }
    
            switch (closest)
            {
                case "landable": 
                    mode=MODE_LANDING;
                    land_count = land_count_max;
                    alarm[4]=room_speed*land_spd;
                    break;
                case "boardable": 
                    mode=MODE_BOARDING;
                    board_count=board_count_max; 
                    alarm[3]=room_speed*board_spd;
                    break;
                case "gate":
                    mode=MODE_JUMPING;
                    break;
            }
               
    }

}// End MODE_TRAVELLING check

// Check for key combo sector jump
if(debug_mode){
    if(keyboard_check(vk_shift) &amp;&amp; can_move){
    
        if(keyboard_check_pressed(vk_up)){
            scr_move_to_sector(global.sector_x,global.sector_y-1);
        }else if(keyboard_check_pressed(vk_down)){
            scr_move_to_sector(global.sector_x,global.sector_y+1);
        }else if(keyboard_check_pressed(vk_left)){
            scr_move_to_sector(global.sector_x-1,global.sector_y);
        }else if(keyboard_check_pressed(vk_right)){
            scr_move_to_sector(global.sector_x+1,global.sector_y);
        }else{
            // Do nothing
        }
    
    }
}


// Board ship
/*****
if(scr_user_input("board_ship")){
    ce = instance_nearest(x,y,obj_npc_ship);
    if(ce != noone){
        if( distance_to_point(ce.x,ce.y) &lt; 100 &amp;&amp; ce.disabled &amp;&amp; ce.boardable ){
            global.ship_boarded = ce.ship_data;
            global.ship_boarded[SHIP_X1] = ce.x;
            global.ship_boarded[SHIP_Y1] = ce.y;
            global.ship_boarded[SHIP_ANGLE] = ce.image_angle;
            global.paused = true;
            global.player_x = obj_player_ship.x;
            global.player_y = obj_player_ship.y;
            scr_persist_game_state();
            view_object[0]=ce;
            obj_space_level.zoom=true;
        }
    }
}
*****/

if(scr_user_input("invul_mode")){
    disabled=true;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Screen shake and feedback
if(shake){
    scr_screen_shake();
    shake=false;
    gamepad_set_vibration(0, 1, 1);

}else{
    gamepad_set_vibration(0, 0, 0);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check for dead
if(hull_current &lt; 1){
    gamepad_set_vibration(0, 0, 0);
    // Destroy modules
    for(var m=0; m&lt;array_length_1d(modules); m++){
        var m_object = modules[m];
        instance_create(m_object.x,m_object.y,obj_impact);
        instance_deactivate_object(m_object);
    }
    instance_deactivate_object(self);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Land or Board text
if(mode==MODE_LANDING){
    
    draw_set_color(c_yellow);
    draw_set_halign(fa_center);
    draw_text(x, y+32, "DOCKING: " + string(land_count));

}else if(mode==MODE_BOARDING){

    draw_set_color(c_yellow);
    draw_set_halign(fa_center);
    draw_text(x, y+32, "BOARDING: " + string(board_count));
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
