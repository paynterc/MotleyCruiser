<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init
show = false;
depth = -1000000;

raw_text="";
text = "";
font = fnt_menus;
font_size = font_get_size(font);
scroll = 0;
ipp=10;// items per page
alltext = noone;
xhover = false;
yhover = false;
r_selected = 0; // Use to increment selected row via gampad
b_selected = noone; // Use to increment selected button via gampad
// global.item_lib_count

padding = 10;
margin = 10;
boxwidth = display_get_gui_width() - ( margin * 2 );
boxheight = display_get_gui_height() - ( margin * 2 );
tx = (display_get_gui_width()/2) - (boxwidth/2);//top of rectangle
ty = (display_get_gui_height()/2) - (boxheight/2);
header_height = 60;
script = noone;

boxw = 40;//box frame around item sprite
boxp = 4;//item frame padding
boxm = 12;//item frame margin

maxlines=0;

// Variables for the trade grid
commodities = noone;
comm_in_hold = noone;// commodities in ship inventory
comm_in_stock = noone;// local commodities
comm_out_stock = noone;// commodies not sold here and not in hold
alength=0;
tradegrid=noone;
row1_y = noone;
b1x=noone;
b2x=noone;
b3x=noone;
b4x=noone;

b1w=50;
b2w=100;
b3w=50;
b4w=100;

buttons = noone;

loc = noone;// Current location
economy_text="";
econ_id = 0;//economy

sector_economy = noone;
sector_economy[0]=0;//agriculture
sector_economy[1]=0;//mining
sector_economy[2]=0;//industrial
sector_economy[3]=0;//tech

sector_economy_mod = .2;

e_matrix=noone;// Economy matrix. Provides the value of products based on the current economy and the economy of origin
e_matrix[CC_AGRICULTURE,CC_AGRICULTURE]=1.00;
e_matrix[CC_AGRICULTURE,CC_MINING]=1.15;
e_matrix[CC_AGRICULTURE,CC_INDUSTRIAL]=1.25;
e_matrix[CC_AGRICULTURE,CC_TECH]=1.50;

e_matrix[CC_MINING,CC_AGRICULTURE]=1.50;
e_matrix[CC_MINING,CC_MINING]=1.00;
e_matrix[CC_MINING,CC_INDUSTRIAL]=1.15;
e_matrix[CC_MINING,CC_TECH]=1.25;

e_matrix[CC_INDUSTRIAL,CC_AGRICULTURE]=1.25;
e_matrix[CC_INDUSTRIAL,CC_MINING]=1.50;
e_matrix[CC_INDUSTRIAL,CC_INDUSTRIAL]=1.00;
e_matrix[CC_INDUSTRIAL,CC_TECH]=1.15;

e_matrix[CC_TECH,CC_AGRICULTURE]=1.15;
e_matrix[CC_TECH,CC_MINING]=1.25;
e_matrix[CC_TECH,CC_INDUSTRIAL]=1.50;
e_matrix[CC_TECH,CC_TECH]=1.00;


/****
[position]itemid
[0]1
[1]2
[2]4
[3]6
****/

// Flip the array
comms_flipped=noone;
/***
for(var n=0;n&lt;array_length_1d(commodities_g);n++){
    comms_flipped[commodities_g[n]]=n;
}
***/

/****
[item_id]position
[0]null
[1]0
[2]1
[3]null
[4]2
[5]null
[6]3
****/
//event_user(0);// Create the trade grid

showYoffset = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Show/Hide
if(global.game_loaded == noone || room==rm_main_menu){
    show = false;
    exit;
}
if(instance_exists(obj_game_control)){
    if(obj_game_control.panel_pause[4]){
        // if pause menu showing close this menu
        show = false;
        exit;
    }
}

if(scr_gui_get_context()=="trade" &amp;&amp; scr_user_input("menu_close")){

    scr_gui_set_context(noone);
    show = false;
    exit;
} 

if(scr_user_input("open_trade_window")){
    // shift T in debug
    show = !show;

    if(show){
        event_user(0);// build grid and show window
    }
}



</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Option Select
if(show){   
    
if( gamepad_is_connected(global.pad) ){

    if(scr_user_input("menu_op_down")){ 
           
        //r_selected = min(r_selected+1,scroll + ipp - 1);         
        r_selected++;
        
        if(r_selected &gt; scroll + ipp - 1){
            scroll = min( scroll + ipp, (alength - min(alength, ipp) ) );
            r_selected=scroll;
        }
  
    }
    
    if(scr_user_input("menu_op_up")){
        //r_selected = max(r_selected-1,scroll); 
        r_selected--;
        
        if(r_selected&lt;0){
            scroll = 0;   
            r_selected = 0;
        }else if(r_selected&lt;scroll){
            scroll = max(scroll - ipp, 0);
            r_selected = scroll + ipp - 1;
        }
   
    }
    

    if(scr_user_input("menu_op_right")){               
        if(b_selected &lt; 0){
            b_selected = 0;
        }else{
            b_selected = min(b_selected+1,3);
        }       
    }
    
    if(scr_user_input("menu_op_left")){               
        b_selected = max(b_selected-1,-1);    
    }
    
    //Clear buttons
    for(var i = 0; i &lt; array_height_2d(buttons); i++){
        for(var b=0;b&lt;array_length_2d(buttons,i); b++){
            buttons[i,b] = false;// sell all
        }                  
    }

    
    if(r_selected&gt;=0 &amp;&amp; b_selected&gt;=0){
    
        buttons[r_selected,b_selected] = true;
        
        if( scr_user_input('menu_op_select') &amp;&amp; !obj_message_box.show ){
            
            sold_here = ds_grid_get(tradegrid,6,r_selected);
            in_hold = scr_inv_item_count(ds_grid_get(tradegrid,0,r_selected));
        
            switch (b_selected)
            {
                case 0:
                    if(sold_here){
                        scr_trade_buy( ds_grid_get(tradegrid,0,r_selected),ds_grid_get(tradegrid,5,r_selected),1 );
                    }                    
                    break;
                case 1: 
                    if(sold_here){
                        scr_trade_buy_all( ds_grid_get(tradegrid,0,r_selected),ds_grid_get(tradegrid,5,r_selected));
                    }                    
                    break;
                case 2: 
                    if(in_hold){
                        scr_trade_sell( ds_grid_get(tradegrid,0,r_selected),ds_grid_get(tradegrid,5,r_selected),1 );
                    }                    
                    break;
                case 3: 
                    if(in_hold){
                        scr_trade_sell_all( ds_grid_get(tradegrid,0,r_selected),ds_grid_get(tradegrid,5,r_selected));
                    }                    
                    break;
            }
            
        }
        
    }

}else{
    
    var guix = device_mouse_x_to_gui(0);
    var guiy = device_mouse_y_to_gui(0);

    if(row1_y!=noone){
        var rowh=boxw+(boxm*2);
        var yoffset=0;
        var yhover = false;
        var xh1,xh2,xh3,xh4;
        var sold_here = false;
        var in_hold = false;
        for(var i = scroll; i &lt; scroll + ipp &amp;&amp; i &lt; alength; i++){
            yoffset = row1_y + (rowh*(i-scroll));
            yhover = ( guiy == median(yoffset + boxm, guiy, yoffset + rowh - boxm) );
            if(yhover){
                showYoffset = yoffset;// For testing
                r_selected = i;
            }
            xh1 = (guix == median(b1x, guix, b1x + b1w));
            xh2 = (guix == median(b2x, guix, b2x + b2w));
            xh3 = (guix == median(b3x, guix, b3x + b3w));
            xh4 = (guix == median(b4x, guix, b4x + b4w));
            sold_here = ds_grid_get(tradegrid,6,i);
            in_hold = scr_cargo_item_count(ds_grid_get(tradegrid,0,i));
            
            buttons[i,0] = xh1  &amp;&amp; yhover &amp;&amp; sold_here;// buy
            buttons[i,1] = xh2  &amp;&amp; yhover &amp;&amp; sold_here;// buy all

            buttons[i,2] = xh3  &amp;&amp; yhover &amp;&amp; in_hold;// sell
            buttons[i,3] = xh4  &amp;&amp; yhover &amp;&amp; in_hold;// sell all
              
        }
    }

}
    
    
    
    
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Scroll

if (keyboard_check_pressed(vk_anykey) == true)
{
    switch (keyboard_key)
    {
        case vk_down:
        scroll = min( scroll + ipp, (alength - min(alength, ipp) ) );
        break;
        case vk_up:
        scroll = max(scroll - ipp, 0);
        break;


    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check if button clicked
if(show){
    for(var i = scroll; i &lt; scroll + ipp &amp;&amp; i &lt; alength; i++){    
        if(buttons[i,0] &amp;&amp; ds_grid_get(tradegrid,6,i)){
            // buy    
            scr_trade_buy( ds_grid_get(tradegrid,0,i),ds_grid_get(tradegrid,5,i),1 );                
        
        }else if(buttons[i,1] &amp;&amp; ds_grid_get(tradegrid,6,i)){
            // buy all
            scr_trade_buy_all( ds_grid_get(tradegrid,0,i),ds_grid_get(tradegrid,5,i));
        
        }else if(buttons[i,2]){
            // sell
            scr_trade_sell( ds_grid_get(tradegrid,0,i),ds_grid_get(tradegrid,5,i),1 );
        
        }else if(buttons[i,3]){
            // sell all
            scr_trade_sell_all( ds_grid_get(tradegrid,0,i),ds_grid_get(tradegrid,5,i));
        }
    
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Show window. Reset the list of items


scr_gui_toggle_windows("trade");//Closes other windows and sets context to "trade"
with(obj_inventory){
    event_user(1);// check inventory size
}
scroll = 0;
b_selected = noone; // Use to increment selected button via gampad
comm_in_hold = noone;
comm_in_econ = noone;
comm_in_stock = noone;
comm_out_stock = noone;
loc=noone;
economy_text=noone;
L = 1;// local economy modifier
O = 0;// local economy offset modifier
os = 0;/// offset point

if(global.landed_on!=noone &amp;&amp; global.landed_type!=noone){
    //loc=scr_location_translate(global.landed_type,global.landed_on);
    loc = global.landed_on;
    switch (loc[LOC_ECONOMY]){
        case 0:
            economy_text="Agricultural";
            break;
        case 1:
            economy_text="Mining";
            break;
        case 2:
            economy_text="Industrial";
            break;
        case 3:
            economy_text="Technological";
            break;
    }
    
    L=loc[LOC_ECON_MOD];
    econ_id=loc[LOC_ECONOMY];
    O=loc[LOC_ECON_OFFSET]; 
}


//sector_economy = scr_trade_sector_economy(true);
sector_economy = global.sector_economy; // This was populated in scr_populate_sector. It's an array containing the count of each economy type in the sector.


// Set price offset modifiers for the location

c_offsets = noone;


if(ds_exists(tradegrid, ds_type_grid)){
    ds_grid_destroy(tradegrid);
}
alength=0;
for(n=0; n&lt; global.commodity_lib_count;n++){

    if(scr_commodity_lib_read(n,5)=="default"){
        alength++;
    }
}

tradegrid = ds_grid_create(7, alength);

var item_id;
var n;
var B;//Base price
var cc; //commodity class
var E;// economy modifier
var P;//Price


var test = 1;
for(n=0; n&lt; global.commodity_lib_count;n++){

    if(scr_commodity_lib_read(n,5)=="default"){
        ds_grid_set(tradegrid,0,n,n);// item_id
        ds_grid_set(tradegrid,1,n,scr_commodity_lib_read(n,0));// name
        ds_grid_set(tradegrid,2,n,scr_commodity_lib_read(n,2));// sprite
        ds_grid_set(tradegrid,3,n,scr_commodity_lib_read(n,1));// class
        ds_grid_set(tradegrid,4,n,0);// count in hold. this gets updated in Draw GUI

        P = scr_trade_calc_price(n,O,L);
        //P = 1000;
    
        ds_grid_set(tradegrid,5,n,P);// local price
        ds_grid_set(tradegrid,6,n,true);// sold here
        //alength++;//increment the available items count
    }
}
//ds_grid_sort(tradegrid, 4, false);// sort by count in hold



// Add hover indicator for each item

for(var h=0; h&lt;alength; h++){
    buttons[h,0]=false;
    buttons[h,1]=false;
    buttons[h,2]=false;
    buttons[h,3]=false;
}
var b=0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Destroy grid
if(ds_exists(tradegrid, ds_type_grid)){
    ds_grid_destroy(tradegrid);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw the table
if(show){
    tx = (display_get_gui_width()/2) - (boxwidth/2);//top of rectangle
    ty = (display_get_gui_height()/2) - (boxheight/2);
    var cy1=-10;//curser y1
    var cy2=20;//curser y2
    
    draw_panel(spr_background,0,tx,ty,boxwidth,boxheight,32);

    var offset = 0;
    draw_set_color(c_lime);
    draw_set_halign(fa_left);
    draw_set_valign(fa_top);
    draw_set_alpha(1);
    draw_set_font(font);
    
    
    
    var _x = tx+padding;
    var _y = ty+padding+header_height+padding;
    var item = noone;
    
    draw_text(_x,_y,"CREDITS: " + string(global.credits) + "c");
    
    if(instance_exists(obj_ship_data)){
        draw_text(_x+300,_y,"CARGO CAPACITY: " + string(global.cargo_total) + "/" + string(obj_ship_data.cargo));
    }
    
    _y += boxw;
    draw_text(_x,_y,"ECONOMY: " + string(economy_text));
    
        
    _y += boxw;
    _x = tx+padding;
    draw_text(_x,_y,"ITEM");
    
    _x+=boxm+boxw+350;
    draw_text(_x,_y,"PRICE");
    
    _x+=100;
    draw_text(_x,_y,"IN HOLD");
    
    _x+=150;
    draw_text(_x,_y,"SOLD HERE");
    
    // reset to left
    _x = tx+padding;
    _y += boxw/2;
    
    draw_line(_x,_y,_x+boxwidth-(padding*2),_y);
    
    _y += boxw/2;
    row1_y = _y-boxw/2; // keep track of the y on first row
    
    var in_hold;
    for(var i = scroll; i &lt; scroll + ipp &amp;&amp; i &lt; alength; i++){
        draw_set_color(c_lime);
        
        if(i==r_selected){
            draw_line(_x,_y-boxw/2,_x+boxwidth-(padding*2),_y-boxw/2);
        }
        
        draw_panel(spr_background,0,_x,_y-(boxw/4),boxw,boxw,16);
        var sprt = ds_grid_get(tradegrid,2,i);
        var stp = 11;
        draw_sprite_ext(ds_grid_get(tradegrid,2,i),0,_x+boxp,_y-(boxw/4)+boxp,2,2,0,c_white,1);
        
        _x+=boxm+boxw;
        draw_text(_x,_y,string(ds_grid_get(tradegrid,1,i)));// name
        
        _x+=350;
        draw_text(_x,_y,string(string(ds_grid_get(tradegrid,5,i))+"c"));// price
        
        _x+=100;
        in_hold = scr_cargo_item_count(ds_grid_get(tradegrid,0,i));
        draw_text(_x,_y,string( in_hold ) );// in hold
       
        _x+=150;   
        if(ds_grid_get(tradegrid,6,i)){  // if sold here
            draw_text(_x,_y,"YES");     
        }else{
            draw_text(_x,_y,"NO");
        }
         
        _x+=150;b1x=_x;
        if(i==r_selected &amp;&amp; b_selected==0){
            draw_line(_x-10,_y+cy1,_x-10,_y+cy2);
            draw_line(_x+45,_y+cy1,_x+45,_y+cy2);
        }
        if(ds_grid_get(tradegrid,6,i)){  // if sold here
        
            if( buttons[i,0] ){
                draw_set_color(c_white);
            }
            draw_text(_x,_y,"BUY");
            draw_set_color(c_lime);
        
        }

        
        _x+=75;b2x=_x;
        if(i==r_selected &amp;&amp; b_selected==1){
            draw_line(_x-10,_y+cy1,_x-10,_y+cy2);
            draw_line(_x+90,_y+cy1,_x+90,_y+cy2);
        }
        if(ds_grid_get(tradegrid,6,i)){  // if sold here
            if( buttons[i,1] ){
                draw_set_color(c_white);
            }
            draw_text(_x,_y,"BUY ALL");
            draw_set_color(c_lime);
        }
        
        _x+=150;b3x=_x;
        if(i==r_selected &amp;&amp; b_selected==2){
            draw_line(_x-10,_y+cy1,_x-10,_y+cy2);
            draw_line(_x+55,_y+cy1,_x+55,_y+cy2);
        }
        if(in_hold&gt;0){
            if( buttons[i,2] ){
                draw_set_color(c_white);
            }
            draw_text(_x,_y,"SELL");
            draw_set_color(c_lime);
        }

        
        _x+=75;b4x=_x;
        if(i==r_selected &amp;&amp; b_selected==3){
            draw_line(_x-10,_y+cy1,_x-10,_y+cy2);
            draw_line(_x+105,_y+cy1,_x+105,_y+cy2);
        }
        if(in_hold&gt;0){
            if( buttons[i,3] ){
                draw_set_color(c_white);
            }
            draw_text(_x,_y,"SELL ALL");
            draw_set_color(c_lime);
        }
        
      
        // reset to left
        _x = tx+padding;
        _y += boxw;
        
        if(i==r_selected){
            draw_line(_x,_y,_x+boxwidth-(padding*2),_y);
        }
        
        // reset to left
        _x = tx+padding;
        _y += boxm*2;

    }
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
