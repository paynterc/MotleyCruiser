<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_room_level</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init Some variables
global.paused=false;
bg_speed = 2;
background_vspeed[0] = bg_speed;
drone_spawn_time = 30;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create the random level
texture_set_interpolation(false);


// Resize
room_width=(CELL_WIDTH/16)*720;
room_height = (CELL_HEIGHT/16)*720;

// Set the global.grid width and height
var width = room_width div CELL_WIDTH;
var height = room_height div CELL_HEIGHT;
sizeModifier = .50;//.10 .25 .50, .75, 1, 1.25 ... do not exceed 2. This is for the overall size of the global.grid. Larger ships.
if(global.ship_boarded != noone){
    if(global.ship_boarded[SHIP_SCAFFOLD_SIZE]&lt;=3){   
        sizeModifier = .15;
    }

}
// Create the DS global.grid
global.grid = ds_grid_create(width, height);

// Create the pathfinding global.grid
global.grid_path = mp_grid_create(0,0,width,height,CELL_WIDTH,CELL_HEIGHT);

// Fill the global.grid with voids
ds_grid_set_region(global.grid, 0, 0, width-1, height-1, VOID);

// Load a room
// BE SURE TO CALL randomize() before this.

//if (show_question("Would you like to load a room")){
 
// var key = get_string("What is the name of the room?", "default");
// ini_open("Save.ini");
// var seed = ini_read_real("Rooms", key, 0);
// random_set_seed(seed);

//}else{
// Randomize the world
//    randomize();
//}
if(global.room_seed!=noone){
    random_set_seed(global.room_seed);
}


// Create the controller in the center of the global.grid
var cx = width div 2;
var cy = height div 2;

var cx2 = cx;
var cy2 = cy;

var px1 = cx;
var py1 = cy;



// Give the controller a random direction
var cdir = irandom(3);

// The odds variable for changing direction
var odds = 1;

// An array to keep track of floor locations.
var floors = noone;
 
var i = 0;
// Create the level using 1000 steps
repeat (1000 * sizeModifier){
    // Place a floor tile a the controller position
    global.grid[# cx,cy]=FLOOR;
    //ds_grid_set(global.grid, cx, cy, FLOOR); (alternative)

    
    // Mirror the above
    global.grid[# cx2,cy]=FLOOR;
    
    
    var fc=noone;
    fc[0]=cx;
    fc[1]=cx2;    
    fc[2]=cy;
    floors[i]=fc;
    
    // Randomize the direction of the controller
    if(irandom(odds) == odds){
        cdir = irandom(3);
    }
    
    // Move the controller
    var xdir = lengthdir_x(1, cdir*90);
    var ydir = lengthdir_y(1, cdir*90);
    cx += xdir;
    cx2 -= xdir;
    cy += ydir;
    
    // Clamp cx and cy so you don't go outside of the global.grid
    cx = clamp(cx, 1, width-2);
    cx2 = clamp(cx2, 1, width-2);
    cy = clamp(cy, 1, height-2);
}


/**************************
DOOR TO NEXT DECK OR CONTROL ROOM
***************************/
// Make a hallway and alcove
global.grid[# px1,py1-1]=FLOOR;
global.grid[# px1,py1-2]=FLOOR;
global.grid[# px1,py1-3]=FLOOR;
scr_stamp_rectangle(px1-1,py1-6,3,3);

//Make a  door
door = instance_create(room_width/2,((py1 - 4) * CELL_HEIGHT) - (CELL_HEIGHT/2),obj_door);

//Mke a light over the door
var my_light1 = glr_light_create(spr_glr_light_mask_point, 0, room_width/2, ((py1 - 4) * CELL_HEIGHT) - (CELL_HEIGHT/2), c_white, 0);
glr_light_set_static(my_light1, true);

// This part will depend on the number of decks.
// Sequence will be: deck, deck, deck, control
// See the Alarm 0 event in this object and the obj_door object for more detail on level progression.
door.room_to = room_get_name(room);
door.open = 0;
door.image_speed = 0;



// Draw the level
scr_add_wall_tiles(height,width);

px_start = px1 * CELL_WIDTH + (CELL_WIDTH/2);
py_start = py1 * CELL_HEIGHT + (CELL_HEIGHT/2);

//Create the player
instance_create(px_start, py_start, obj_player);

//Create crew
scr_instantiate_all_crew(px_start,py_start);

// Place a core
instance_create(px_start,py_start,obj_core);

// Place enemies
var mesh_id = noone;
if(shadows_on){
    mesh_id = glr_mesh_create(0, 0, false);
}

for(var yy = 0; yy &lt; height; yy++){
    for(var xx = 0; xx &lt; width; xx++){
        var ex = xx * CELL_WIDTH + CELL_WIDTH/2;
        var ey = yy * CELL_HEIGHT + CELL_HEIGHT/2;
        if(global.grid[# xx, yy] == FLOOR){
        
            // Maybe put an enemy here
            var odds = 30;
            
            if(point_distance(ex,ey,obj_player.x,obj_player.y) &gt; 80 &amp;&amp; irandom(odds) == odds){
  
                var race_index = irandom(array_height_2d(global.races)-1);               
                //scr_instantiate_enemy(ex,ey,race_index);
                scr_instantiate_enemy(ex,ey,irandom(1));
                
            }
            
            // Drone?
            odds = 100;          
            if(point_distance(ex,ey,obj_player.x,obj_player.y) &gt; 80 &amp;&amp; irandom(odds) == odds){
            
                instance_create(ex,ey,obj_drone);
              
            }
            

             
             var lOdds = 3;
             if(irandom(lOdds) == lOdds){
                var cred = instance_create(ex,ey,obj_da_loot);
                with(cred){
                    depth = -y;
                    credits=10;
                }         
             }else{
                // Maybe place some cover
                 var cOdds = 60;
                 if(irandom(cOdds) == cOdds){
                    var cover = instance_create(ex,ey,obj_crate);
                    with(cover){
                        depth = -y;
                    }         
                 }
             }

            // Place light
            llods = 10;
            if(irandom(llods)==llods){
                var clr = choose(c_red,c_green,c_blue,c_yellow,c_orange,c_white,c_lime);
                var my_light = glr_light_create(spr_glr_light_mask_point, 0, ex, ey, clr, random(.05));
                glr_light_set_static(my_light, true);
            }
        
        
        }else if(global.grid[# xx, yy] == WALL &amp;&amp; mesh_id != noone){
            // Add a mesh.
            
            glr_mesh_submesh_add_box(mesh_id,CELL_WIDTH,CELL_HEIGHT,xx * CELL_WIDTH,yy * CELL_HEIGHT);
            glr_mesh_update(mesh_id);
        }
    }
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Start timers

// Start checking for victory condition.
alarm[2]=room_speed;

// Spawn drones
alarm[3] = room_speed * drone_spawn_time;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Spawn drones on timer

if(instance_number(obj_drone) &lt; 20){
    var width = room_width div CELL_WIDTH;
    var height = room_height div CELL_HEIGHT;
    var odds = 20;
    for(var yy = 0; yy &lt; height; yy++){
        for(var xx = 0; xx &lt; width; xx++){
            var ex = xx * CELL_WIDTH + CELL_WIDTH/2;
            var ey = yy * CELL_HEIGHT + CELL_HEIGHT/2;
            if(global.grid[# xx, yy] == FLOOR){
                if(instance_exists(obj_player)){
                    if(point_distance(ex,ey,obj_player.x,obj_player.y) &gt; 80 &amp;&amp; irandom(odds) == odds){                  
                        instance_create(ex,ey,obj_drone);                      
                    }
                }
            } 
        }
    }
}


alarm[3] = room_speed * drone_spawn_time;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check to see if all enemies were eliminated on this deck
/// See if all enemies defeated on this deck
if(instance_number(obj_enemy)&lt;1){
   // if done, activate door to next deck.
   global.decks_remaining -=1;
   if(door != noone &amp;&amp; instance_exists(door)){
        if(global.decks_remaining &lt; 1){
            door.room_to = "rm_ship_control";
        }
        door.open=1;
        door.image_index = 1;
        level_complete = true;
   }   
}else{
    alarm[2]=room_speed;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(global.bullet_time){
    background_vspeed[0] = bg_speed * global.speed_mod;
}else{
    background_vspeed[0] = bg_speed * global.speed_mod;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="75">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Deck Clear message
if(level_complete){
    var xx = display_get_gui_width() / 2; var yy = display_get_gui_height() / 2;
    draw_set_color(c_lime);
    draw_set_halign(fa_center);
    draw_text(xx, yy, "DECK CLEAR");
    draw_text(xx, yy+16, "Find the door to the next deck.");
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
