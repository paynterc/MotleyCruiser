<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set Planet and Room

var plant1;
var plant2;
var plant3;
var bug;
var bug2;
seed = noone;

if(!global.planet_seed){

    // Initialize room map
    randomize();
    global.planet_seed = random_get_seed();
    show_debug_message("planet_seed set: " + string(global.planet_seed));
    global.planet_room_index_x = 0;
    global.planet_room_index_y = 0;
        
    global.planet_map = noone;
    global.planet_map[0,0] = noone;
    

    var test = 5;
    
}else{
    
    show_debug_message("planet_seed: " + string(global.planet_seed));
    random_set_seed(global.planet_seed);
}



// Randomize at planet level - These are the ones that come out as default sometimes
plant1 = scr_make_plant();
plant2 = scr_make_plant();
plant3 = scr_make_plant();
bug = scr_make_bug();
bug2 = scr_make_bug();
critter1 = scr_make_critter();
critter2 = scr_make_critter();

background_colour=  make_color_hsv(random(255), 50, random_range(50,255));
background_showcolour = true;


// Randomize at room level - This part seems to work. The room layouts are unique.
var rix = global.planet_room_index_x;
var riy = global.planet_room_index_y;
seed = global.planet_map[rix,riy];
test = 1;
if( !seed ){

    randomize();
    seed =  random_get_seed();
    global.planet_map[rix,riy] = seed;
    var test = 4;

}else{
    random_set_seed(seed);
    var test = 3;
}


var ip, rx, ry;
var theplant = choose(plant1,plant2,plant3);
for(var i=0; i&lt;irandom_range(7,10); i++){
    rx = irandom_range(room_width/4,room_width-(room_width/4));
    ry = irandom_range(room_height/4,room_height-(room_width/4));
    ip = instance_create(rx,ry,obj_plant);
    ip.p = theplant;
    ip.depth = -ry;
}
theplant = choose(plant1,plant2,plant3);
for(var i=0; i&lt;irandom(5); i++){
    rx = irandom_range(room_width/4,room_width-(room_width/4));
    ry = irandom_range(room_height/4,room_height-(room_width/4));
    ip = instance_create(rx,ry,obj_plant);
    ip.p = theplant;
    ip.depth = -ry;
}
theplant = choose(plant1,plant2,plant3);
for(var i=0; i&lt;irandom(3); i++){
    rx = irandom_range(room_width/4,room_width-(room_width/4));
    ry = irandom_range(room_height/4,room_height-(room_width/4));
    ip = instance_create(rx,ry,obj_plant);
    ip.p = theplant;
    ip.depth = -ry;
}

var thebug = choose(bug,bug2);
for(var i=0; i&lt;irandom(5); i++){
    rx = irandom_range(room_width/4,room_width-(room_width/4));
    ry = irandom_range(room_height/4,room_height-(room_width/4));
    ip = instance_create(rx,ry,obj_bug);
    ip.p = thebug;
    ip.depth = -ry;
}

if(irandom(5)==5){

    for(var i=0; i&lt;irandom(5); i++){
        rx = irandom_range(room_width/2,room_width-(room_width/2));
        ry = irandom_range(room_height/2,room_height-(room_width/2));
        ip = instance_create(rx,ry,obj_critter);
        ip.p = critter1;   
    }

}

if(irandom(10)==10){

    for(var i=0; i&lt;irandom(5); i++){
        rx = irandom_range(room_width/2,room_width-(room_width/2));
        ry = irandom_range(room_height/2,room_height-(room_width/2));
        ip = instance_create(rx,ry,obj_critter);
        ip.p = critter2;   
    }
}

var px, py;
switch(global.planet_nextdoor){

    case 1:
        px = room_width/2;
        py = 32;
        break;
        
    case 2:
        px = room_width - 32;
        py = room_height/2;
        break;
        
    case 3:
        px = room_width/2;
        py = room_height - 64;
        break;
        
    case 4:
        px = 32;
        py = room_height/2;
        break;
    default:
        px = room_width/2;
        py = room_height/2;
}


instance_create(px,py,obj_player);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Player goes off screen / through door

if(instance_exists(obj_player)){

    var px = obj_player.x;
    var py = obj_player.y;
    
    if(px&gt;room_width)
    {
        scr_go_through_door(2);// exit right
    }
    else if(px&lt;0)
    {
        if(global.planet_room_index_x&gt;0){
            scr_go_through_door(4);// exit left
        }else{
            obj_player.x = 1;

        }

    }
    else if(py&lt;0)
    {
        if(global.planet_room_index_y&gt;0){
            scr_go_through_door(1);// exit top
        }else{
            obj_player.y = 1;
        }
    }
    else if(py&gt;room_height)
    {
        scr_go_through_door(3);// exit bottom
    }
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="16">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.planet_seed = noone;
global.planet_map = noone;// 2d array
global.planet_room_index_x = noone;
global.planet_room_index_y = noone;
global.planet_nextdoor = noone;
room_restart();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
