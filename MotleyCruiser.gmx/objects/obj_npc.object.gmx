<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_mortal</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Defaults
is_trader = false;
is_shipwright = false;
is_sentient = true;
crew_index = noone;// Set this if npc is in crew
sprite_default = spr_default;
sprite_index = sprite_default;

// Filled with npc_data
hp=10;
hp_current=hp;
pspeed=2;
pspeed_init = pspeed;
global_index = noone;
name = "Santos L. Halper";
race_index = 0;
hire_price = 25;
skincolor = c_white;
accessories = noone;
r_speed=.5;// Reaction speed. TODO: Add r_speed to NPC data. This will be the rate at which the npc updates targets and status.
faction=FACTION_NEUTRAL;// Update this manually at creation. TODO: Add faction to NPC data.

accessories = noone;// This will be set through scripting. Probaly data in npc_data 


// Location of health bar
health_y = sprite_get_height(sprite_index) + 5;
hyset = false;

// Equipment?
// Equip weapon in the step event, after npc_data is assigned.
weapon_index = noone;
weapon=noone;


// MODE: idle, hunt, defend, hold, follow
mode = "idle";
disposition = DISPOSITION_NEUTRAL;// hostile, neutral, helpful

// Mechanics
depth = -y;
path = path_add();
targetK = noone;// Target to shoot
targetM = noone;// Target to move to
targetKtype = obj_npc;// Look for this object to shoot
targetMtype = noone;// Look for this object to move to
pxK = noone;// Pathing x
pyK = noone;// Pathing y
pxM = noone;// Pathing x
pyM = noone;// Pathing y
bullet_width=1; // Use this to add to range. Useful for melee weapons with short range but big bullets.
ispeed = 0.5;// Animation speed
dDistance = 50;// Stop at this distance from the object I'm defending.
targetKinView =false;// Can I see my target on screen
custom_sprite=noone;// Set this so we can delete the sprite if needed
showHealth = false;// Show healthbar

// GO!!!
alarm[0] = room_speed * r_speed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Cleanup
if(weapon != noone){
    weapon.shooting = false;
    weapon.destroy = true;
}
if(path_exists(path)) {
    path_delete(path);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Move, Target, Shoot

// For enemies
// "defend" continues all the way to core unless encounters player
// "hold" holds position then falls back to core when target gets near
// "hunt" finds closest player team member and moves to it

// For player team
// "defend "will find path to player while shooting at enemies
// "hold" holds position.
// "hunt" will find closest enemy and find a path to it while shooting

// Also: idle, patrol, retreat
targetKinView = false;

if(!global.paused){
    
    // Select kill target
    if(instance_exists(targetKtype)){
    
        if(targetK==noone || !instance_exists(targetK) || point_distance(x,y,targetK.x,targetK.y) &gt; 200){
            targetK = scr_get_closest_notfaction(targetKtype,self);
        }
        
        if( targetK!=noone &amp;&amp; instance_exists(targetK) ){
            pxK = (targetK.x div CELL_WIDTH)* CELL_WIDTH + CELL_WIDTH/2;
            pyK = (targetK.y div CELL_HEIGHT)* CELL_HEIGHT + CELL_HEIGHT/2;
        }

        

    }else{
        targetK = noone;
        weapon.shooting = false;
        weapon.image_angle = direction;
    }
    
    // Select move to target
    if(instance_exists(targetMtype)){
    
        if(targetM==noone || !instance_exists(targetM)){
            targetM = instance_nearest(x,y,targetMtype);
        }
        
        if( targetM!=noone &amp;&amp; instance_exists(targetM) ){
            pxM = (targetM.x div CELL_WIDTH)* CELL_WIDTH + CELL_WIDTH/2;
            pyM = (targetM.y div CELL_HEIGHT)* CELL_HEIGHT + CELL_HEIGHT/2;
        }

        
    }

    // Target in view?
    if(instance_exists(targetK)){
        if(faction==FACTION_PLAYER){
            targetKinView =  scr_instance_in_view(targetK);   
        }else{
            targetKinView =  scr_instance_in_view(self);
        }
    }

    
    
    if(mode=="defend"){
    
        showHealth=true;
        // Get path to target. TODO: Set targetM through internal or external logic.
        if(instance_exists(targetM)){
            image_speed = ispeed;// Animate        
            scr_get_path_to_point(pxM,pyM,pspeed);             
            if(point_distance(x,y,pxM,pyM) &lt; dDistance){
                path_end();
                image_speed = 0;
                image_index = 0;
            }
        }
        if(instance_exists(targetK)){
            path_end();
            image_speed = 0;
            image_index = 0;
            
            if(targetKinView &amp;&amp; weapon!=noone &amp;&amp; !scr_gridcol_line(weapon.x,weapon.y,targetK.x,targetK.y)){
                // Start shooting
                weapon.image_angle =  point_direction(x, y, pxK, pyK);
                weapon.shooting = true;

            }else{
                if(weapon != noone){
                    weapon.shooting = false;
                    weapon.image_angle = direction;
                }
            }                
        }            
    
    }else if(mode=="follow"){
    
        showHealth=false;
        // Get path to target. TODO: Set targetM through internal or external logic.
        var test = 1;
        if(instance_exists(targetM)){
            image_speed = ispeed;// Animate        
            scr_get_path_to_point(pxM,pyM,pspeed);
            var test = 1;             
            if(point_distance(x,y,pxM,pyM) &lt; dDistance){
                path_end();
                image_speed = 0;
                image_index = 0;
            }
        }
    
    }else if(mode=="hold"){
    
        showHealth=true;
        path_end();
        image_speed = 0;
        image_index = 0;
        if(instance_exists(targetK)){

            
            if(targetKinView &amp;&amp; weapon!=noone &amp;&amp; !scr_gridcol_line(weapon.x,weapon.y,targetK.x,targetK.y)){
                // Start shooting
                if(weapon != noone){
                    weapon.image_angle =  point_direction(x, y, px, py);
                    weapon.shooting = true;
                }

            }else{
                if(weapon != noone){
                    weapon.shooting = false;
                    weapon.image_angle = direction;
                }
            }                
        }
        
    }else if(mode=="hunt"){
    
        showHealth=true;
        scr_get_path_to_point(pxK,pyK,pspeed);
 
        if(targetKinView &amp;&amp; weapon!=noone &amp;&amp; !scr_gridcol_line(weapon.x,weapon.y,targetK.x,targetK.y)){
            path_end();

            // Start shooting
            if(weapon != noone){
                weapon.image_angle =  point_direction(x, y, pxK, pyK);
                weapon.shooting = true;
            }

        
        }else{
            if(weapon != noone){
                weapon.shooting = false;
                weapon.image_angle = direction;
            }
        }
        
    }else if(mode=="patrol"){
        showHealth=true;
        // TODO: Patrol AI
    }else if(mode=="idle"){
        
        showHealth=false;
        path_end();
        image_speed = 0;
        image_index = 0;

    }else if(mode=="retreat"){
        showHealth=true;
        if(instance_exists(targetM)){
            image_speed = ispeed;// Animate     
            scr_get_path_to_point(pxM,pyM,pspeed);
        }
    }else if(mode=="discourse"){
        showHealth=false;
        path_end();
        image_speed = 0;
        image_index = 0;
    }else{
        mode="idle";
    }
    

}

alarm[0] = room_speed * r_speed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check HP
if(hp_current&lt;1){

    corpse = instance_create(x,y,obj_corpse);
    corpse.sprite = sprite_index;
   
    if(crew_index!=noone){
        //update data so we know this npc is dead 
        scr_global_update(global.crew,crew_index,NPC_ACTIVE,false);  
    }
    
    //Set to dead in global index.
    //scr_global_update(global.npcs,global_index,NPC_ACTIVE,false);
    
    if(crew_index==noone){
        // NPCs will drop loot
        scr_drop_loot(1,3,'npc');
    }

    
    instance_destroy();
    
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Depth and Facing
depth = -y;
if(direction &gt;=180){
    image_xscale = -1;
}else{
    image_xscale = 1;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Weapon position

if(weapon != noone){
    weapon.x = x;
    weapon.y = y;
    weapon.depth=depth -1;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update health bar position
if(sprite_index != sprite_default &amp;&amp; !hyset){
    health_y = sprite_get_height(sprite_index) - 5;
    hyset = true;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Pause
if(global.paused){
    path_end();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_mortal">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Move away from other
if(x == other.x &amp;&amp; y == other.y){
    scr_move(sign(other.id - id),0);
}

var dir = point_direction(other.x, other.y, x, y);
var hspd = lengthdir_x(.5,dir);
var vspd = lengthdir_y(.5,dir);
scr_move(hspd, vspd);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Equip weapon
if(weapon==noone &amp;&amp; npc_data!=noone){
    
    var equipment=noone;
    var weapon_id=noone;
    var weapon_index=noone;
    if(array_length_1d(npc_data)&gt;=NPC_EQUIPMENT){
        equipment = npc_data[NPC_EQUIPMENT];
        if(is_array(equipment)){
            weapon_id = equipment[EQUIP_WEAPON1];
            if(weapon_id!=noone){
                weapon_index = scr_inv_item_read(weapon_id,6);// Slot 6 holds the object name
            }
        }
    }
    
    if(weapon_index!=noone &amp;&amp; object_exists(weapon_index)){
        weapon = instance_create(x,y,weapon_index);         
    }else{
        weapon = instance_create(x,y,obj_gun);
    }
      
    weapon.type = faction;// The weapon will pass this along to the bullet.
}

if(weapon != noone){
    weapon.x = x;
    weapon.y = y;
    weapon.depth=depth -1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Cleanup
if(path_exists(path)) {
    path_delete(path);
}
if(custom_sprite!=noone &amp;&amp; crew_index==noone){
    sprite_delete(custom_sprite);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw self and healthbar
draw_self();
if(showHealth){
    draw_healthbar(x-10,y-health_y,x+10,y-health_y, (hp_current/hp) * 100,c_black,c_red,c_green,0,false,false);
}
if(mode=="discourse"){
    if(is_trader){
        draw_sprite(spr_trade_icon,0,x, y - sprite_height - sprite_get_height(spr_trade_icon)/2);
    }else if(is_shipwright){
        draw_sprite(spr_shipwright_icon,0,x, y - sprite_height - sprite_get_height(spr_shipwright_icon)/2);
    }
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="97">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// TODO: SET TEAM MODE
// Maybe do this in the player object instead.
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
