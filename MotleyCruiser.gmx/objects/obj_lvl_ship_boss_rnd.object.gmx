<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_room_level</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init Some variables
if(instance_exists(obj_gui_control)){
    obj_gui_control._state = guistates.onship;
}
global.paused=false;
bg_speed = 2;
background_vspeed[0] = bg_speed;
drone_spawn_time = 30;
global.deck_current ++;// Increment the deck at start
wave_speed = 25;// New wave every X seconds
wave_timer = 0;
enemy_check_started = false;// Only want to start this timer once
entry_object=noone;// incursion pod, ladder or elevator
entry_frame=0;// frame of entry_object to activate player on
guiText = instance_create(x,y,obj_gui_text);// uset this so it will be hidden if other menus open
with(guiText){
    event_user(1);// Hide
}
boss = noone;
_state = 0;// 0=playing,1=boss_dead

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create the boss level for a boarded ship
// Simililar to lower levels, but with a larger layout and different alarms
texture_set_interpolation(false);


// Resize
room_width=(CELL_WIDTH/16)*720;
room_height = (CELL_HEIGHT/16)*720;

view_xview[0]= (room_width/2) - (view_wview[0]/2);
view_yview[0]= (room_height/2) - (view_hview[0]/2);

// Set the global.grid width and height
var width = room_width div CELL_WIDTH;
var height = room_height div CELL_HEIGHT;
sizeModifier = .50;//.10 .25 .50, .75, 1, 1.25 ... do not exceed 2. This is for the overall size of the global.grid. Larger ships.
if(global.ship_boarded != noone){
    if(global.ship_boarded[SHIP_SCAFFOLD_SIZE]&lt;=3){   
        sizeModifier = .15;
    }
}
// Create the DS global.grid. Basic floor/wall/void grid
global.grid = ds_grid_create(width, height);

// Create the pathfinding global.grid. We may add and remove destrucibles to this.
global.grid_path = mp_grid_create(0,0,width,height,CELL_WIDTH,CELL_HEIGHT);

// Fill the global.grid with voids
ds_grid_set_region(global.grid, 0, 0, width-1, height-1, VOID);

// Load a room
// BE SURE TO CALL randomize() before this.

//if (show_question("Would you like to load a room")){
 
// var key = get_string("What is the name of the room?", "default");
// ini_open("Save.ini");
// var seed = ini_read_real("Rooms", key, 0);
// random_set_seed(seed);

//}else{
// Randomize the world
//    randomize();
//}
if(global.room_seed!=noone){
    random_set_seed(global.room_seed);
}else{
    randomize();
}
// Waves
waves = irandom(2)+1;

// Create the controller in the center of the global.grid
var cx = width div 2;
var cy = height div 2;

var cx2 = cx;
var cy2 = cy;

px1 = cx;
py1 = cy;

// Stamp out a large central areal
var ww = choose(9,11);
var hh = choose(9,11);
scr_stamp_center(cx,cy,ww,hh);

// Light
glr_set_ambient_color(c_blue);

//Mke a light over the door
var lspace = 3;
for(var lx = lspace; lx &lt; ww; lx += lspace){
    for(ly = lspace; ly &lt; hh; ly += lspace){
        var lxT = (cx - floor(ww/2)) + lx; // Translate lx to a room coordinate
        var lyT = (cy - floor(hh/2)) + ly;
        var my_light1 = glr_lightsimple_create(spr_glr_light_mask_point, 0, (lxT * CELL_WIDTH) - (CELL_WIDTH/2), (lyT * CELL_HEIGHT) - (CELL_HEIGHT/2), choose(c_white,c_green), 1, 1);
        //glr_lightsimple_set_scaling(my_light1,.35,.35);
    }
}


// Give the controller a random direction
var cdir = irandom(3);

// The odds variable for changing direction
var odds = 1;

// stamp out some random floor shapes
var stampSize = 3;
var numStamps = global.ship_boarded[SHIP_SCAFFOLD_SIZE] + 2;
repeat ( numStamps ){
    // Place a floor tile a the controller position
    //global.grid[# cx,cy]=FLOOR;
    scr_stamp_center(cx,cy,stampSize,stampSize);
    scr_stamp_center(cx,cy2,stampSize,stampSize);
    //ds_grid_set(global.grid, cx, cy, FLOOR); (alternative)

    
    // Mirror the above
    //global.grid[# cx2,cy]=FLOOR;
    scr_stamp_center(cx2,cy,stampSize,stampSize);
    scr_stamp_center(cx2,cy2,stampSize,stampSize);
    
   
    // Randomize the direction of the controller
    if(irandom(odds) == odds){
        cdir = irandom(3);
    }
    
    // Move the controller
    var nextMove = irandom_range(1,stampSize);
    var xdir = lengthdir_x(nextMove, cdir*90);
    var ydir = lengthdir_y(nextMove, cdir*90);
    cx += xdir;
    cx2 -= xdir;
    cy += ydir;
    cy2 -= ydir;
    
    // Clamp cx and cy so you don't go outside of the global.grid
    cx = clamp(cx, 1, width-stampSize);
    cx2 = clamp(cx2, 1, width-stampSize);
    cy = clamp(cy, 1, height-stampSize);
    cy2 = clamp(cy2, 1, height-stampSize);
}

// Player start coordinates
px_start = px1 * CELL_WIDTH + (CELL_WIDTH/2);
py_start = py1 * CELL_HEIGHT  + (CELL_HEIGHT*3) + (CELL_HEIGHT/2);


door = instance_create(px_start, py_start,obj_ladder);
// This part will depend on the number of decks.
// Sequence will be: deck, deck, deck, control
// See the Alarm 0 event in this object and the obj_door object for more detail on level progression.
door.room_to = room_get_name(room);
door.interact_active = false;
door.image_speed = 0;
door.image_alpha = 0;

// Back to center
cx = width div 2;
cy = height div 2;

// Stamp in some walls for cover
scr_stamp_center(cx+2,cy+2,1,1,WALL);
scr_stamp_center(cx+2,cy-2,1,1,WALL);
scr_stamp_center(cx-2,cy+2,1,1,WALL);
scr_stamp_center(cx-2,cy-2,1,1,WALL);


// Draw the level
scr_add_wall_tiles(height,width);



//Create the player




instance_create(px_start, py_start, obj_player);
with(obj_player){
    //event_user(0);// Weapon out;
    _state=0;
}


//Create crew
scr_instantiate_all_crew(px_start,py_start);
for(var i = 0; i &lt; instance_number(obj_npc); i++) {
    this_obj = instance_find(obj_npc,i);
    if(this_obj.crew_index != noone){
        with(this_obj){
            //event_user(0);// draw weapon
            mode="defend";
            targetMtype = obj_player;// move to this object
            _state=0;
        }
    }
}

// Place a core
instance_create(px_start,py_start,obj_core);

floors = noone; // An array to keep track of floor locations.
var fIndex = 0; // Current index of floor array
for(var yy = 0; yy &lt; height; yy++){
    for(var xx = 0; xx &lt; width; xx++){
        var ex = xx * CELL_WIDTH + CELL_WIDTH/2;
        var ey = yy * CELL_HEIGHT + CELL_HEIGHT/2;
        if(global.grid[# xx, yy] == FLOOR){
        
            var fc=noone;
            fc[0]=xx;
            fc[1]=yy;    
            floors[fIndex]=fc;
            fIndex++;
            

             
             // Maybe place some cover
             var cOdds = 20;
             if(irandom(cOdds) == cOdds){
                var cover = instance_create(ex,ey,choose(obj_crate_sm,obj_crate_md1,obj_crate_md2,obj_crate_lg));
                with(cover){
                    depth = -y;
                }
                     
             }

            // Place light
            llods = 10;
            if(irandom(llods)==llods){
                var clr = choose(c_red,c_green,c_blue,c_yellow,c_orange,c_white,c_lime);
                glr_lightsimple_create(spr_glr_light_mask_point, 0, ex, ey, clr, 1,1);
            }
        
        
        }
    }
}

// Add the crates to the grid path so enemies will walk around them.
//mp_grid_add_instances(global.grid_path,obj_crate,0);

// Place enemies


//instance_create((cx * CELL_WIDTH) + CELL_WIDTH/2, (cy * CELL_HEIGHT) + CELL_HEIGHT/2, obj_beast2);



</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Start timers


// Start room
alarm[4] = room_speed * 2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create boss
var bstartx = px1 * CELL_WIDTH + (CELL_WIDTH/2);
var bstarty = py1 * CELL_HEIGHT  + (CELL_HEIGHT/2);

boss = scr_instantiate_enemy_onship(bstartx,bstarty,obj_boss);
bossHp = 200;
boss.hp=bossHp;
boss.hp_current = bossHp;
boss.pspeed=playerstat.spd + 1;
boss.pspeed_init = playerstat.spd;
boss.mode = "hunt";
boss.default_weapon = choose(obj_machinegun1);
with(boss){
    if(instance_exists(weapon)){
        with(weapon){
            instance_destroy();// Remove the old weapon
        }
        weapon = noone;
    }
    event_user(0);// Draw weapon
}
with(boss){
    if(instance_exists(weapon)){
        weapon.user_fire_rate_mod = BASE_PLAYER_MOD_FRATE;// Boss guns fire faster, bullets go faster
        weapon.user_bullet_speed_mod = BASE_PLAYER_MOD_BSPEED;
    }
}

// Start checking for victory
alarm[2]=room_speed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="6">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Spawn waves

if level_complete exit;

var numEnemies = irandom_range(0,3);
for(var ee = 0; ee&lt;numEnemies; ee++){
    
    var eC = scr_array_random(floors);
    var ex = eC[0] * CELL_WIDTH + CELL_WIDTH/2;
    var ey = eC[1] * CELL_HEIGHT + CELL_HEIGHT/2;
    var tpDoor = instance_create(ex,ey,obj_trapdoor);
    tpDoor.emy = scr_instantiate_enemy_onship(0,0);
    tpDoor.depth = -ey;
    
}


alarm[6]=room_speed * wave_speed;//Call this timer again


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Activate all. Start more timers
//instance_activate_all();
alarm[6] = room_speed * 25;// Start waves
alarm[7] = room_speed * 2;// Spawn Boss


// Spawn drones
alarm[3] = room_speed * drone_spawn_time;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Start Incursion Pod or Ladder
if(global.deck_current==1){
    var ppod = instance_create(obj_player.x,obj_player.y,obj_torpedo_pod);
    entry_object = ppod;
    entry_frame = 8;
    scr_play_sound(snd_explosion_ship);
}else{
    entry_object=door;
    entry_frame = 17;
    door.image_alpha = 1;
    door.image_index = 7;
    door.image_playto = 24;
    door.image_speed = door.image_dspeed;
    door.hide_on_stop = true;
}


alarm[5]=room_speed*2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Spawn drones on timer
if level_complete exit;
if(instance_number(obj_drone) &lt; 20){
    var width = room_width div CELL_WIDTH;
    var height = room_height div CELL_HEIGHT;
    var odds = 20;
    for(var yy = 0; yy &lt; height; yy++){
        for(var xx = 0; xx &lt; width; xx++){
            var ex = xx * CELL_WIDTH + CELL_WIDTH/2;
            var ey = yy * CELL_HEIGHT + CELL_HEIGHT/2;
            if(global.grid[# xx, yy] == FLOOR){
                if(instance_exists(obj_player)){
                    if(point_distance(ex,ey,obj_player.x,obj_player.y) &gt; 80 &amp;&amp; irandom(odds) == odds){                  
                        var drone = instance_create(ex,ey,obj_drone);
                        drone.disposition = DISPOSITION_HOSTILE;
                        drone.targetKfaction = FACTION_PLAYER;                    
                    }
                }
            } 
        }
    }
}


alarm[3] = room_speed * drone_spawn_time;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check for Level Complete.
// Check to see if boss and all minions defeated
var enemyCount = 0;
for(var i = 0; i &lt; instance_number(obj_npc); i++) {
    var this_obj = instance_find(obj_npc,i);
    if(this_obj.faction!=FACTION_PLAYER){
        enemyCount++;
    }
}


if(enemyCount&lt;1){
   // if done, activate door to next deck.   
    with(obj_crate){
        event_user(0);// Open crates  
    }     
        level_complete = true;
        guiText.text = "VICTORY!!!";
        guiText.show=true;
        var bstartx = px1 * CELL_WIDTH + (CELL_WIDTH/2);
        var bstarty = py1 * CELL_HEIGHT  + (CELL_HEIGHT/2);
        instance_create(bstartx,bstarty,obj_shiptoken);
}else{
    alarm[2]=room_speed;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Bullet time
if(global.bullet_time){
    background_vspeed[0] = bg_speed * global.speed_mod;
}else{
    background_vspeed[0] = bg_speed * global.speed_mod;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check for user input
if(scr_user_input(pin.bugout)){

    // Go back to space without clearing global.ship_boarded.
    // global.ship_boarded should be set to self-destruct in scr_populate_sector
    room_goto(rm_space);
}

if(debug_mode){

    if( keyboard_check_pressed(vk_up) &amp;&amp; !keyboard_check(vk_shift) ){
        global.base_bullet_speed += 0.5;
    }
    
    if( keyboard_check_pressed(vk_down) &amp;&amp; !keyboard_check(vk_shift) ){
        global.base_bullet_speed -= 0.5;
    }
    
    if( keyboard_check_pressed(vk_up) &amp;&amp; keyboard_check(vk_shift) ){
        global.base_fire_rate += 0.5;
    }
    
    if( keyboard_check_pressed(vk_down) &amp;&amp; keyboard_check(vk_shift) ){
        global.base_fire_rate -= 0.5;
    }
    
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Decrement wave timer
wave_timer --;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Activate player
// player_activated is from parent
if(!player_activated){
    if(entry_object!=noone){
        if(entry_object.image_index==entry_frame){
            player_activated = true;
            with(obj_player){
                _state=1;
                event_user(0);// equip weapon
            }
            with(obj_npc){
                _state=1;
                event_user(0);
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Save player stats
if(instance_exists(obj_player)){
    global.player_data[playerstat.hp_current]=obj_player.hp_current;
    // Save the crew stas
    for(var i = 0; i &lt; instance_number(obj_npc); i++) {
        this_obj = instance_find(obj_npc,i);
        if(this_obj.crew_index != noone){
            var cData = global.crew[this_obj.crew_index];
            cData[NPC_HP_CURRENT] = this_obj.hp_current;
            global.crew[this_obj.crew_index] = cData;
        }
    }
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="75">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Deck Clear message
/***
if(level_complete){
    var xx = global.gui_width / 2; var yy = global.gui_height / 2;
    draw_set_color(c_lime);
    draw_set_font(fnt_menus_huge);
    draw_set_halign(fa_center);
    draw_text(xx, yy, "DECK CLEAR");
    draw_text(xx, yy+64, "FIND THE EXIT");
}
***/

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
