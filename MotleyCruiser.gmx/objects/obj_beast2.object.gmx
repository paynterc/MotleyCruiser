<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_hairbeast2</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_mortal</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize enemy



// Movement 
targetK = noone;// kill target
pxK = x;// Target x
pyK = y;// Target y
start_x=x;
start_y=y;
teather = CELL_WIDTH * 5;
teather_cur = 0;
pspeed = 0.5;// path speed. running speed
ospeed = pspeed;//original speed


// State
mode = "idle";
charge_mode=false;
// Animation Control
image_playfrom = 0;
image_playto = 1;
image_dspeed = 0.10;// default speed
image_fspd = 6;// Change after this many frames
image_fcur = 0;// A counter for changing frames
image_speed = 0;
cooling_down = false;// Damage cooldown


// Settings
faction=FACTION_HOSTILE;
disposition=DISPOSITION_HOSTILE;
targetKfaction = FACTION_PLAYER;
targetKtype = obj_mortal;
type = faction;// type is still used in some logic. Usually set to faction.
weapon_index = noone;
weapon=noone;
race_index = noone;
sex = noone;
health_y = sprite_get_height(sprite_index) + 5;
hyset = false;
depth = -y;
hp=100;
hp_current=hp;
damage = 5;
cooldown_time = 2;

arms=noone; // Multiple weapons
weapon_offsets = noone;
weapon_offsets[0]="-24,-16";// x,y offsets
weapon_offsets[1]="24,-16";

eyes_x=0;
eyes_y1=-23;// default
eyes_y2=-14;
eyes_y = eyes_y2;
eyes=instance_create(x,y,obj_beast_eyes);


alarm[0] = room_speed * .5;// get Target


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Unset cooldown
cooling_down = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Get target
var inview = scr_instance_in_view(self);

/***
Find closest member of the player's boarding team. This includes the player.
***/
scr_npc_find_kill_target();
/***
if(instance_exists(obj_player)){

    
    target = instance_nearest(x,y,obj_player);
    tx = (target.x div CELL_WIDTH)* CELL_WIDTH + CELL_WIDTH/2;
    ty = (target.y div CELL_HEIGHT)* CELL_HEIGHT + CELL_HEIGHT/2;
    var pd = distance_to_object(target);
  
}else{
    target = noone;
}
***/

if(targetK!=noone &amp;&amp; instance_exists(targetK)){

    if(arms != noone){
        for(var i=0;i&lt;array_length_1d(arms);i++){
            arm=arms[i];
            arm.image_angle = point_direction(x, y, pxK, pyK);        
        }
    }
    
    eyes.image_angle = point_direction(x, y, pxK, pyK);

    if(scr_gridcol_line(x,y,targetK.x,targetK.y,0)){
        targetK = noone;
    }
}


if(targetK==noone){
    mode="idle";
}else{
    mode="hunt";
}

if(mode=="hunt"){
    image_fcur=0;
    image_playfrom=0;
    image_playto=1;
    eyes_y=eyes_y1;
}else{
    // Idle animation
    image_fcur=0;
    image_playfrom=2;
    image_playto=2;
    eyes_y=eyes_y2;
}

alarm[0] = room_speed * .5;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Move
if(mode=="hunt"){
    scr_move_to_point(pxK,pyK,pspeed,0);
}


/// Check hp_current
if(hp_current&lt;1){

    scr_drop_loot();

    corpse = instance_create(x,y,obj_corpse);
    corpse.sprite = sprite_index;
    
    with(eyes){
        instance_destroy();
    }
    eyes = noone;
    for(var i=0;i&lt;array_length_1d(arms);i++){
        arm=arms[i];
        with(arm){
            instance_destroy();
        }
    }
    arms=noone;
    instance_destroy();
}

/***
if(arms != noone){
    var offsets;
    for(var i=0;i&lt;array_length_1d(arms);i++){
        offsets = scr_str_split(weapon_offsets[i],",");
        arm=arms[i];
        arm.x = x+real(offsets[0]);
        arm.y = y+real(offsets[1]);
        arm.depth = depth -1;      
    }
}
***/

depth = -y;

if(eyes != noone){
    eyes.x = x+eyes_x;
    eyes.y = y+eyes_y;
    eyes.depth = depths.bullet;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Image frame

image_fcur++;
if(image_fcur&gt;=image_fspd){
    image_fcur=0;
    image_index++;
}
if(image_index &gt; image_playto){
    image_index = image_playfrom;  
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_mortal">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Apply damage
    
if( other.faction!=faction &amp;&amp; !cooling_down ){
    
    cooling_down = true;
    instance_create(other.x,other.y,obj_impact);
    other.hp_current -= damage;
    with(other){
        event_user(2);
    }
    alarm[1]=room_speed * cooldown_time;
  
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
