<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init

//Global module library
scr_modules();

scaffold_size = 3;
center=noone;
grid_centers0 = noone;
grid_centers1 = noone;
grid_centers2 = noone;
grid_centers = noone;
painting = false;

/***
scaffold_sizes = noone;
scaffold_sizes[0]=3;
scaffold_sizes[1]=5;
scaffold_sizes[2]=7;
***/

font = fnt_menus_med;
font_size = font_get_size(font);
font_vspc = font_size/2; 


// Load ship library

/*** This is done in obj_game_control now:
ship_library = noone;
read_list = ds_list_create();
ini_open(DATA_FILE);
var str = ini_read_string("libraries", "ships", "");
ds_list_read(read_list,str);
ship_library = read_list[| 0];
ds_list_destroy(read_list);
ini_close();
***/
ship_data = noone;
loaded_ship = noone;
loaded_ship_index = noone;

// Hide the paint brush
instance_deactivate_object(obj_paint_drag);

//Center view
//view_xview[0]=x-(view_wview[0]/2);
//view_yview[0]=y-(view_hview[0]/2);


// GUI: Settings panel
var pbtnY=32;
var pbtnH=32;
var btns = noone;
var btn1 = scr_gui_entity_button();
btn1[BTN_X]=noone;//x (from panel boarder+padding)
btn1[BTN_Y]=pbtnY;//y
btn1[BTN_W]=300;//w
btn1[BTN_H]=pbtnH;//h
btn1[BTN_TXT]="3x3";//text

pbtnY+= pbtnH + (pbtnH/2);
var btn2 = scr_gui_entity_button();
btn2[BTN_X]=noone;//x (from panel boarder+padding)
btn2[BTN_Y]=pbtnY;//y
btn2[BTN_W]=300;//w
btn2[BTN_H]=pbtnH;//h
btn2[BTN_TXT]="5x5";//text

pbtnY+= pbtnH + (pbtnH/2);
var btn3 = scr_gui_entity_button();
btn3[BTN_X]=noone;//x (from panel boarder+padding)
btn3[BTN_Y]=pbtnY;//y
btn3[BTN_W]=300;//w
btn3[BTN_H]=pbtnH;//h
btn3[BTN_TXT]="7x7";//text

pbtnY+= pbtnH + (pbtnH/2);
var btn4 = scr_gui_entity_button();
btn4[BTN_X]=noone;//x (from panel boarder+padding)
btn4[BTN_Y]=pbtnY;//y
btn4[BTN_W]=300;//w
btn4[BTN_H]=pbtnH;//h
btn4[BTN_TXT]="9x9";//text

pbtnY+= pbtnH + (pbtnH/2);
var btn5 = scr_gui_entity_button();
btn5[BTN_X]=noone;//x (from panel boarder+padding)
btn5[BTN_Y]=pbtnY;//y
btn5[BTN_W]=300;//w
btn5[BTN_H]=pbtnH;//h
btn5[BTN_TXT]="11x11";//text

pbtnY+= pbtnH + (pbtnH/2);
var btn6 = scr_gui_entity_button();
btn6[BTN_X]=noone;//x (from panel boarder+padding)
btn6[BTN_Y]=pbtnY;//y
btn6[BTN_W]=300;//w
btn6[BTN_H]=pbtnH;//h
btn6[BTN_TXT]="15x15";//text

btns[0]=btn1;
btns[1]=btn2;
btns[2]=btn3;
btns[3]=btn4;
btns[4]=btn5;
btns[5]=btn6;
panel_settings = scr_gui_set_panel_data("SETTINGS",400,300,btns,5);



tx=10;//top of rectangle
ty=10;
padding = 5;
margin = 10;
boxwidth = global.gui_width - (margin * 2);
boxheight = global.gui_height - (margin * 2);



// Draw Module Menu
//var mx=x-(5*SCAFF_CELL_SIZE);
//var my=-(5*SCAFF_CELL_SIZE);
var mx = 32;
var my = 64;
var my_start = my;
var mx_start = mx;
module_selected = noone;//Use this to display module_data

//Instantiate module selection
var mCount = 0;// keep track current column
for(var m=0; m&lt;array_length_1d(global.module_library); m++){
    
    if(mCount&gt;4){
        mx=mx_start;
        my+= SCAFF_CELL_SIZE + (SCAFF_CELL_SIZE * 2);
        mCount=0;
    }

    module_record = global.module_library[m];   
    m_object = instance_create(mx, my ,obj_menu_module); 
    m_object.module_index = m; 
    m_object.sprite_index = module_record[MODULE_SPRITE_INDEX];
    m_object.image_blend = module_record[MODULE_COLOR];
    m_object.module_data = module_record;
    m_object.image_angle = 90;
    m_object.start_x = m_object.x;
    m_object.start_y = m_object.y;
    m_object.depth = depth-1;
    mx+= SCAFF_CELL_SIZE + (SCAFF_CELL_SIZE/2);
    mCount++;

}



// Create scaffold grids
scr_shipedit_create_grids();

// Color grid
colorgrid_centers = noone;
sqrsize = 8;
grid_xstart = obj_paintbrush.x  - (sqrsize * 8);
grid_ystart = (obj_paintbrush.y + (obj_paintbrush.sprite_height/2)) - (sqrsize * 3);
grid_x = grid_xstart;
grid_y = grid_ystart;

colors = noone;
colors[0,0]=c_aqua;
colors[0,1]=c_black;
colors[0,2]=c_blue;
colors[0,3]=c_dkgray;
colors[0,4]=c_fuchsia;
colors[0,5]=c_gray;
colors[0,6]=c_green;

colors[1,0]=c_lime;
colors[1,1]=c_ltgray;
colors[1,2]=c_maroon;
colors[1,3]=c_navy;
colors[1,4]=c_olive;
colors[1,5]=c_orange;
colors[1,6]=c_purple;

colors[2,0]=c_white;
colors[2,1]=c_red;
colors[2,2]=c_silver;
colors[2,3]=c_teal;
colors[2,4]=c_yellow;
colors[2,5]=c_black;
colors[2,6]=c_black;

for(var r = 0; r&lt;array_height_2d(colors); r++){
    for(c = 0; c &lt; array_length_2d(colors,0); c++){
        var coords = noone;
        coords[0] = grid_x;
        coords[1] = grid_y;
        coords[2] = colors[r,c];
        colorgrid_centers[r,c]=coords;
        grid_x += sqrsize;
    }
    grid_x = grid_xstart;
    grid_y += sqrsize;
}

scr_ship_defaults();

var tby = 384;
field_ship_name = instance_create(520,tby,obj_form_textbox);tby+=32;
field_ship_name.field_label="Ship Model Name";

field_ship_type = instance_create(520,tby,obj_form_textbox);tby+=32;
field_ship_type.field_label="Ship Type";

field_ship_class = instance_create(520,tby,obj_form_textbox);tby+=32;
field_ship_class.field_label="Ship Class";

field_ship_faction = instance_create(520,tby,obj_form_textbox);tby+=32;
field_ship_faction.field_label="Ship Faction";

field_ship_function = instance_create(520,tby,obj_form_textbox);tby+=32;
field_ship_function.field_label="Ship Function";


with(obj_form_textbox){
    labelposition="left";
}

alarm[0]=room_speed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update stats

scr_ship_defaults();

module_data=noone;
var s_count = instance_number(obj_place_module);
for(var i = 0; i &lt; s_count; i++) {
    var module_obj = instance_find(obj_place_module,i);
    var module_record = module_obj.module_data;
    module_data = scr_push_array(module_data,module_record);
}
ship_data[SHIP_MODULES] = module_data;
scr_module_modify_stats();

alarm[0]=room_speed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update vars
if(center==noone){
    center = (scaffold_size-1)/2
}

if(!painting){
    instance_deactivate_object(obj_paint_drag);
}

scr_gui_button_state(panel_settings);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// See if gui button pressed
var pressed_setting = scr_gui_button_click(panel_settings);
if(pressed_setting!=noone){

    scr_clear_editor();
    if(pressed_setting==0){
        scaffold_size = 3;
    }else if(pressed_setting==1){
        scaffold_size = 5;
    }else if(pressed_setting==2){
        scaffold_size = 7;
    }else if(pressed_setting==3){
        scaffold_size = 9;
    }else if(pressed_setting==4){
        scaffold_size = 11;
    }else if(pressed_setting==5){
        scaffold_size = 15;
    }else{
        scaffold_size = 3;
    }
    
    // Create scaffold grids
    scr_shipedit_create_grids();
    panel_settings[4] = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Ship stats
scr_gui_draw_panel(panel_settings);

draw_set_font(font);
draw_set_halign(fa_left);
var start_x = 246;
var start_y = 420;
if(loaded_ship_index != noone){
    var idx = 0;
    draw_text(start_x, start_y + ((font_size + font_vspc) * idx), "Ship Index: " + string(loaded_ship_index)); idx++;
    draw_text(start_x, start_y + ((font_size + font_vspc) * idx), "Ship Name: " + string(loaded_ship[SHIP_NAME_MODEL])); idx++;
    draw_text(start_x, start_y + ((font_size + font_vspc) * idx), "Ship Faction: " + string(loaded_ship[SHIP_FACTION])); idx++;
    draw_text(start_x, start_y + ((font_size + font_vspc) * idx), "Ship Function: " + string(loaded_ship[SHIP_FUNCTION])); idx++;
    draw_text(start_x, start_y + ((font_size + font_vspc) * idx), "Mass: " + string(mass)); idx++;
    draw_text(start_x, start_y + ((font_size + font_vspc) * idx) ,"Max Speed: " + string(max_spd_fwd)); idx++;
    draw_text(start_x, start_y + ((font_size + font_vspc) * idx), "Acceleration: " + string(acc_spd_fwd)); idx++;
    draw_text(start_x, start_y + ((font_size + font_vspc) * idx), "Turn Speed: " + string(turn_spd)); idx++;
    draw_text(start_x, start_y + ((font_size + font_vspc) * idx), "Turn Mod: " + string(turn_mod)); idx++;
    draw_text(start_x, start_y + ((font_size + font_vspc) * idx), "Shields: " + string(shields)); idx++;
    draw_text(start_x, start_y + ((font_size + font_vspc) * idx), "Energy: " + string(energy)); idx++;
    draw_text(start_x, start_y + ((font_size + font_vspc) * idx), "Hull: " + string(hull)); idx++;
    draw_text(start_x, start_y + ((font_size + font_vspc) * idx), "Bunks: " + string(bunks)); idx++;
    draw_text(start_x, start_y + ((font_size + font_vspc) * idx), "Cargo Space: " + string(cargo)); idx++;
}


start_y+=156;
if(module_selected!=noone){
    idx = 0;
    start_x = 32;
    draw_text(start_x, start_y + ((font_size + font_vspc) * idx), "Module: " + string(module_selected[MODULE_NAME])); idx++;
    draw_text(start_x, start_y + ((font_size + font_vspc) * idx), "Mass: " + string(module_selected[MODULE_MASS_MOD])); idx++;
    draw_text(start_x, start_y + ((font_size + font_vspc) * idx), "Hull: " + string(module_selected[MODULE_HULL_MOD])); idx++;
    draw_text(start_x, start_y + ((font_size + font_vspc) * idx), "Acceleration: " + string(module_selected[MODULE_ACCFWD_MOD])); idx++;

}

draw_text(16, 16, "guix: " + string(device_mouse_x_to_gui(0)));
draw_text(16, 16 + (font_size + font_vspc), "guiy: " + string(device_mouse_y_to_gui(0)));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw scaffold layers
draw_set_color(c_lime); 
draw_set_color(c_lime);



/***

for(var r=0;r&lt;scaffold_size;r++){
    for(var c=0;c&lt;scaffold_size;c++){
        
        var coords = grid_centers2[r,c]
        var x1 = coords[0] - (SCAFF_CELL_SIZE/2);
        var y1 = coords[1] - (SCAFF_CELL_SIZE/2);
        var x2 = x1+SCAFF_CELL_SIZE;
        var y2 = y1+SCAFF_CELL_SIZE;
        draw_rectangle(x1, y1, x2, y2, true);
        //draw_point(coords[0],coords[1]);
        
        coords = grid_centers1[r,c]
        x1 = coords[0] - (SCAFF_CELL_SIZE/2);
        y1 = coords[1] - (SCAFF_CELL_SIZE/2);
        x2 = x1+SCAFF_CELL_SIZE;
        y2 = y1+SCAFF_CELL_SIZE;
        draw_rectangle(x1, y1, x2, y2, true);
        //draw_point(coords[0],coords[1]);
        
        coords = grid_centers0[r,c]
        x1 = coords[0] - (SCAFF_CELL_SIZE/2);
        y1 = coords[1] - (SCAFF_CELL_SIZE/2);
        x2 = x1+SCAFF_CELL_SIZE;
        y2 = y1+SCAFF_CELL_SIZE;
        draw_rectangle(x1, y1, x2, y2, true);     
        //draw_point(coords[0],coords[1]);
    }
}
***/
// Draw color picker
for(var r = 0; r&lt;array_height_2d(colors); r++){
    for(c = 0; c &lt; array_length_2d(colors,0); c++){
        coords = colorgrid_centers[r,c];
        var x1 = coords[0] - (sqrsize/2);
        var y1 = coords[1] - (sqrsize/2);
        var x2 = x1+sqrsize;
        var y2 = y1+sqrsize;
        draw_set_color(colors[r,c]);
        draw_rectangle(x1, y1, x2, y2, false);       
    }
}

// Draw ship id
if(loaded_ship_index!=noone){
    draw_set_color(c_lime);
    draw_rectangle(x-10, y-10, x+10, y+10, true);
    draw_set_halign(fa_center);
    draw_set_valign(fa_center);
    draw_text(x,y,string(loaded_ship_index));
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
