<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init
_state = 0;
// Unit start positions
sx = room_width/2;
sy = 240;

pod = obj_pod_cinematic;
pod.x = sx;
pod.y = sy;

view_wview[0]=room_width;
view_hview[0]=room_height;
view_xview[0]=pod.x - (view_wview[0]/2);
view_yview[0]=pod.y - (view_hview[0]/2);

obj_gui_control._state = guistates.cinematic;

gui_width = display_get_gui_width();
gui_height = display_get_gui_height();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Make ships
player_ship = instance_create(room_width/2,room_height/2,obj_ship_cinematic);
player_ship.ship_data = global.player_ship;
player_ship.depth = 10000;
with(player_ship){
    event_user(0);// create modules
}

enemy_ship = instance_create(room_width/2,room_height/2 - 2000,obj_ship_cinematic);
enemy_ship.ship_data = global.ship_boarded;
enemy_ship.depth = depths.bullet;
with(enemy_ship){
    event_user(0);// create modules
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw the map
texture_set_interpolation(false);

// Resize

var wall_bg = bg_walltiles;

// Set the global.grid width and height
var width = room_width div CELL_WIDTH;
var height = room_height div CELL_HEIGHT;

// Create the DS global.grid
global.grid = ds_grid_create(width, height);

// Create the pathfinding global.grid
global.grid_path = mp_grid_create(0,0,width,height,CELL_WIDTH,CELL_HEIGHT);

// Fill the global.grid with VOID
ds_grid_set_region(global.grid, 0, 0, width, height, VOID);

// Find floor objects that were placed and update the global.grid with their location.
for(var i = 0; i &lt; instance_number(obj_floor); i++) {
    var wall = instance_find(obj_floor,i);
    wx = wall.x / CELL_WIDTH;
    wy = wall.y / CELL_HEIGHT;
    global.grid[# wx, wy] = FLOOR;
}
for(var i = 0; i &lt; instance_number(obj_vacuum); i++) {
    var wall = instance_find(obj_vacuum,i);
    wx = wall.x / CELL_WIDTH;
    wy = wall.y / CELL_HEIGHT;
    global.grid[# wx, wy] = BG_VACUUM;
}

// Draw the level
scr_add_wall_tiles(height,width);

// Set Pod State
obj_pod_cinematic.image_index = 1;
obj_pod_cinematic.image_speed = 0;

alarm[0] = room_speed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Go to room
show_debug_message("GO TO ROOM");
_state=3;
room_goto(rm_ship_deck_rnd);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Assemble team

_state=1;
var cUnit = noone;
var T = noone;
var C = noone;


// PLAYER
cUnit = instance_create(sx+96,sy+12,obj_npc_cinematic);
cUnit.image_speed = 0;
cUnit.sprite_index = spr_human;
cUnit.depth=depths.bullet;
if( sprite_exists(global.player_sprite) ){
    cUnit.sprite_index = global.player_sprite;
}else{
    show_debug_message("NO PLAYER SPRITE FOUND");
}

// TEAM
T = scr_get_array_1d(global.team,0);// Team member 1
if(T != noone){
    C = global.crew[T];// Get the crew member data
    if(is_array(C)){

        if(C[NPC_ACTIVE] &amp;&amp; C[NPC_SPRITE_TEMP]!=noone &amp;&amp; sprite_exists(C[NPC_SPRITE_TEMP])){
            csprite = C[NPC_SPRITE_TEMP];           
            cUnit = instance_create(sx-96,sy+12,obj_npc_cinematic);
            cUnit.image_speed = 0;
            cUnit.sprite_index = spr_human;
            cUnit.depth=depths.bullet;
            if( sprite_exists(csprite) ){
                cUnit.sprite_index = csprite;
            }       
        }
    }
}

T = scr_get_array_1d(global.team,1);// Team member 2
if(T != noone){
    C = global.crew[T];// Get the crew member data
    if(is_array(C)){
    
        if(C[NPC_ACTIVE] &amp;&amp; C[NPC_SPRITE_TEMP]!=noone &amp;&amp; sprite_exists(C[NPC_SPRITE_TEMP])){
            csprite = C[NPC_SPRITE_TEMP];           
            cUnit = instance_create(sx+96+32,sy+12,obj_npc_cinematic);
            cUnit.image_speed = 0;
            cUnit.sprite_index = spr_human;
            cUnit.depth=depths.bullet;
            if( sprite_exists(csprite) ){
                cUnit.sprite_index = csprite;
            }         
        }
    }
}

T = scr_get_array_1d(global.team,2);// Team member 3
if(T != noone){
    C = global.crew[T];// Get the crew member data
    if(is_array(C)){
    
        if(C[NPC_ACTIVE] &amp;&amp; C[NPC_SPRITE_TEMP]!=noone &amp;&amp; sprite_exists(C[NPC_SPRITE_TEMP])){
            csprite = C[NPC_SPRITE_TEMP];           
            cUnit = instance_create(sx-96-32,sy+12,obj_npc_cinematic);
            cUnit.image_speed = 0;
            cUnit.sprite_index = spr_human;
            cUnit.depth=depths.bullet;
            if( sprite_exists(csprite) ){
                cUnit.sprite_index = csprite;
            }         
        }
    }
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Move units
if(_state==1){
    var sx1 = sx;
    var sy1 = sy+12;
    with(obj_npc_cinematic){
        image_speed = .5;
        move_towards_point(sx1,sy1,1);
        if(point_distance(x,y,sx1,sy1)&lt;4){
            instance_deactivate_object(id);
        }
    }
    
    if(instance_number(obj_npc_cinematic)&lt;1){
        _state=2;
        show_debug_message("MOVE TO STATE 2");
    }
    
}else if(_state==2){
    // Close doors   
    if(obj_pod_cinematic.image_index == 1){
        audio_play_sound(snd_dooropen,1,0);
    }
    obj_pod_cinematic.image_speed = .5;
    if(obj_pod_cinematic.image_index == 4){
        obj_pod_cinematic.image_speed = 0;
        audio_play_sound(snd_boost_launch,1,0);
        _state=3;
    }
    
}else if(_state==3){
    // launch

    part_type_direction(global.ptcl_jet, obj_pod_cinematic.image_angle+95, obj_pod_cinematic.image_angle+85, 0, 0);
    part_type_scale(global.Particles, 5, 5);
    part_particles_create(global.Particles, obj_pod_cinematic.x, obj_pod_cinematic.y+32, global.ptcl_jet, 1);
    
    view_wview[0] += 16;// Zoom out by changing scale of view
    view_hview[0] += 8;
    with(obj_pod_cinematic){
        y -= 16;// MOVE THE PD
    }
    view_xview[0]=pod.x - (view_wview[0]/2);// Keep view centered on pod
    view_yview[0]=pod.y - (view_hview[0]/2);
    if(obj_pod_cinematic.y &lt;= enemy_ship.y ){
        _state=4;
        show_debug_message("MOVE TO STATE 3");
        alarm[1]=1;// Go to room
    }
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Debug input
if(debug_mode){


    // Move the view portal for ships
    if( keyboard_check_pressed(vk_up) ){
        yp1--;
    }
    
    if( keyboard_check_pressed(vk_down) ){
        yp1++;
    }
    
    if( keyboard_check_pressed(vk_left)){
        xp1--;
    }
    
    if( keyboard_check_pressed(vk_right) ){
        xp1++;
    }
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
