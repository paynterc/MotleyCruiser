<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Init
cols = 10;
rows = global.base_inventory_rows;
//Inventory Items
item_int();

// PLAYER INVENTORY
inventory_int(cols,rows);


global.show_inventory = false;
font = fnt_menus;
font_size = font_get_size(font);
padding = 16;
margin = 16;
boxwidth = display_get_gui_width() / 2 // Do this in case window has been resized to fullscreen
boxheight = display_get_gui_height() - (margin*2);
box_x = margin;
box_y = margin;
box_center = boxwidth;
box_bottom = box_y+boxheight;

//Just a variable value, ignore this:

last_stack = 0;
last_slot = 0;
last_id_item = 0;
   
current_stack = 0;
current_slot = 0;
current_id_item = 0;


// Pagination
rows_per_page=5;
page=0;
start_row = page * rows_per_page;
start_index = 0;
page_rows = min(rows - start_row,rows_per_page);

// Navigation buttons
navbuttons = noone;
nbtn_left=scr_gui_entity_button();
nbtn_right=scr_gui_entity_button();

nbtn_left[0]=box_x+padding;// x
nbtn_left[1]=box_y+padding;// y
nbtn_left[2]=font_size+4;// width
nbtn_left[3]=font_size+4;// height
nbtn_left[4]=false;// hover status
nbtn_left[5]="&lt;";// text

nbtn_right[0]=boxwidth-padding-(font_size);// x
nbtn_right[1]=box_y+padding;// y
nbtn_right[2]=font_size+4;// width
nbtn_right[3]=font_size+4;// height
nbtn_right[4]=false;// hover status
nbtn_right[5]="&gt;";// text

navbuttons[0]=nbtn_left;
navbuttons[1]=nbtn_right;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Show inventory
if(global.game_loaded==noone){
    global.show_inventory = false;
    exit;
}
if(scr_user_input("inventory")){
    global.show_inventory = !global.show_inventory;
    if(global.show_inventory){
        event_user(0);
        page=0;
        global.ItemSelected=-1;
        global.ItemLastSelect=-1;
    }
}

if(!global.show_inventory) exit;

if(global.player_ship!=noone){
    rows = global.base_inventory_rows + global.player_ship[SHIP_CARGO];
}

if(scr_user_input("inventory_page_left")){
    page = max(0,page-1);
    global.ItemSelected=-1;
    global.ItemLastSelect=-1;
}else if(scr_user_input("inventory_page_right")){
    page = min(page+1,ceil(rows/rows_per_page)-1);
    global.ItemSelected=-1;
    global.ItemLastSelect=-1;
}

if keyboard_check_pressed(ord("D")){
   //Drop a Item (object is needed);
   inventory_item_drop(inventory_last_select(),1,view_wview[0]-64+random(48),view_hview[0]/2-random(64)+random(64),obj_drop);
   //show_message("Selected Item was dropped");
}

if(scr_user_input("inventory-use")){
   //Use a Item, return: &lt;true|false&gt; (true if they have special effects, false not)
   var has_script;
   has_script = inventory_item_use(inventory_last_select());
}


if(scr_user_input("inventory_select_prev")){
    global.ItemSelected = max(start_index,global.ItemSelected-1);
    global.ItemLastSelect = global.ItemSelected;
}

if(scr_user_input("inventory_select_next")){
    if(global.ItemSelected&lt;0){
        global.ItemSelected = start_index;
        global.ItemLastSelect = global.ItemSelected;
    }else{
        global.ItemSelected = min(start_index + (page_rows*cols)-1,global.ItemSelected+1);
        global.ItemLastSelect = global.ItemSelected;
    }
    var bla=0;
}

if(scr_user_input("inventory_select_down")){
    if(global.ItemSelected+cols&lt;=start_index+(cols*page_rows)-1){
        global.ItemSelected = global.ItemSelected+cols;
        global.ItemLastSelect = global.ItemSelected;
    }
}

if(scr_user_input("inventory_select_up")){
    if(global.ItemSelected-cols&gt;=start_index){
        global.ItemSelected = global.ItemSelected-cols;
        global.ItemLastSelect = global.ItemSelected
    }
;
}

/****
if keyboard_check_pressed(ord("Q")){
    //Just add random items to inventory, if the inventory is full, 
    //you'll get return the remaining stack
   var stack_remain;
   stack_remain = inventory_item_add(irandom_range(0, 50),16)
   show_debug_message("Remaining Stack: " + string(stack_remain))
   
}

if keyboard_check_pressed(ord("W")){
   //Clear the inventory
   inventory_clear();
   show_message("Inventory was cleared");
}

if keyboard_check_pressed(ord("E")){
   //Save the inventory, the best, the save file are unreadable.
   inventory_save(working_directory + "\inventory.dat");
   show_message("Inventory was saved");
}

if keyboard_check_pressed(ord("R")){
   //Load the inventory
   inventory_load(working_directory + "\inventory.dat");
   show_message("Inventory was loaded");
}

if keyboard_check_pressed(ord("T")){
   //Sorting inventory, typ -&gt; 0 = 1. 2. 3. (from ID) | 1 = A. B. C. | 2 = biggest Stack
   //Reserve Sorting -&gt; false|true
   inventory_sort(0,false);
   show_message("Inventory was sorted");
}

if keyboard_check_pressed(ord("Y")){
   //Clear a Item completyYy
   inventory_item_clear(inventory_last_select());
   show_message("Selected Item was cleared");
}

if keyboard_check_pressed(ord("U")){
   //Delete a Item by stack amounut
   inventory_item_delete(inventory_last_select(),1);
   show_message("Selected Item was deleted (1 Amount less)");
}

if keyboard_check_pressed(ord("D")){
   //Drop a Item (object is needed);
   inventory_item_drop(inventory_last_select(),1,view_wview[0]-64+random(48),view_hview[0]/2-random(64)+random(64),obj_drop);
   //show_message("Selected Item was dropped");
}

if keyboard_check_pressed(ord("O")){
   //Find a Item from Inventory
   var amount;
   amount = inventory_item_find(34) //search ID 34 - Leaf, return of amount the item.
   show_message("Amount founded Item: " + string(amount));
}

if keyboard_check_pressed(ord("P")){
   //Use a Item, return: &lt;true|false&gt; (true if they have special effects, false not)
   var has_script;
   has_script = inventory_item_use(inventory_last_select());
}

if keyboard_check_pressed(ord("A")){
   //Exchange the Inventory Slot
   inventory_item_exchange(inventory_select(),inventory_last_select());
}
****/
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check nav buttons for SHOW and HOVER
if(global.show_inventory){
    // Show button
    var lbtn = navbuttons[0];
    lbtn[@ BTN_SHOW] = page &gt; 0;
    
    var rbtn = navbuttons[1];
    rbtn[@ BTN_SHOW] = rows - ((page+1) * rows_per_page)&gt;0;

    var guix = device_mouse_x_to_gui(0);
    var guiy = device_mouse_y_to_gui(0);
    for(var i = 0; i&lt;array_length_1d(navbuttons); i++){
        thebutton = navbuttons[i];
        button_x = thebutton[0];
        button_y = thebutton[1];
        button_w = thebutton[2];
        button_h = thebutton[3];   
        xhover = ( guix == median(button_x, guix, button_x + button_w) );
        yhover = ( guiy == median(button_y, guiy, button_y + button_h) );
        thebutton[@ 4] = xhover &amp;&amp; yhover &amp;&amp; thebutton[BTN_SHOW];
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// See if button was clicked
if(global.show_inventory){

    for(var i=0; i&lt;array_length_1d(navbuttons); i++){
        btn=navbuttons[i];
        if(btn[BTN_HOVER]){
            if(i==0){
                page = max(0,page-1);
                break;
            }else if(i==1){
                page = min(page+1,ceil(rows/rows_per_page)-1);
                break;
            }
        }
    }
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update window size

boxwidth = display_get_gui_width() / 2 // Do this in case window has been resized to fullscreen
boxheight = display_get_gui_height() - (margin*2);
box_x = margin;
box_y = margin;
box_hcenter = box_x + (boxwidth/2);
box_bottom = box_y + boxheight;
box_vcenter = box_bottom / 2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Destroy stuff
if(ds_exists(global.item_id,ds_type_map)){
    ds_map_destroy(global.item_id);
}

if(ds_exists(global.inventory,ds_type_map)){
    ds_map_destroy(global.inventory);
}

if(ds_exists(global.ChestList,ds_type_list)){
    ds_list_destroy(global.ChestList);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Now you can draw Inventory here:
if(global.show_inventory){



    draw_set_font(font);
    draw_panel(spr_background,0,box_x,box_y,boxwidth,boxheight,32);
    var font_size = font_get_size(font);
    
    //draw_text(270,40,"Key Q: Add random Item#Key W: Clear Inventory#Key E: Save Inventory#Key R: Load Inventory#Key T: Sort Inventory#Key Y: Clear a Item from Selecting Slot#Key U: Delete Item by Stack Amount#Key I: Drop a Item#Key O: Find Item on Inventory#Key P: Run the script of item with effect#Key A: Exchange Items from #       'ItemOverMouse' to Selecting");
    
    draw_set_halign(fa_center);
    
    draw_text(box_hcenter,box_y+(font_size/2)+padding,"INVENTORY " + string(page+1));
    draw_set_halign(fa_left);
    inventory_draw(box_x+padding,box_y+font_size+(padding*2),spr_slot, spr_slot,8,c_white);
    
       
    var id_last = inventory_read("ID",inventory_last_select());
    
    
    //Read the script "item_int" for more information for item_id_read
    
    if( inventory_last_select() &gt;= 0 &amp;&amp; !is_undefined( inventory_read("ID",inventory_last_select()) ) ){
        
        draw_set_halign(fa_center);
        draw_set_valign(fa_center);
        draw_sprite_ext(item_id_read(id_last,2),image_index,box_x+padding,box_vcenter,4,4,0,c_white,1);
        
        draw_set_halign(fa_left);
        draw_set_valign(fa_bottom);
        draw_text(box_x+96,box_vcenter+padding,
        "Item: " + string(item_id_read(id_last,0)) +
        "Stack: " + string(inventory_read("Stack",inventory_last_select())) + " / " + string(item_id_read(id_last,1))
        );
        /**
        draw_text(box_x+padding,box_vcenter+96,
        "Description: " + string(item_id_read(id_last,5))
        );
        **/
        draw_text_ext(box_x+padding,box_vcenter+96,
        string(item_id_read(id_last,5)),
        font_size,
        boxwidth - (padding*2)
        );
        
    }

    draw_set_halign(fa_left);
    draw_text(box_x+padding,box_bottom - padding - font_size,"CREDITS: " + string(global.credits));
    
        // Draw nav buttons
    var b;
    for(var i = 0; i&lt;array_length_1d(navbuttons); i++){
        
        b = navbuttons[i];
        if(b[BTN_SHOW]){
            draw_panel(spr_background,0,b[0],b[1],b[2],b[3],16);
            if(b[4]){
                draw_set_color(c_white);
            }
            draw_set_halign(fa_center);
            draw_set_valign(fa_center);
            draw_text(b[0]+(b[2]/2),b[1]+(b[3]/2),b[5]);
            draw_set_color(c_lime);
            draw_set_valign(fa_bottom);
        }
    }
    
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="35">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Add inventory
//scr_inv_item_add(2,5);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
