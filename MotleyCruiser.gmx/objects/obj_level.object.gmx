<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init Some variables
glr_clear_all();
shadows_on = false;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Grant some inventory

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create the random level
if(global.room_type=="random"){

texture_set_interpolation(false);

// Resize
room_width=(CELL_WIDTH/16)*720;
room_height = (CELL_HEIGHT/16)*720;

// Set the grid width and height
var width = room_width div CELL_WIDTH;
var height = room_height div CELL_HEIGHT;
sizeModifier = .50;//.10 .25 .50, .75, 1, 1.25 ... do not exceed 2. This is for the overall size of the grid. Larger ships.

// Create the DS grid
grid = ds_grid_create(width, height);

// Create the pathfinding grid
grid_path = mp_grid_create(0,0,width,height,CELL_WIDTH,CELL_HEIGHT);

// Fill the grid with voids
ds_grid_set_region(grid, 0, 0, width-1, height-1, VOID);

// Load a room
// BE SURE TO CALL randomize() before this.

//if (show_question("Would you like to load a room")){
 
// var key = get_string("What is the name of the room?", "default");
// ini_open("Save.ini");
// var seed = ini_read_real("Rooms", key, 0);
// random_set_seed(seed);

//}else{
// Randomize the world
//    randomize();
//}
if(global.room_seed!=noone){
    random_set_seed(global.room_seed);
}else{
    global.room_seed = random_get_seed();
}


// Create the controller in the center of the grid
var cx = width div 2;
var cy = height div 2;

var cx2 = cx;
var cy2 = cy;

var px1 = cx;
var py1 = cy;

door_reactor_placed = false;

// Give the controller a random direction
var cdir = irandom(3);

// The odds variable for changing direction
var odds = 1;

// An array to keep track of floor locations.
var floors = noone; 
var i = 0;
// Create the level using 1000 steps
repeat (1000 * sizeModifier){
    // Place a floor tile a the controller position
    grid[# cx,cy]=FLOOR;
    //ds_grid_set(grid, cx, cy, FLOOR); (alternative)

    
    // Mirror the above
    grid[# cx2,cy]=FLOOR;
    
    
    var fc=noone;
    fc[0]=cx;
    fc[1]=cx2;    
    fc[2]=cy;
    floors[i]=fc;
    
    // Randomize the direction of the controller
    if(irandom(odds) == odds){
        cdir = irandom(3);
    }
    
    // Move the controller
    var xdir = lengthdir_x(1, cdir*90);
    var ydir = lengthdir_y(1, cdir*90);
    cx += xdir;
    cx2 -= xdir;
    cy += ydir;
    
    // Clamp cx and cy so you don't go outside of the grid
    cx = clamp(cx, 1, width-2);
    cx2 = clamp(cx2, 1, width-2);
    cy = clamp(cy, 1, height-2);
}


if(global.controls_total&gt;0){
    // Make a hallway and alcove
    grid[# px1,py1-1]=FLOOR;
    grid[# px1,py1-2]=FLOOR;
    grid[# px1,py1-3]=FLOOR;
    scr_stamp_rectangle(px1-1,py1-6,3,3);
    
    //Make a helm room door
    var reactor_door = instance_create(room_width/2,((py1 - 4) * CELL_HEIGHT) - (CELL_HEIGHT/2),obj_door);
    reactor_door.depth = -10000;
    reactor_door.room_to = room_get_name(room);
    reactor_door.room_type = "control";
    reactor_door.door_type = "goto";
    reactor_door.door_index = 0;
    door_reactor_placed = true;
    
    if(global.controls_total&gt;1){
    
        // Make an engine room door
        var rf = scr_array_random(floors);
        scr_stamp_rectangle(rf[0]-1,rf[2]-1,3,3);
        var e_door = instance_create( ( (rf[0]+1)*CELL_WIDTH) - (CELL_WIDTH/2),( (rf[2]+1)* CELL_HEIGHT) - (CELL_HEIGHT/2),obj_door);
        e_door.depth = -10000;
        e_door.room_to = room_get_name(room);
        e_door.room_type = "control";
        e_door.door_type = "goto";
        e_door.door_index = 1;
        e_door = true;
        
    }
    
    if(global.controls_total&gt;2){
    
        // Make a shield room
        scr_stamp_rectangle(rf[1]-1,rf[2]-1,3,3);
        var e_door = instance_create( ( (rf[1]+1)*CELL_WIDTH) - (CELL_WIDTH/2),( (rf[2]+1)* CELL_HEIGHT) - (CELL_HEIGHT/2),obj_door);
        e_door.depth = -10000;
        e_door.room_to = room_get_name(room);
        e_door.room_type = "control";
        e_door.door_type = "goto";
        e_door.door_index = 2;
        e_door = true;  
         
    }
    
    
}






// Add the walls
for(var yy = 1; yy &lt; height-1; yy++){
    for(var xx=1; xx &lt; width-1; xx++){
        if(grid[# xx,yy] == FLOOR){
            // Check for walls
            if(grid[# xx+1, yy] != FLOOR){
                grid[# xx+1, yy] = WALL;
            }
            if(grid[# xx-1, yy] != FLOOR){
                grid[# xx-1, yy] = WALL;
            }
            if(grid[# xx, yy+1] != FLOOR){
                grid[# xx, yy+1] = WALL;
            }
            if(grid[# xx, yy-1] != FLOOR){
                grid[# xx, yy-1] = WALL;
            }          
        }    
    }
}

// Draw the level
for(var yy = 0; yy &lt; height; yy++){
    for(var xx = 0; xx &lt; width; xx++){
        if(grid[# xx, yy] == FLOOR){            
            tile_add(bg_floor, 0, 0, CELL_WIDTH, CELL_HEIGHT, xx*CELL_WIDTH, yy*CELL_HEIGHT, 0);
              
        }else{
            //This is a wall or void. Add a solid cell to the pathfinding grid.
            mp_grid_add_cell(grid_path,xx,yy);
        }
    }
}

var tw = CELL_WIDTH/2;
var th = CELL_HEIGHT/2;

// Add the tiles
for (var yy = 0; yy &lt; height*2; yy++) {
    for (var xx = 0; xx &lt; width*2; xx++) {
        if (grid[# xx div 2, yy div 2] == FLOOR) {
            // Get the tile's x and y
            var tx = xx*tw;
            var ty = yy*th;
            
            var right = grid[# (xx+1) div 2, yy div 2] != FLOOR;
            var left = grid[# (xx-1) div 2, yy div 2] != FLOOR;
            var top = grid[# xx div 2, (yy-1) div 2] != FLOOR;
            var bottom = grid[# xx div 2, (yy+1) div 2] != FLOOR;
            
            var top_right = grid[# (xx+1) div 2, (yy-1) div 2] != FLOOR;
            var top_left = grid[# (xx-1) div 2, (yy-1) div 2] != FLOOR;
            var bottom_right = grid[# (xx+1) div 2, (yy+1) div 2] != FLOOR;
            var bottom_left = grid[# (xx-1) div 2, (yy+1) div 2] != FLOOR;
            
             // Maybe place some cover
             var cOdds = 60;
             if( !top &amp;&amp; !bottom &amp;&amp; !right &amp;&amp; !left &amp;&amp; irandom(cOdds) == cOdds){
                var cover = instance_create(tx,ty,obj_crate);
                cover.depth = -ty;         
             }
            
            
            if (right) {
                if (bottom) {
                    tile_add(bg_walltiles, tw*0, th*1, tw, th, tx+tw, ty, -ty);
                    if(bottom_right){
                        tile_add(bg_walltiles, tw*4, th*1, tw, th, tx+tw, ty+th, -ty);
                    }
                    
                } else if (top) {
                    if (top_right) {
                        tile_add(bg_walltiles, tw*4, th*0, tw, th, tx+tw, ty-th, -ty);
                    } else {
                        tile_add(bg_walltiles, tw*3, th*0, tw, th, tx, ty-th, -ty);
                    }
                    tile_add(bg_walltiles, tw*0, th*1, tw, th, tx+tw, ty, -ty);
                } else {
                    tile_add(bg_walltiles, tw*0, th*1, tw, th, tx+tw, ty, -ty);
                }
            }
            
            if (left) {
                if (bottom) {
                    tile_add(bg_walltiles, tw*2, th*1, tw, th, tx-tw, ty, -ty);
                    if(bottom_left){
                        tile_add(bg_walltiles, tw*3, th*1, tw, th, tx-tw, ty+th, -ty);
                    }
                    
                } else if (top) {
                    if (top_left) {
                        tile_add(bg_walltiles, tw*3, th*0, tw, th, tx-tw, ty-th, -ty);
                    } else {
                        tile_add(bg_walltiles, tw*4, th*0, tw, th, tx, ty-th, -ty);
                    }
                    tile_add(bg_walltiles, tw*2, th*1, tw, th, tx-tw, ty, -ty);
                } else {
                    tile_add(bg_walltiles, tw*2, th*1, tw, th, tx-tw, ty, -ty);
                }
            }
            
            if (top) {
                if (!top_right) {
                    tile_add(bg_walltiles, tw*2, th*2, tw, th, tx, ty-th, -ty);
                } else if (!top_left) {
                    tile_add(bg_walltiles, tw*0, th*2, tw, th, tx, ty-th, -ty);
                } else {
                    tile_add(bg_walltiles, tw*1, th*2, tw, th, tx, ty-th, -ty);
                }
            }
            
            if (bottom) {
            

                if (!bottom_right) {
                    tile_add(bg_walltiles, tw*2, th*0, tw, th, tx, ty+th, -ty-tw*2);
                } else if (!bottom_left) {
                    tile_add(bg_walltiles, tw*0, th*0, tw, th, tx, ty+th, -ty-tw*2);
                } else {
                    tile_add(bg_walltiles, tw*1, th*0, tw, th, tx, ty+th, -ty-tw);
                }
                

            }
            


        }
    }
}

// Which door do we start at?

px_start = px1 * CELL_WIDTH + (CELL_WIDTH/2);
py_start = py1 * CELL_HEIGHT + (CELL_HEIGHT/2);

    
for(var i = 0; i &lt; instance_number(obj_door); i++) {
    var door = instance_find(obj_door,i);
    if(i==global.door_index){
        px_start = door.x;
        py_start = door.y + (CELL_HEIGHT);
        global.doors_active[i]=0;
    }
    if(global.doors_active[i]==0){
        
        instance_deactivate_object(door);

    }
}


//Create the player
instance_create(px_start, py_start, obj_player);

//Create crew
//instance_create(cx * CELL_WIDTH + (CELL_WIDTH/2), cy * CELL_HEIGHT + (CELL_WIDTH/2), obj_crew);
//instance_create(cx * CELL_WIDTH + (CELL_WIDTH/2), cy * CELL_HEIGHT + (CELL_WIDTH/2), obj_crew);
scr_instantiate_all_crew(px_start,py_start);

// Place a core
instance_create(px_start,py_start,obj_core);

// Place enemies
var mesh_id = noone;
if(shadows_on){
    mesh_id = glr_mesh_create(0, 0, false);
}

for(var yy = 0; yy &lt; height; yy++){
    for(var xx = 0; xx &lt; width; xx++){
        var ex = xx * CELL_WIDTH + CELL_WIDTH/2;
        var ey = yy * CELL_HEIGHT + CELL_HEIGHT/2;
        if(grid[# xx, yy] == FLOOR){
        
            // Maybe put an enemy here
            var odds = 30;
            
            if(point_distance(ex,ey,obj_player.x,obj_player.y) &gt; 80 &amp;&amp; irandom(odds) == odds){
  
            
                var newEnemy = instance_create(ex,ey,obj_enemy);
                var set_mode = "hold";
                
                var oddsMode = 3;
                var modRnm = irandom(oddsMode);
                if(modRnm==0){
                    set_mode = "hunt";
                }else if(modRnm==1){
                    set_mode = "defend";                
                }else{
                    set_mode = "hold";           
                }
                newEnemy.mode = set_mode;
                
                var race_index = irandom(array_height_2d(global.races)-1);
                newEnemy.sprite_index = global.races[race_index,RACE_SPR];

            }

            // Place light
            llods = 10;
            if(irandom(llods)==llods){
                var clr = choose(c_red,c_green,c_blue,c_yellow,c_orange,c_white,c_lime);
                var my_light = glr_light_create(spr_glr_light_mask_point, 0, ex, ey, clr, .05);
                glr_light_set_static(my_light, true);
            }
        
        
        }else if(grid[# xx, yy] == WALL &amp;&amp; mesh_id != noone){
            // Add a mesh.
            
            glr_mesh_submesh_add_box(mesh_id,CELL_WIDTH,CELL_HEIGHT,xx * CELL_WIDTH,yy * CELL_HEIGHT);
            glr_mesh_update(mesh_id);
        }
    }
}


}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create ship control room
// A basic room with a ship component in the middle
if(global.room_type=="control"){
    
    
    texture_set_interpolation(false);
    
    // Resize
    room_width = 740;
    room_height = 740;
    
    var wall_bg = bg_walltiles;
    
    // Set the grid width and height
    var width = room_width div CELL_WIDTH;
    var height = room_height div CELL_HEIGHT;
    sizeModifier = .15;//.10 .25 .50, .75, 1, 1.25 ... do not exceed 2. This is for the overall size of the grid. Larger ships.
    
    // Create the DS grid
    grid = ds_grid_create(width, height);
    
    // Create the pathfinding grid
    grid_path = mp_grid_create(0,0,width,height,CELL_WIDTH,CELL_HEIGHT);
    
    // Fill the grid with VOID
    ds_grid_set_region(grid, 0, 0, width, height, VOID);
    
    // Build floor
    ds_grid_set_region(grid, width/4, height/4, width-(width/4), height-(height/4), FLOOR);
    
    // Void in the middle
    var boxX1 = (width/2) - 2;
    var boxX2 = (width/2) + 2;
    ds_grid_set_region(grid, boxX1, boxX1, boxX2, boxX2, WALL);
    
    
    // Place a master panel. Player will need to click this to beat the room.
    core = instance_create(room_width/2,(boxX2 * CELL_HEIGHT) + CELL_HEIGHT,obj_master_panel);
    
    // Place a couple of big turrets.
    t1 = instance_create(room_width/2 - (CELL_WIDTH*2),(boxX2 * CELL_HEIGHT) + (CELL_HEIGHT*2),obj_turret);
    t2 = instance_create(room_width/2 + (CELL_WIDTH*2),(boxX2 * CELL_HEIGHT) + (CELL_HEIGHT*2),obj_turret);
    
    t1.depth = -1* t1.y;
    t2.depth = -1* t2.y;
    
    //Place a door

   var reactor_door = instance_create(room_width/2, room_height/4,obj_door);
   reactor_door.room_to = room_get_name(room);
   reactor_door.room_type = "random";
   reactor_door.room_seed = global.room_seed;
   reactor_door.door_type = "goback";
        
    //Create the player
    instance_create(room_width/2, room_height/4 + (CELL_HEIGHT*2), obj_player);
    
    //Intantiate crew
    scr_instantiate_all_crew(room_width/2,room_height/4 + (CELL_HEIGHT*2));
    
    //Place a ship part
    instance_create(room_width/2, room_height/2, obj_room_reactor);   
    
    // Add the walls
    for(var yy = 1; yy &lt; height-1; yy++){
        for(var xx=1; xx &lt; width-1; xx++){
            if(grid[# xx,yy] == FLOOR){
                // Check for walls
                if(grid[# xx+1, yy] != FLOOR){
                    grid[# xx+1, yy] = WALL;
                }
                if(grid[# xx-1, yy] != FLOOR){
                    grid[# xx-1, yy] = WALL;
                }
                if(grid[# xx, yy+1] != FLOOR){
                    grid[# xx, yy+1] = WALL;
                }
                if(grid[# xx, yy-1] != FLOOR){
                    grid[# xx, yy-1] = WALL;
                }          
            }    
        }
    }
    
    // Draw the level
    for(var yy = 0; yy &lt; height; yy++){
        for(var xx = 0; xx &lt; width; xx++){
            if(grid[# xx, yy] == FLOOR){
                
                tile_add(bg_floor, 0, 0, CELL_WIDTH, CELL_HEIGHT, xx*CELL_WIDTH, yy*CELL_HEIGHT, 0);
                
                var ex = xx * CELL_WIDTH + CELL_WIDTH/2;
                var ey = yy * CELL_HEIGHT + CELL_HEIGHT/2;
                
                // Maybe put an enemy here
                var odds = 30;
            
                if(point_distance(ex,ey,obj_player.x,obj_player.y) &gt; 80 &amp;&amp; irandom(odds) == odds){
                    var newEnemy = instance_create(ex,ey,obj_enemy);
                    var set_mode = "hold";
                    
                    var oddsMode = 3;
                    var modRnm = irandom(oddsMode);
                    if(modRnm==0){
                        set_mode = "hunt";
                    }else if(modRnm==1){
                        set_mode = "defend";                
                    }else{
                        set_mode = "hold";           
                    }
                    newEnemy.mode = set_mode;
                    
                    var race_index = irandom(array_height_2d(global.races)-1);
                    newEnemy.sprite_index = global.races[race_index,RACE_SPR];
    
                }
                
            // Place light
            llods = 10;
            if(irandom(llods)==llods){
                var clr = choose(c_red,c_green,c_blue,c_yellow,c_orange,c_white,c_lime);
                var my_light = glr_light_create(spr_glr_light_mask_point, 0, ex, ey, clr, .05);
                glr_light_set_static(my_light, true);
            }
    
                          
            }else{
                //This is a wall or void. Add a solid cell to the pathfinding grid.
                mp_grid_add_cell(grid_path,xx,yy);
            }
        }
    }
    
    var tw = CELL_WIDTH/2;
    var th = CELL_HEIGHT/2;
    
    // Add the tiles
    for (var yy = 0; yy &lt; height*2; yy++) {
        for (var xx = 0; xx &lt; width*2; xx++) {
            if (grid[# xx div 2, yy div 2] == FLOOR) {
                // Get the tile's x and y
                var tx = xx*tw;
                var ty = yy*th;
                
                var right = grid[# (xx+1) div 2, yy div 2] != FLOOR;
                var left = grid[# (xx-1) div 2, yy div 2] != FLOOR;
                var top = grid[# xx div 2, (yy-1) div 2] != FLOOR;
                var bottom = grid[# xx div 2, (yy+1) div 2] != FLOOR;
                
                var top_right = grid[# (xx+1) div 2, (yy-1) div 2] != FLOOR;
                var top_left = grid[# (xx-1) div 2, (yy-1) div 2] != FLOOR;
                var bottom_right = grid[# (xx+1) div 2, (yy+1) div 2] != FLOOR;
                var bottom_left = grid[# (xx-1) div 2, (yy+1) div 2] != FLOOR;
                
                 // Maybe place some cover
                 var cOdds = 60;
                 if( !top &amp;&amp; !bottom &amp;&amp; !right &amp;&amp; !left &amp;&amp; irandom(cOdds) == cOdds){
                    var cover = instance_create(tx,ty,obj_crate);
                    cover.depth = -ty;         
                 }
                
                
                if (right) {
                    if (bottom) {
                        tile_add(wall_bg, tw*0, th*1, tw, th, tx+tw, ty, -ty);
                        if(bottom_right){
                            tile_add(wall_bg, tw*4, th*1, tw, th, tx+tw, ty+th, -ty);
                        }
                        
                    } else if (top) {
                        if (top_right) {
                            tile_add(wall_bg, tw*4, th*0, tw, th, tx+tw, ty-th, -ty);
                        } else {
                            tile_add(wall_bg, tw*3, th*0, tw, th, tx, ty-th, -ty);
                        }
                        tile_add(wall_bg, tw*0, th*1, tw, th, tx+tw, ty, -ty);
                    } else {
                        tile_add(wall_bg, tw*0, th*1, tw, th, tx+tw, ty, -ty);
                    }
                }
                
                if (left) {
                    if (bottom) {
                        tile_add(wall_bg, tw*2, th*1, tw, th, tx-tw, ty, -ty);
                        if(bottom_left){
                            tile_add(wall_bg, tw*3, th*1, tw, th, tx-tw, ty+th, -ty);
                        }
                        
                    } else if (top) {
                        if (top_left) {
                            tile_add(wall_bg, tw*3, th*0, tw, th, tx-tw, ty-th, -ty);
                        } else {
                            tile_add(wall_bg, tw*4, th*0, tw, th, tx, ty-th, -ty);
                        }
                        tile_add(wall_bg, tw*2, th*1, tw, th, tx-tw, ty, -ty);
                    } else {
                        tile_add(wall_bg, tw*2, th*1, tw, th, tx-tw, ty, -ty);
                    }
                }
                
                if (top) {
                    if (!top_right) {
                        tile_add(wall_bg, tw*2, th*2, tw, th, tx, ty-th, -ty);
                    } else if (!top_left) {
                        tile_add(wall_bg, tw*0, th*2, tw, th, tx, ty-th, -ty);
                    } else {
                        tile_add(wall_bg, tw*1, th*2, tw, th, tx, ty-th, -ty);
                    }
                }
                
                if (bottom) {
                
    
                    if (!bottom_right) {
                        tile_add(wall_bg, tw*2, th*0, tw, th, tx, ty+th, -ty-tw*2);
                    } else if (!bottom_left) {
                        tile_add(wall_bg, tw*0, th*0, tw, th, tx, ty+th, -ty-tw*2);
                    } else {
                        tile_add(wall_bg, tw*1, th*0, tw, th, tx, ty+th, -ty-tw);
                    }
                    
    
                }
                
    
    
            }
        }
    }
    
}//End room type check
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create custom level
if(global.room_type=="custom"){

texture_set_interpolation(false);

// Resize
room_width = 740;
room_height = 740;

var wall_bg = bg_walltiles;

// Set the grid width and height
var width = room_width div CELL_WIDTH;
var height = room_height div CELL_HEIGHT;

// Create the DS grid
grid = ds_grid_create(width, height);

// Create the pathfinding grid
grid_path = mp_grid_create(0,0,width,height,CELL_WIDTH,CELL_HEIGHT);

// Fill the grid with VOID
ds_grid_set_region(grid, 0, 0, width, height, VOID);


// Find floor objects that were placed and update the grid with their location.
for(var i = 0; i &lt; instance_number(obj_floor); i++) {
    var wall = instance_find(obj_floor,i);
    wx = wall.x / CELL_WIDTH;
    wy = wall.y / CELL_HEIGHT;
    grid[# wx, wy] = FLOOR;
}





// Add the walls
for(var yy = 1; yy &lt; height-1; yy++){
    for(var xx=1; xx &lt; width-1; xx++){
        if(grid[# xx,yy] == FLOOR){
            // Check for walls
            if(grid[# xx+1, yy] != FLOOR){
                grid[# xx+1, yy] = WALL;
            }
            if(grid[# xx-1, yy] != FLOOR){
                grid[# xx-1, yy] = WALL;
            }
            if(grid[# xx, yy+1] != FLOOR){
                grid[# xx, yy+1] = WALL;
            }
            if(grid[# xx, yy-1] != FLOOR){
                grid[# xx, yy-1] = WALL;
            }          
        }    
    }
}

// Draw the level
for(var yy = 0; yy &lt; height; yy++){
    for(var xx = 0; xx &lt; width; xx++){
        if(grid[# xx, yy] == FLOOR){
            
            tile_add(bg_floor, 0, 0, CELL_WIDTH, CELL_HEIGHT, xx*CELL_WIDTH, yy*CELL_HEIGHT, 0);
            
            var ex = xx * CELL_WIDTH + CELL_WIDTH/2;
            var ey = yy * CELL_HEIGHT + CELL_HEIGHT/2;

                      
        }else{
            //This is a wall or void. Add a solid cell to the pathfinding grid.
            mp_grid_add_cell(grid_path,xx,yy);
        }
    }
}

var tw = CELL_WIDTH/2;
var th = CELL_HEIGHT/2;

// Add the tiles
for (var yy = 0; yy &lt; height*2; yy++) {
    for (var xx = 0; xx &lt; width*2; xx++) {
        if (grid[# xx div 2, yy div 2] == FLOOR) {
            // Get the tile's x and y
            var tx = xx*tw;
            var ty = yy*th;
            
            var right = grid[# (xx+1) div 2, yy div 2] != FLOOR;
            var left = grid[# (xx-1) div 2, yy div 2] != FLOOR;
            var top = grid[# xx div 2, (yy-1) div 2] != FLOOR;
            var bottom = grid[# xx div 2, (yy+1) div 2] != FLOOR;
            
            var top_right = grid[# (xx+1) div 2, (yy-1) div 2] != FLOOR;
            var top_left = grid[# (xx-1) div 2, (yy-1) div 2] != FLOOR;
            var bottom_right = grid[# (xx+1) div 2, (yy+1) div 2] != FLOOR;
            var bottom_left = grid[# (xx-1) div 2, (yy+1) div 2] != FLOOR;
            
             // Maybe place some cover
             var cOdds = 60;
             if( !top &amp;&amp; !bottom &amp;&amp; !right &amp;&amp; !left &amp;&amp; irandom(cOdds) == cOdds){
                var cover = instance_create(tx,ty,obj_crate);
                cover.depth = -ty;         
             }
            
            
            if (right) {
                if (bottom) {
                    tile_add(wall_bg, tw*0, th*1, tw, th, tx+tw, ty, -ty);
                    if(bottom_right){
                        tile_add(wall_bg, tw*4, th*1, tw, th, tx+tw, ty+th, -ty);
                    }
                    
                } else if (top) {
                    if (top_right) {
                        tile_add(wall_bg, tw*4, th*0, tw, th, tx+tw, ty-th, -ty);
                    } else {
                        tile_add(wall_bg, tw*3, th*0, tw, th, tx, ty-th, -ty);
                    }
                    tile_add(wall_bg, tw*0, th*1, tw, th, tx+tw, ty, -ty);
                } else {
                    tile_add(wall_bg, tw*0, th*1, tw, th, tx+tw, ty, -ty);
                }
            }
            
            if (left) {
                if (bottom) {
                    tile_add(wall_bg, tw*2, th*1, tw, th, tx-tw, ty, -ty);
                    if(bottom_left){
                        tile_add(wall_bg, tw*3, th*1, tw, th, tx-tw, ty+th, -ty);
                    }
                    
                } else if (top) {
                    if (top_left) {
                        tile_add(wall_bg, tw*3, th*0, tw, th, tx-tw, ty-th, -ty);
                    } else {
                        tile_add(wall_bg, tw*4, th*0, tw, th, tx, ty-th, -ty);
                    }
                    tile_add(wall_bg, tw*2, th*1, tw, th, tx-tw, ty, -ty);
                } else {
                    tile_add(wall_bg, tw*2, th*1, tw, th, tx-tw, ty, -ty);
                }
            }
            
            if (top) {
                if (!top_right) {
                    tile_add(wall_bg, tw*2, th*2, tw, th, tx, ty-th, -ty);
                } else if (!top_left) {
                    tile_add(wall_bg, tw*0, th*2, tw, th, tx, ty-th, -ty);
                } else {
                    tile_add(wall_bg, tw*1, th*2, tw, th, tx, ty-th, -ty);
                }
            }
            
            if (bottom) {
            

                if (!bottom_right) {
                    tile_add(wall_bg, tw*2, th*0, tw, th, tx, ty+th, -ty-tw*2);
                } else if (!bottom_left) {
                    tile_add(wall_bg, tw*0, th*0, tw, th, tx, ty+th, -ty-tw*2);
                } else {
                    tile_add(wall_bg, tw*1, th*0, tw, th, tx, ty+th, -ty-tw);
                }
                

            }
            


        }
    }
}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Cleanup

ds_grid_destroy(grid);
mp_grid_destroy(grid_path);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Music

audio_stop_all();
audio_play_sound(snd_theme1,1,1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
