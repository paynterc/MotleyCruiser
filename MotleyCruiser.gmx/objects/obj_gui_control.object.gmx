<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Use this object to manage other window interfaces
scr_set_gui_vars();

has_ball=noone;// Who has the ball?
ui_stack = ds_stack_create();// Stack previously open menus here so we can get back to them

// Resource indicators
rFont = fnt_menus;
blinkSpeed = 1;
blinky = false;
alarm[0]=room_speed * blinkSpeed;
eButtons = noone;
for(var i=0; i&lt;4; i++){
    var btn = scr_gui_entity_button();
    btn[BTN_TXT]="CLICK FOR HELP";
    btn[BTN_W]=256;
    btn[BTN_H]=32;
    eButtons[i]=btn;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Blinky2
blinky = false;
alarm[0]=room_speed * blinkSpeed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Blinky 1
blinky=true;
alarm[1]=room_speed * blinkSpeed;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// User GUI Commands

if(scr_user_input("toggle_minimap") &amp;&amp; room==rm_space){
    if(instance_exists(obj_minimap)){
        if(!obj_minimap.show){
            scr_gui_set_context(obj_minimap);
        }else{
            scr_gui_return_context();
        }         
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check hover status on buttons
if(eButtons != noone){
    var guix = device_mouse_x_to_gui(0);
    var guiy = device_mouse_y_to_gui(0);
    for(var i = 0; i&lt;array_length_1d(eButtons); i++){
        thebutton = eButtons[i];
        if(thebutton[BTN_SHOW]){  
            xhover = ( guix == median(thebutton[BTN_X], guix, thebutton[BTN_X] + thebutton[BTN_W]) );
            yhover = ( guiy == median(thebutton[BTN_Y], guiy, thebutton[BTN_Y] + thebutton[BTN_H]) );
            thebutton[@ 4] = xhover &amp;&amp; yhover;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// See if gui button was pressed.
var bIdx=noone;
for(var i=0; i&lt;array_length_1d(eButtons); i++){
    var btn=eButtons[i];
    if(btn[BTN_HOVER] &amp;&amp; btn[BTN_SHOW]){
        bIdx = i;// Return  index of clicked button.
        break;
    }
}
if(bIdx==0){
    // Do fuel dialogue
    if(instance_exists(obj_dialog_control)){
        with(obj_dialog_control){
            alarm[1]=room_speed*0.25;
        }
    }
}else if(bIdx==1){
    // Do oxygen dialogue
    scr_dlg_space_start_no_oxy();
}else if(bIdx==2){
    // Do water dialogue
}else if(bIdx==3){
    // Do food dialogue

}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Close all windows and show active
/// Close all menus and reset
var menu;
for (i = 0; i &lt; instance_number(obj_menu); i++)
{
    menu = instance_find(obj_menu,i);
    with(menu){
        event_user(1);// hide
    }
}
if(has_ball != noone &amp;&amp; instance_exists(has_ball)){
    with(has_ball){
        event_user(0);// show
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Close all menus and reset
var menu;
for (i = 0; i &lt; instance_number(obj_menu); i++)
{
    menu = instance_find(obj_menu,i);
    with(menu){
        event_user(1);// hide
    }
}

has_ball=noone;// Who has the ball?
ds_stack_clear(ui_stack);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Destroy stuff
if(ds_exists(ui_stack,ds_type_stack)){
    ds_map_destroy(ui_stack);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw Space Gui
// supplies, credits, locatin
if(room == rm_space){
    var _xStart = 32;
    var _yStart = 16;
    var x1=_xStart;
    var y1=_yStart;
    var rw = 1;
    var y2=0;
    var lspacing = 4;
    
    if(instance_exists(obj_ship_data)){
        
        
        
        y2 = scr_gui_resource_bar(x1,y1,obj_ship_data.cargo_fuel,global.supply_fuel,blinky,c_orange,"FUEL",eButtons[rw-1]);
        rw += 1;y1 = y2+lspacing;
        y2 = scr_gui_resource_bar(x1,y1,obj_ship_data.cargo_oxygen,global.supply_oxygen,blinky,c_silver,"OXYGEN",eButtons[rw-1]);
        rw += 1;y1 = y2+lspacing;
        y2 = scr_gui_resource_bar(x1,y1,obj_ship_data.cargo_water,global.supply_water,blinky,c_aqua,"WATER",eButtons[rw-1]);
        rw += 1;y1 = y2+lspacing;
        y2 = scr_gui_resource_bar(x1,y1,obj_ship_data.cargo_food,global.supply_food,blinky,c_red,"FOOD",eButtons[rw-1]);
        

    }
    
    draw_set_halign(fa_center);
    draw_set_valign(fa_top);
    x1= gui_width / 2;
    y1=_yStart;
    draw_set_color(c_lime);
    draw_text(x1,y1,"GOLD: " + string(global.credits));
    
    draw_set_halign(fa_left);
    draw_set_valign(fa_bottom);
    x1= _xStart;
    y1 = gui_height - 16;
    draw_set_color(c_lime);
    draw_text(x1,y1,"SECTOR: " + string(global.sector_x) + "|"  + string(global.sector_y) );
    
    if(instance_exists(obj_player_ship)){
        draw_set_halign(fa_center);
        draw_set_valign(fa_bottom);
        x1= gui_width / 2;
        draw_set_color(c_lime);
        draw_text(x1,y1,"COORDINATES: x:" + string(round(obj_player_ship.x)) + " | y:" + + string(round(obj_player_ship.y)) );
    }

    
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Debug text
    draw_set_halign(fa_right);
    draw_set_valign(fa_bottom);
    if(fps_real&lt;60){
        draw_set_colour(c_red);
    }else{
        draw_set_colour(c_lime);
    }
    draw_text(gui_width-32, gui_height-16, string(fps_real) + " :FPS Real");
    draw_set_colour(c_lime);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
